Unknown [1c0000000000000000003d0c0000000000000000]SectionInteger g_vocals_hit_window_enabled 1SectionInteger g_vocals_hit_window_debug 0SectionInteger g_vocals_hit_window_ms 40SectionInteger g_vocals_min_slide_ms 10SectionInteger g_vocals_min_slide_enabled 1SectionInteger g_vocals_min_spoken_ms 40SectionInteger g_vocals_phrase_band_moments_enabled 1SectionInteger g_backup_vocals_enabled 0SectionInteger voclas_proto 1SectionInteger voclas_proto_num_players 4SectionFloatsX2 voclas_proto_test_offset{	Floats [0.00000, 0.00000]}SectionArray voclas_proto_adjustments{	ArrayStruct	[		StructHeader		{			StructArray rgba_fireball			{				ArrayInteger				[					0					177					255					255				]			}			StructFloatX2 scale_fireball			{				Floats [0.450000, 0.450000]			}			StructStruct particle_base			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							255							128							0							255						]					}					StructArray end_color					{						ArrayInteger						[							255							0							0							0						]					}				}			}			StructStruct particle_miss			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							128							0							255							255						]					}					StructArray end_color					{						ArrayInteger						[							0							0							255							0						]					}				}			}			StructQBKey hud_parent = alias_v1			StructQBKey highway_position = vocal1		}		StructHeader		{			StructArray rgba_fireball			{				ArrayInteger				[					39					224					105					255				]			}			StructFloatX2 scale_fireball			{				Floats [0.450000, 0.450000]			}			StructStruct particle_base			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							255							128							0							255						]					}					StructArray end_color					{						ArrayInteger						[							255							0							0							0						]					}				}			}			StructStruct particle_miss			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							0							128							255							255						]					}					StructArray end_color					{						ArrayInteger						[							0							0							255							0						]					}				}			}			StructQBKey hud_parent = alias_v2			StructQBKey highway_position = vocal2		}		StructHeader		{			StructArray rgba_fireball			{				ArrayInteger				[					222					39					224					255				]			}			StructFloatX2 scale_fireball			{				Floats [0.450000, 0.450000]			}			StructStruct particle_base			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							255							128							0							255						]					}					StructArray end_color					{						ArrayInteger						[							255							0							0							0						]					}				}			}			StructStruct particle_miss			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							0							128							0							255						]					}					StructArray end_color					{						ArrayInteger						[							0							0							255							0						]					}				}			}			StructQBKey hud_parent = alias_v1			StructQBKey highway_position = vocal1		}		StructHeader		{			StructArray rgba_fireball			{				ArrayInteger				[					255					191					0					255				]			}			StructFloatX2 scale_fireball			{				Floats [0.450000, 0.450000]			}			StructStruct particle_base			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							255							128							0							255						]					}					StructArray end_color					{						ArrayInteger						[							255							0							0							0						]					}				}			}			StructStruct particle_miss			{				StructHeader				{					StructArray start_color					{						ArrayInteger						[							128							128							128							255						]					}					StructArray end_color					{						ArrayInteger						[							0							0							255							0						]					}				}			}			StructQBKey hud_parent = alias_v1			StructQBKey highway_position = vocal1		}		]}SectionStruct vocal_mic_type_props{	StructHeader	{		StructStruct logitech		{			StructHeader			{				StructFloat noise_gate = 0.019999999552965164				StructFloat star_power_peak = 0.4000000059604645				StructInt star_power_hertz = 100				StructInt star_power_frames = 2				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 30				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}		StructStruct singstar		{			StructHeader			{				StructFloat noise_gate = 0.009999999776482582				StructFloat star_power_peak = 0.4000000059604645				StructInt star_power_hertz = 125				StructInt star_power_frames = 2				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 60				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}		StructStruct microsoft_wireless		{			StructHeader			{				StructFloat noise_gate = 0.009999999776482582				StructFloat star_power_peak = 1.00				StructInt star_power_hertz = 0				StructInt star_power_frames = 1				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 60				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}		StructStruct headset		{			StructHeader			{				StructFloat noise_gate = 0.019999999552965164				StructFloat star_power_peak = 0.25				StructInt star_power_hertz = 60				StructInt star_power_frames = 3				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 180				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}		StructStruct wav		{			StructHeader			{				StructFloat noise_gate = 0.009999999776482582				StructFloat star_power_peak = 0.12000000476837158				StructInt star_power_hertz = 75				StructInt star_power_frames = 3				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 30				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}		StructStruct bot		{			StructHeader			{				StructFloat noise_gate = 0.10000000149011612				StructFloat star_power_peak = 0.15000000596046448				StructInt star_power_hertz = 75				StructInt star_power_frames = 3				StructQBKey allow_volume_change = true				StructInt input_lag_ms = 30				StructInt star_power_double_tap_frames = 60				StructInt star_power_double_tap_between_frames = 2			}		}	}}SectionInteger vocal_pitch_detection_lag 20SectionStruct vocal_difficulty{	StructHeader	{		StructStruct beginner		{			StructHeader			{				StructStruct leniency				{					StructHeader					{						StructInt pitch_class = 6					}				}				StructStruct slide_leniency				{					StructHeader					{						StructInt pitch_class = 6					}				}				StructStruct note_on_dropoff				{					StructHeader					{						StructInt pitch_class = 6					}				}				StructStruct hit_window_leniency				{					StructHeader					{						StructInt pitch_class = 6					}				}				StructFloat hit_credit = 0.5				StructInt phrase_score = 100				StructFloat jam_score = 0.30000001192092896				StructInt ff_sustain_pts = 100				StructInt ff_beat_pts = 3				StructFloat ff_beat_slop = 0.20000000298023224				StructArray ff_health_boost				{					ArrayFloat					[						0.100000						0.150000						0.200000						0.250000					]				}				StructFloat score_per_second = 50.00			}		}		StructStruct easy		{			StructHeader			{				StructStruct leniency				{					StructHeader					{						StructInt pitch_class = 3					}				}				StructStruct slide_leniency				{					StructHeader					{						StructInt pitch_class = 4						StructInt cents = 50					}				}				StructStruct note_on_dropoff				{					StructHeader					{						StructInt pitch_class = 5						StructInt cents = 50					}				}				StructStruct hit_window_leniency				{					StructHeader					{						StructInt pitch_class = 4						StructInt cents = 50					}				}				StructFloat hit_credit = 0.5				StructInt phrase_score = 200				StructFloat jam_score = 0.4000000059604645				StructInt ff_sustain_pts = 200				StructInt ff_beat_pts = 6				StructFloat ff_beat_slop = 0.20000000298023224				StructArray ff_health_boost				{					ArrayFloat					[						0.100000						0.150000						0.200000						0.250000					]				}				StructFloat score_per_second = 100.00			}		}		StructStruct medium		{			StructHeader			{				StructStruct leniency				{					StructHeader					{						StructInt pitch_class = 2					}				}				StructStruct slide_leniency				{					StructHeader					{						StructInt pitch_class = 4					}				}				StructStruct note_on_dropoff				{					StructHeader					{						StructInt pitch_class = 5					}				}				StructStruct hit_window_leniency				{					StructHeader					{						StructInt pitch_class = 4					}				}				StructFloat hit_credit = 0.5				StructInt phrase_score = 300				StructFloat jam_score = 0.5				StructInt ff_sustain_pts = 300				StructInt ff_beat_pts = 9				StructFloat ff_beat_slop = 0.20000000298023224				StructArray ff_health_boost				{					ArrayFloat					[						0.100000						0.150000						0.200000						0.250000					]				}				StructFloat score_per_second = 160.00			}		}		StructStruct hard		{			StructHeader			{				StructStruct leniency				{					StructHeader					{						StructInt pitch_class = 1						StructInt cents = 50					}				}				StructStruct slide_leniency				{					StructHeader					{						StructInt pitch_class = 3						StructInt cents = 50					}				}				StructStruct note_on_dropoff				{					StructHeader					{						StructInt pitch_class = 4						StructInt cents = 50					}				}				StructStruct hit_window_leniency				{					StructHeader					{						StructInt pitch_class = 3						StructInt cents = 50					}				}				StructFloat hit_credit = 0.5				StructInt phrase_score = 400				StructFloat jam_score = 0.6700000166893005				StructInt ff_sustain_pts = 400				StructInt ff_beat_pts = 12				StructFloat ff_beat_slop = 0.20000000298023224				StructArray ff_health_boost				{					ArrayFloat					[						0.100000						0.150000						0.200000						0.250000					]				}				StructFloat score_per_second = 220.00			}		}		StructStruct expert		{			StructHeader			{				StructStruct leniency				{					StructHeader					{						StructInt pitch_class = 1					}				}				StructStruct slide_leniency				{					StructHeader					{						StructInt pitch_class = 3					}				}				StructStruct note_on_dropoff				{					StructHeader					{						StructInt pitch_class = 4					}				}				StructStruct hit_window_leniency				{					StructHeader					{						StructInt pitch_class = 3					}				}				StructFloat hit_credit = 0.5				StructInt phrase_score = 500				StructFloat jam_score = 0.800000011920929				StructInt ff_sustain_pts = 500				StructInt ff_beat_pts = 15				StructFloat ff_beat_slop = 0.20000000298023224				StructArray ff_health_boost				{					ArrayFloat					[						0.100000						0.150000						0.200000						0.250000					]				}				StructFloat score_per_second = 275.00			}		}	}}SectionFloat vocal_starpower_increase 25.0000SectionInteger vocal_sp_threshold_melodic 50SectionFloat vocal_sp_boost_melodic 10.0000SectionFloat vocal_sp_threshold_noise 0.100000SectionFloat vocal_sp_boost_noise 10.0000SectionFloat vocal_ff_points_correct_pitch_mod 0.200000SectionFloat vocal_ff_points_deg_rate_mod 0.100000SectionFloat vocal_ff_points_sustain_rate_mod 0.100000SectionFloat vocal_ff_points_base_mod 0.300000SectionFloat vocal_ff_rewards_threshold 0.700000SectionFloat vocal_ff_points_scale_constant 1000.00SectionFloat vocal_ff_quality_base 0.310000SectionInteger vocal_tut_threshold_melodic 6SectionInteger vocal_tut_mute 0SectionInteger vocal_tut_no_star_power 0SectionArray vocals_hyperspeed_values{	ArrayFloat	[		1.00000		0.870000		0.770000		0.690000		0.625000		0.570000	]}SectionArray vocal_phrase_qualities{	ArrayStruct	[		StructHeader		{			StructFloat min = 0.00			StructQBStringQs text = 0x4cc460d8			StructInt round_to = 0			StructArray rgba			{				ArrayInteger				[					225					30					30					255				]			}			StructFloat health = -6.00			StructFloat sp_boost_legacy = 0.00			StructFloat sp_boost_bonus = 0.00			StructFloat sp_boost = 0.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 0.00			StructInt streak = 0			StructInt multiplier_mod = -100		}		StructHeader		{			StructFloat min = 0.10000000149011612			StructQBStringQs text = 0x4cc460d8			StructInt round_to = 0			StructArray rgba			{				ArrayInteger				[					225					30					30					255				]			}			StructFloat health = -4.00			StructFloat sp_boost = 0.00			StructFloat sp_boost_bonus = 0.00			StructFloat sp_boost_legacy = 0.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 0.20000000298023224			StructInt streak = 0			StructInt multiplier_mod = -100		}		StructHeader		{			StructFloat min = 0.20000000298023224			StructQBStringQs text = 0x33092d70			StructArray rgba			{				ArrayInteger				[					255					140					0					255				]			}			StructFloat health = -2.00			StructFloat sp_boost = 0.00			StructFloat sp_boost_bonus = 0.00			StructFloat sp_boost_legacy = 0.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 0.4000000059604645			StructInt streak = 0			StructInt multiplier_mod = -100		}		StructHeader		{			StructFloat min = 0.4000000059604645			StructQBStringQs text = 0x01ed5501			StructArray rgba			{				ArrayInteger				[					255					255					255					255				]			}			StructFloat health = 0.00			StructFloat sp_boost = 0.00			StructFloat sp_boost_bonus = 0.00			StructFloat sp_boost_legacy = 0.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 0.6000000238418579			StructInt streak = 0			StructInt multiplier_mod = -100		}		StructHeader		{			StructFloat min = 0.6000000238418579			StructQBStringQs text = b4782d22			StructArray rgba			{				ArrayInteger				[					255					255					0					255				]			}			StructInt health = 2			StructFloat sp_boost = 0.00			StructFloat sp_boost_bonus = 0.00			StructFloat sp_boost_legacy = 8.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 0.800000011920929			StructInt streak = 0			StructInt multiplier_mod = -2		}		StructHeader		{			StructFloat min = 0.800000011920929			StructQBStringQs text = 0x82bb7a47			StructArray rgba			{				ArrayInteger				[					0					255					0					255				]			}			StructInt health = 3			StructFloat sp_boost = 25.00			StructFloat sp_boost_bonus = 10.00			StructFloat sp_boost_legacy = 25.00			StructFloat sp_max_health = 2.00			StructQBKey fx_script = vocals_end_phrase_NO_fx			StructFloat song_value = 1.00			StructInt streak = 1			StructInt multiplier_mod = 1		}		]}SectionArray vocal_freeform_qualities{	ArrayStruct	[		StructHeader		{			StructFloat min = 0.00			StructQBStringQs text = 0x00000000			StructArray rgba			{				ArrayInteger				[					255					0					0					255				]			}			StructFloat health_boost = 0.00		}		StructHeader		{			StructFloat min = 0.30000001192092896			StructQBStringQs text = 0x00000000			StructArray rgba			{				ArrayInteger				[					255					255					0					255				]			}			StructFloat health_boost = 4.00		}		StructHeader		{			StructFloat min = 0.6000000238418579			StructQBStringQs text = 0x00000000			StructArray rgba			{				ArrayInteger				[					0					255					0					255				]			}			StructFloat health_boost = 8.00		}		]}SectionInteger vocal_score_inflation 1SectionInteger vocal_min_pitch_duration 1SectionInteger vocal_record_song 0SectionString vocal_use_recording ""SectionInteger vocal_bot_uses_starpower 0SectionInteger vocal_bot_semitones_off 0SectionInteger vocal_enable_guitar_samples 0SectionInteger vocal_enable_freeform_always 0SectionInteger vocal_bot_with_mic 0SectionQBKeyStringQs vocal_marker_freeform 0x1cd6e13eSectionArray vocal_marker_freeform_rgba{	ArrayInteger	[		100		80		0		255	]}SectionInteger vocal_mic_invalid_dist 0SectionInteger vocal_count_in_min_blank_ms_default 10000SectionInteger vocal_count_in_duration_ms_default 4000SectionFloat rolling_accuracy_mod 0.500000SectionFloat vocal_note_on_fade_start 0.500000SectionFloat vocal_base_score_scale 1.00000Script vocals_start_mic 0x81cdd519 [	:i $printf$${StructString 0x00000000 = "Vocals: Starting mic."}$	:i $NetSessionFunc$${StructQBKey func = voice_init}$	:i $NetSessionFunc$${		StructQBKey obj = voice		StructQBKey func = enable	}$		:i endfunction]Script vocals_init_mic_starpower_button c91937bf [	:i $SetMicStarpowerButtonParams$${		StructInt num_frames = 10		StructInt threshold = 15	}$		:i endfunction]Script vocals_init 0x367b306d [	:i $printf$$channel$ = $sfx$^[c71fb922]^$p$ = %GLOBAL%$player$	:i $ui_options_audio_update_mic_volume$$player$ = %GLOBAL%$player$	:i endfunction]Script vocals_set_mics_to_user_volumes ecb1e6ba [	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i $ui_options_audio_update_mic_volume$$player$ = %GLOBAL%$player$			:i endif		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i endfunction]Script controller_has_headset 0x92e8a5c2 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				controller			]		}		StructQBKey all	}$		:i if (%GLOBAL%$controller$ > %i(3))		:i return ${StructQBKey false}$	:i endif	:i if $Vocals_ControllerHasUsableHeadset$$controller$ = %GLOBAL%$controller$		:i return ${StructQBKey true}$	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script get_num_mics_plugged_in 0x0b39fb60 [	:i %GLOBAL%$num_mics_plugged_in$ = %i(0)	:i %GLOBAL%$controller$ = %i(0)	:i while 	:i if $controller_has_headset$$controller$ = %GLOBAL%$controller$		:i %GLOBAL%$num_mics_plugged_in$ = (%GLOBAL%$num_mics_plugged_in$ + %i(1))	:i endif	:i %GLOBAL%$controller$ = (%GLOBAL%$controller$ + %i(1))	:i loop_to %i(4)	:i %GLOBAL%$mic$ = %i(0)	:i while 	:i if $IsMicrophonePluggedIn$$number$ = %GLOBAL%$mic$		:i %GLOBAL%$num_mics_plugged_in$ = (%GLOBAL%$num_mics_plugged_in$ + %i(1))	:i endif	:i %GLOBAL%$mic$ = (%GLOBAL%$mic$ + %i(1))	:i loop_to %i(4)	:i return $num_mics_plugged_in$ = %GLOBAL%$num_mics_plugged_in$	:i endfunction]Script has_USB_mic_plugged_in 0x72204cd5 [	:i %GLOBAL%$mic$ = %i(0)	:i while 	:i if $IsMicrophonePluggedIn$$number$ = %GLOBAL%$mic$		:i return ${StructQBKey true}$	:i endif	:i %GLOBAL%$mic$ = (%GLOBAL%$mic$ + %i(1))	:i loop_to %i(4)	:i return ${StructQBKey false}$	:i endfunction]Script vocals_reset_mics 0x5a235781 [	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$on_screen$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i endfunction]Script vocals_get_num_mics 0x44b7ec7c [	:i $num_mics$ = %i(0)	:i $index$ = %i(0)	:i while 	:i if $IsMicrophonePluggedIn$$number$ = %GLOBAL%$index$		:i $num_mics$ = (%GLOBAL%$num_mics$ + %i(1))	:i endif	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i return $num_mics$ = %GLOBAL%$num_mics$	:i endfunction]Script vocals_distribute_mics 0x4882b88b [	${		StructInt only_preferences = 0		StructInt invalidate_bogus_mics = 1	}$		:i $change$${StructInt vocal_mic_invalid_dist = 0}$	:i $distribution_changed$ = $false$	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i if NOT $vocals_player_has_mic$$player$ = %GLOBAL%$player$					:i if (%GLOBAL%$invalidate_bogus_mics$ = %i(1))						:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$					:i endif				:i endif				:i if (~$game_type$ = $freeplay$)					:i if $playerinfoequals$%GLOBAL%$player$$freeplay_state$ = $dropped$						:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$					:i endif				:i elseif NOT $vocals_preference_match$$player$ = %GLOBAL%$player$					:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$				:i endif			:i else 			:i endif		:i else 			:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i $vocals_get_num_vocalists_onscreen$	:i $vocals_get_num_mics$	:i %GLOBAL%$mic_types$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $total_assigned$ = %i(0)	:i $total_assigned_mics$ = %i(0)	:i $total_assigned_headsets$ = %i(0)	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i if NOT $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$					:i if NOT $playerinfoequals$%GLOBAL%$player$$mic_type$ = $headset$						:i $total_assigned_mics$ = (%GLOBAL%$total_assigned_mics$ + %i(1))					:i endif				:i endif			:i endif		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i $skip_freeplay_player$ = $false$		:i if (~$game_mode$ = $freeplay$)			:i if $playerinfoequals$%GLOBAL%$player$$freeplay_state$ = $dropped$				:i $skip_freeplay_player$ = $true$			:i endif		:i endif		:i if NOT $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)			:i $skip_freeplay_player$ = $true$		:i endif		:i if (%GLOBAL%$skip_freeplay_player$ = $false$)			:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$				:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$					:i $getplayerinfo$%GLOBAL%$player$$mic_preference$					:i if (%GLOBAL%$mic_preference$ = $mic$)						:i if (%GLOBAL%$total_assigned_mics$ < %GLOBAL%$num_mics$)							:i $vocals_safely_assign_mic$$player$ = %GLOBAL%$player$$mic_type$ = $any_mic$							:i $total_assigned_mics$ = (%GLOBAL%$total_assigned_mics$ + %i(1))							:i $distribution_changed$ = $true$						:i endif					:i elseif (%GLOBAL%$mic_preference$ = $headset$)						:i $vocals_safely_assign_mic$$player$ = %GLOBAL%$player$$mic_type$ = $headset$						:i $distribution_changed$ = $true$					:i endif				:i endif			:i endif		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$		:i if (%GLOBAL%$only_preferences$ = %i(0))			:i if (%GLOBAL%$total_assigned_mics$ < %GLOBAL%$num_mics$)				:i $GetFirstPlayer$${StructQBKey on_screen}$				:i while 				:i $skip_freeplay_player$ = $false$				:i if (~$game_mode$ = $freeplay$)					:i if $playerinfoequals$%GLOBAL%$player$$freeplay_state$ = $dropped$						:i $skip_freeplay_player$ = $true$					:i endif				:i endif				:i if NOT $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)					:i $skip_freeplay_player$ = $true$				:i endif				:i if (%GLOBAL%$skip_freeplay_player$ = $false$)					:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$						:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$							:i $getplayerinfo$%GLOBAL%$player$$controller$							:i if NOT $controller_has_headset$$controller$ = %GLOBAL%$controller$								:i if (%GLOBAL%$total_assigned_mics$ < %GLOBAL%$num_mics$)									:i $vocals_safely_assign_mic$$player$ = %GLOBAL%$player$$mic_type$ = $any_mic$									:i $total_assigned_mics$ = (%GLOBAL%$total_assigned_mics$ + %i(1))									:i $distribution_changed$ = $true$								:i endif							:i endif						:i endif					:i endif				:i endif				:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$				:i loop_to %GLOBAL%$num_players_shown$			:i endif			:i $GetFirstPlayer$${StructQBKey on_screen}$			:i while 			:i $skip_freeplay_player$ = $false$			:i if (~$game_mode$ = $freeplay$)				:i if $playerinfoequals$%GLOBAL%$player$$freeplay_state$ = $dropped$					:i $skip_freeplay_player$ = $true$				:i endif			:i endif			:i if NOT $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i $skip_freeplay_player$ = $true$			:i endif			:i if (%GLOBAL%$skip_freeplay_player$ = $false$)				:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$					:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$						:i if (%GLOBAL%$total_assigned_mics$ < %GLOBAL%$num_mics$)							:i $vocals_safely_assign_mic$$player$ = %GLOBAL%$player$$mic_type$ = $any_mic$							:i %GLOBAL%$total_assigned_mics$ = (%GLOBAL%$total_assigned_mics$ + %i(1))							:i $distribution_changed$ = $true$						:i elseif $GotParam$${StructQBKey allow_default_headset}$							:i $vocals_safely_assign_mic$$player$ = %GLOBAL%$player$$mic_type$ = $headset$							:i $total_assigned_headsets$ = (%GLOBAL%$total_assigned_headsets$ + %i(1))						:i endif					:i endif				:i endif			:i endif			:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$			:i loop_to %GLOBAL%$num_players_shown$		:i endif	:i endif	:i if $vocals_mic_distribution_is_valid$		:i return $true$$distribution_changed$ = %GLOBAL%$distribution_changed$	:i else 		:i return $false$$distribution_changed$ = %GLOBAL%$distribution_changed$	:i endif	:i endfunction]Script vocals_preference_match 0x10b8e8d5 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i $getplayerinfo$%GLOBAL%$player$$mic_preference$	:i $getplayerinfo$%GLOBAL%$player$$mic_type$	:i if (%GLOBAL%$mic_type$ = $headset$)		:i if (%GLOBAL%$mic_preference$ = $headset$)			:i return ${StructQBKey true}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $None$)		:i return ${StructQBKey false}$	:i elseif (%GLOBAL%$mic_preference$ = $mic$)		:i return ${StructQBKey true}$	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script vocals_mic_distribution_is_valid 0x643d4c43 [	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i if NOT $vocals_player_has_mic$$player$ = %GLOBAL%$player$					:i return $false$$invalid_mic_player$ = %GLOBAL%$player$				:i endif			:i else 				:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$					:i return $false$$invalid_mic_player$ = %GLOBAL%$player$				:i endif			:i endif		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script is_mic_plugged_in b8ab931d [	${Unknown [0001260056a43111696969690000001800012400b30d99656969696900000000]}$	:i switch %GLOBAL%$mic_type$		:i case $headset$			:i if NOT $controller_has_headset$$controller$ = %GLOBAL%$controller$				:i return ${StructQBKey false}$			:i endif			:i endcase		case $mic0$			:i if NOT $IsMicrophonePluggedIn$${StructInt number = 0}$				:i return ${StructQBKey false}$			:i endif			:i endcase		case $mic1$			:i if NOT $IsMicrophonePluggedIn$${StructInt number = 1}$				:i return ${StructQBKey false}$			:i endif			:i endcase		case $mic2$			:i if NOT $IsMicrophonePluggedIn$${StructInt number = 2}$				:i return ${StructQBKey false}$			:i endif			:i endcase		case $mic3$			:i if NOT $IsMicrophonePluggedIn$${StructInt number = 3}$				:i return ${StructQBKey false}$			:i endif			:i endcase		case $any_mic$			:i return ${StructQBKey false}$			:i endcase		default 			:i return ${StructQBKey false}$	:i end_switch	:i return ${StructQBKey true}$	:i endfunction]Script vocals_safely_assign_mic 0x6d9db9a4 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player				mic_type			]		}		StructQBKey all	}$		:i $printf$$channel$ = $Vocals$^[af7ba393]^$a$ = %GLOBAL%$player$$b$ = %GLOBAL%$mic_type$	:i $getplayerinfo$%GLOBAL%$player$$controller$	:i %GLOBAL%$is_valid_assignment$ = %i(1)	:i if $playerinfoequals$%GLOBAL%$player$$bot_play$ = %i(1)		:i %GLOBAL%$is_valid_assignment$ = %i(0)	:i endif	:i $this_player$ = %GLOBAL%$player$	:i if (%GLOBAL%$mic_type$ = $any_mic$)		:i $mics$ = :a{$mic0$$mic1$$mic2$$mic3$:a}		:i $GetNumPlayersInGame$${StructQBKey on_screen}$		:i $index$ = %i(0)		:i while 		:i $mic$ = (%GLOBAL%$mics$:a{%GLOBAL%$index$:a})		:i if $is_mic_plugged_in$:s{				:i $mic_type$ = %GLOBAL%$mic$				:i $controller$ = %GLOBAL%$controller$			:i :s}			:i $GetFirstPlayer$${StructQBKey on_screen}$			:i $mic_used$ = $false$			:i while 			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = %GLOBAL%$mic$					:i if (%GLOBAL%$player$ = %GLOBAL%$this_player$)						:i $mic_type$ = %GLOBAL%$mic$						:i continue					:i else 						:i $mic_used$ = $true$						:i continue					:i endif				:i endif			:i endif			:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$			:i loop_to %GLOBAL%$num_players_shown$			:i if (%GLOBAL%$mic_used$ = $false$)				:i $mic_type$ = %GLOBAL%$mic$				:i continue			:i endif		:i endif		:i $index$ = (%GLOBAL%$index$ + %i(1))		:i loop_to %i(4)	:i endif	:i if $is_mic_plugged_in$:s{			:i $mic_type$ = %GLOBAL%$mic_type$			:i $controller$ = %GLOBAL%$controller$		:i :s}		:i $SetPlayerInfo$%GLOBAL%$this_player$$mic_type$ = %GLOBAL%$mic_type$		:i $printf$$channel$ = $Vocals$^[65af0376]^$a$ = %GLOBAL%$this_player$$b$ = %GLOBAL%$mic_type$	:i else 		:i $SetPlayerInfo$%GLOBAL%$this_player$$mic_type$ = $None$		:i $printf$$channel$ = $Vocals$^[c28a5343]^$a$ = %GLOBAL%$this_player$	:i endif	:i endfunction]Script vocals_player_has_mic d33e8e5a [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i if NOT $GotParam$${StructQBKey dont_check_part}$		:i if NOT $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $softassert$%s("Player %p is not playing vocals")$p$ = %GLOBAL%$player$			:i return ${StructQBKey false}$		:i endif	:i endif	:i if $playerinfoequals$%GLOBAL%$player$$bot_play$ = %i(1)		:i return ${StructQBKey true}$	:i endif	:i $getplayerinfo$%GLOBAL%$player$$mic_type$	:i if (%GLOBAL%$mic_type$ = $headset$)		:i $getplayerinfo$%GLOBAL%$player$$controller$		:i if NOT $controller_has_headset$$controller$ = %GLOBAL%$controller$			:i return ${StructQBKey false}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $mic0$)		:i if NOT $IsMicrophonePluggedIn$${StructInt number = 0}$			:i return ${StructQBKey false}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $mic1$)		:i if NOT $IsMicrophonePluggedIn$${StructInt number = 1}$			:i return ${StructQBKey false}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $mic2$)		:i if NOT $IsMicrophonePluggedIn$${StructInt number = 2}$			:i return ${StructQBKey false}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $mic3$)		:i if NOT $IsMicrophonePluggedIn$${StructInt number = 3}$			:i return ${StructQBKey false}$		:i endif	:i elseif (%GLOBAL%$mic_type$ = $None$)		:i return ${StructQBKey false}$	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script vocals_get_num_vocalists_on_same_highway 0x8decd449 [	:i $this_player$ = %GLOBAL%$player$	:i $Vocals_GetActiveHighway$$player$ = %GLOBAL%$player$	:i $this_highway$ = %GLOBAL%$active_highway$	:i %GLOBAL%$num_vocalists$ = %i(0)	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $Vocals_GetActiveHighway$$player$ = %GLOBAL%$player$			:i if (%GLOBAL%$active_highway$ = %GLOBAL%$this_highway$)				:i %GLOBAL%$num_vocalists$ = (%GLOBAL%$num_vocalists$ + %i(1))			:i endif		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$on_screen$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i return $num_vocalists_on_highway$ = %GLOBAL%$num_vocalists$	:i endfunction]Script vocals_get_num_vocalists 0x75c1c58e [	:i %GLOBAL%$num_vocalists$ = %i(0)	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(0))		:i $GetFirstPlayer$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i %GLOBAL%$num_vocalists$ = (%GLOBAL%$num_vocalists$ + %i(1))		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players$	:i endif	:i return $num_vocalists$ = %GLOBAL%$num_vocalists$	:i endfunction]Script vocals_get_num_vocalists_onscreen 0x0b81681f [	:i %GLOBAL%$num_vocalists_shown$ = %i(0)	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i %GLOBAL%$num_vocalists_shown$ = (%GLOBAL%$num_vocalists_shown$ + %i(1))		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i return $num_vocalists_shown$ = %GLOBAL%$num_vocalists_shown$	:i endfunction]Script get_num_non_vocals_players_onscreen bf3d66c2 [	:i if (~$musicstudio_jamroom_highways$ !== %i(0))		:i return ${StructQBString num_non_vocals_players = musicstudio_jamroom_highways}$	:i endif	:i $vocals_get_num_vocalists_onscreen$	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i return $num_non_vocals_players$ = (%GLOBAL%$num_players_shown$ - %GLOBAL%$num_vocalists_shown$)	:i endfunction]Script vocals_activate_starpower a1719ae7 [	:i $gamemode_gettype$	:i if (%GLOBAL%$type$ !== $practice$)		:i $spawnscriptnow$$star_power_activate_and_drain$$params$ = :s{$player$ = %GLOBAL%$player$:s}	:i endif	:i endfunction]Script vocals_mute_all_mics d14a07e6 [	${StructQBKey mute = true}$	:i if (~$g_in_tutorial$ = %i(1))		:i if (~$vocal_tut_mute$ = %i(1))			:i $mute$ = $true$		:i endif	:i endif	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $printscriptinfo$$channel$ = $sfx$%s("Vocals player %p mute=%m")$p$ = %GLOBAL%$player$$m$ = %GLOBAL%$mute$			:i $spawnscriptnow$$audio_gameplay_vocal_sidechain_logic$$params$ = :s{$player$ = %GLOBAL%$player$$muting$ = %GLOBAL%$mute$:s}			:i $Vocals_MuteOutput$$player$ = %GLOBAL%$player$$mute$ = %GLOBAL%$mute$		:i endif		:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i endfunction]Script vocals_ingame_change_mic_volume c8e0d54f [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				change				player			]		}		StructQBKey all	}$		:i if (~$in_sing_a_long$ = $true$)		:i $printf$${			StructQBKey channel = sfx			StructString 0x00000000 = "vocals_ingame_change_mic_volume - changing mic volume is not allowed in sing-along"		}$				:i return 	:i endif	:i $gamemode_gettype$	:i if (%GLOBAL%$type$ = $freeplay$)		:i $getplayerinfo$%GLOBAL%$player$$freeplay_mic_volume$		:i $mic_volume$ = %GLOBAL%$freeplay_mic_volume$		:i $ChangeSpinalTapVolume$$spinal_tap_volume$ = %GLOBAL%$mic_volume$$change$ = %GLOBAL%$change$		:i $SetPlayerInfo$%GLOBAL%$player$$freeplay_mic_volume$ = %GLOBAL%$volume$	:i else 		:i $get_savegame_from_player$$player$ = %GLOBAL%$player$		:i $GetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$param$ = $volumes$		:i $mic_volume$ = (%GLOBAL%$volumes$->$guitar$->$mic$->$vol$)		:i $ChangeSpinalTapVolume$$spinal_tap_volume$ = %GLOBAL%$mic_volume$$change$ = %GLOBAL%$change$		:i $mic_struct$ = :s{(%GLOBAL%$volumes$->$guitar$->$mic$)$vol$ = %GLOBAL%$volume$:s}		:i $dummy_struct$ = :s{(%GLOBAL%$volumes$->$guitar$)$mic$ = %GLOBAL%$mic_struct$:s}		:i $volumes$ = :s{%GLOBAL%$volumes$$guitar$ = %GLOBAL%$dummy_struct$:s}		:i $gamemode_gettype$		:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$volumes$ = %GLOBAL%$volumes$:s}	:i endif	:i if (%GLOBAL%$mic_volume$ = %GLOBAL%$volume$)		:i return 	:i endif	:i $printf$$channel$ = $sfx$%s("vocals_ingame_change_mic_volume - player %p setting volume %d")$p$ = %GLOBAL%$player$$d$ = %GLOBAL%$volume$	:i $ui_options_audio_update_mic_volume$$player$ = %GLOBAL%$player$$vol$ = %GLOBAL%$volume$	:i if (%GLOBAL%$change$ > %i(0))		:i %GLOBAL%$rgba$ = :a{%i(96)%i(240)%i(96)%i(255):a}	:i else 		:i %GLOBAL%$rgba$ = :a{%i(240)%i(96)%i(96)%i(255):a}	:i endif	:i $FormatText$$textname$ = $text$^[feedb846]^$d$ = %GLOBAL%$volume$	:i $vocals_message$:s{		:i $player$ = %GLOBAL%$player$		:i $text$ = %GLOBAL%$text$		:i $rgba$ = %GLOBAL%$rgba$	:i :s}	:i endfunction]Script vocals_controller_uses_headset_for_singing ab7a35d3 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				controller			]		}		StructQBKey all	}$		:i $get_local_in_game_player_num_from_controller$$controller_index$ = %GLOBAL%$controller$	:i if (%GLOBAL%$player_num$ = %i(4294967295))		:i return ${StructQBKey false}$	:i endif	:i $getplayerinfo$%GLOBAL%$player_num$$part$	:i if (%GLOBAL%$part$ !== $Vocals$)		:i return ${StructQBKey false}$	:i endif	:i $getplayerinfo$%GLOBAL%$player_num$$mic_type$	:i if (%GLOBAL%$mic_type$ !== $headset$)		:i return ${StructQBKey false}$	:i endif	:i if (~$playing_song$ = %i(0))		:i return ${StructQBKey false}$	:i endif	:i $ui_event_get_top$	:i if (%GLOBAL%$base_name$ !== %s("gameplay"))		:i return ${StructQBKey false}$	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script vocals_get_lag_calibration 0x886dc793 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i %GLOBAL%$mic_input_lag$ = %i(0)	:i if $Vocals_GetMicType$$player$ = %GLOBAL%$player$		:i if NOT (%GLOBAL%$specific_mic_type$ = $invalid$)			:i $mic_input_lag$ = (~$vocal_mic_type_props$->%GLOBAL%$specific_mic_type$->$input_lag_ms$)		:i endif	:i endif	:i %GLOBAL%$gem_offset$ = (~$time_gem_offset$)	:i $printf$$channel$ = $Vocals$^[5817322d]^$a$ = (~$time_input_offset$)$b$ = (~$vocal_pitch_detection_lag$)$c$ = %GLOBAL%$mic_input_lag$	:i %GLOBAL%$input_offset$ = (~$time_input_offset$ - ~$vocal_pitch_detection_lag$ - %GLOBAL%$mic_input_lag$)	:i $get_lag_values$	:i %GLOBAL%$input_offset$ = (%GLOBAL%$input_offset$ - %GLOBAL%$audio_offset$)	:i %GLOBAL%$gem_offset$ = (%GLOBAL%$gem_offset$ - %GLOBAL%$audio_offset$)	:i %GLOBAL%$gem_offset$ = (%GLOBAL%$gem_offset$ - %GLOBAL%$video_offset$)	:i $change$$time_drum_midi_offset_with_lag$ = (~$time_drum_midi_offset$ + %GLOBAL%$audio_offset$ + %GLOBAL%$video_offset$)	:i $change$$time_gem_offset_with_lag$ = (~$time_gem_offset$ + %GLOBAL%$audio_offset$ + %GLOBAL%$video_offset$)	:i $printf$$channel$ = $Vocals$%s("Vocals: Visual lag %v ms, Input lag %i ms, mic type: %m")$v$ = %GLOBAL%$gem_offset$$i$ = %GLOBAL%$input_offset$$m$ = %GLOBAL%$specific_mic_type$	:i return $gem_offset$ = %GLOBAL%$gem_offset$$input_offset$ = %GLOBAL%$input_offset$	:i endfunction]Script vocals_hide_player 0x10e6636d [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i $VocalsHighway_GetId$$player$ = %GLOBAL%$player$	:i $safe_hide$$id$ = %GLOBAL%$vocals_highway_id$	:i $SetPlayerInfo$%GLOBAL%$player$$interactive$ = %i(0)	:i endfunction]Script vocals_unhide_player cbc859f6 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i $SetPlayerInfo$%GLOBAL%$player$$interactive$ = %i(1)	:i $VocalsHighway_GetId$$player$ = %GLOBAL%$player$	:i $safe_show$$id$ = %GLOBAL%$vocals_highway_id$	:i endfunction]Script vocals_score_percent_to_text 0x1dd00b1b [	:i $vocals_score_text$ = ^[72675d42]^	:i %GLOBAL%$percent$ = (%GLOBAL%$percent$ / %f(100.0))	:i $GetArraySize$(~$vocal_phrase_qualities$)	:i $i$ = %i(0)	:i while 	:i if (%GLOBAL%$percent$ >= (~$vocal_phrase_qualities$:a{%GLOBAL%$i$:a}->$song_value$))		:i $vocals_score_text$ = (~$vocal_phrase_qualities$:a{%GLOBAL%$i$:a}->$text$)		:i $vocals_score_rgba$ = (~$vocal_phrase_qualities$:a{%GLOBAL%$i$:a}->$rgba$)	:i endif	:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))	:i loop_to %GLOBAL%$array_size$	:i return :s{		:i $vocals_score_text$ = %GLOBAL%$vocals_score_text$		:i $vocals_score_rgba$ = %GLOBAL%$vocals_score_rgba$	:i :s}	:i endfunction]Script vocals_deinit_all_mics 0x7ceaef9d [	:i $index$ = %i(0)	:i while 	:i $Vocals_DeinitMic$$controller$ = %GLOBAL%$index$	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i endfunction]Script vocals_reinit_mics 0x7885b799 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				noise_gate			]		}		StructQBKey all	}$		:i $vocals_deinit_all_mics$	:i $vocals_init_assigned_mics$$noise_gate$ = %GLOBAL%$noise_gate$	:i endfunction]Script vocals_init_assigned_mics 0x9fa2047b [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				noise_gate			]		}		StructQBKey all	}$		:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if (%GLOBAL%$num_players_shown$ > %i(0))		:i $GetFirstPlayer$${StructQBKey on_screen}$		:i while 		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)				:i $vocals_init_mic$$player$ = %GLOBAL%$player$$noise_gate$ = %GLOBAL%$noise_gate$			:i endif		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$on_screen$		:i loop_to %GLOBAL%$num_players_shown$	:i endif	:i endfunction]Script vocals_init_mic defe5d66 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				noise_gate				player			]		}		StructQBKey all	}$		:i $getplayerinfo$%GLOBAL%$player$$controller$	:i $getplayerinfo$%GLOBAL%$player$$mic_type$	:i if NOT (%GLOBAL%$mic_type$ = $None$)		:i if NOT (%GLOBAL%$mic_type$ = $headset$)			:i $Vocals_InitMic$$controller$ = %GLOBAL%$controller$$mic_type$ = %GLOBAL%$mic_type$$noise_gate$ = %GLOBAL%$noise_gate$			:i $ui_options_audio_update_mic_volume$$player$ = %GLOBAL%$player$		:i endif	:i endif	:i endfunction]Script vocals_get_highway_type_text 0x562114a8 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				highway_type			]		}		StructQBKey all	}$		:i $text$ = ^[00000000]^	:i switch %GLOBAL%$highway_type$		:i case $scrolling$			:i $text$ = ^[737839f5]^			:i endcase		case $static$			:i $text$ = ^[305014bd]^			:i endcase		case $karaoke$			:i $text$ = ^[ecc0f978]^			:i endcase		default 			:i $softassert$^[9b46dedf]^$a$ = %GLOBAL%$highway_type$	:i end_switch	:i return $highway_type_text$ = %GLOBAL%$text$	:i endfunction]Script vocals_safely_set_highway_view 0x2303b1b1 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				highway_type				player			]		}		StructQBKey all	}$		:i $this_player$ = %GLOBAL%$player$	:i $getplayerinfo$%GLOBAL%$player$$part$	:i if (%GLOBAL%$part$ = $Vocals$)		:i $getplayerinfo$$player$ = %GLOBAL%$player$$controller$		:i $get_progression_instrument_user_option$$part$ = $Vocals$$controller$ = %GLOBAL%$controller$$option$ = %s("highway_view")		:i if (%GLOBAL%$highway_type$ !== %GLOBAL%$user_option$)			:i $save_progression_instrument_user_option$$part$ = $Vocals$$controller$ = %GLOBAL%$controller$$option$ = %s("highway_view")$new_value$ = %GLOBAL%$highway_type$		:i endif	:i endif	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i $GetFirstPlayer$	:i while 	:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$		:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)			:i $SetPlayerInfo$%GLOBAL%$player$$vocals_highway_view$ = %GLOBAL%$highway_type$			:i $printf$$channel$ = $Vocals$^[b0c9dca1]^$a$ = %GLOBAL%$player$$b$ = %GLOBAL%$highway_type$		:i endif	:i endif	:i $GetNextPlayer$$player$ = %GLOBAL%$player$$on_screen$	:i loop_to %GLOBAL%$num_players_shown$	:i endfunction]Script vocals_debug_print_all_mic_types f53ccfe2 [	:i $index$ = %i(1)	:i $printf$${		StructQBKey channel = Vocals		StructQBStringQs 0x4dc9a289	}$		:i while 	:i $getplayerinfo$%GLOBAL%$index$$mic_type$	:i $printf$$channel$ = $Vocals$^[c76dc81e]^$a$ = %GLOBAL%$index$$b$ = %GLOBAL%$mic_type$	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i $index$ = %i(1)	:i $printf$${		StructQBKey channel = Vocals		StructQBStringQs d5085d58	}$		:i while 	:i $getplayerinfo$%GLOBAL%$index$$mic_preference$	:i $printf$$channel$ = $Vocals$^[41859766]^$a$ = %GLOBAL%$index$$b$ = %GLOBAL%$mic_preference$	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i endfunction]Script vocals_debug_print_all_headsets 0x23bb5de8 [	:i $index$ = %i(1)	:i $printf$${		StructQBKey channel = Vocals		StructQBStringQs aae4b629	}$		:i while 	:i $getplayerinfo$%GLOBAL%$index$$controller$	:i if $controller_has_headset$$controller$ = %GLOBAL%$controller$		:i $printf$$channel$ = $Vocals$^[2f379803]^$a$ = %GLOBAL%$index$$b$ = %GLOBAL%$controller$	:i else 		:i $printf$$channel$ = $Vocals$^[b2f398c0]^$a$ = %GLOBAL%$index$$b$ = %GLOBAL%$controller$	:i endif	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i endfunction]Script vocal_freeform_debug_update_points_spawned e84c0ffd [	:i $wait$${		StructInt 5		StructQBKey seconds	}$		:i $Die$	:i endfunction]Script vocals_freeform_Debug_update_message b7132d7c [	:i if $ScreenElementExists$${StructQBKey id = vocals_freeform_debug_message}$		:i $DestroyScreenElement$${StructQBKey id = vocals_freeform_debug_message}$	:i endif	:i $CreateScreenElement$:s{		:i $id$ = $vocals_freeform_debug_message$		:i $parent$ = $root_window$		:i $type$ = $TextElement$		:i $dims$ = %vec2(300.0,50.0)		:i $just$ = :a{$left$$center$:a}		:i $Pos$ = %vec2(600.0,300.0)		:i $rgba$ = :a{%i(255)%i(255)%i(255)%i(255):a}		:i $font$ = $debug$		:i $text$ = %GLOBAL%$message$	:i :s}	:i $vocals_freeform_debug_message$.$obj_spawnscript$${StructQBKey vocal_freeform_debug_update_points_spawned}$	:i endfunction]Script vocal_freeform_debug_update_points daaacc9e [	:i if $ScreenElementExists$${StructQBKey id = vocals_freeform_debug_text}$		:i $DestroyScreenElement$${StructQBKey id = vocals_freeform_debug_text}$	:i endif	:i $FormatText$$textname$ = $debug_text$^[2b985c34]^$a$ = %GLOBAL%$Score$	:i $CreateScreenElement$:s{		:i $id$ = $vocals_freeform_debug_text$		:i $parent$ = $root_window$		:i $type$ = $TextElement$		:i $dims$ = %vec2(300.0,50.0)		:i $just$ = :a{$left$$center$:a}		:i $Pos$ = %vec2(300.0,300.0)		:i $rgba$ = :a{%i(255)%i(255)%i(255)%i(255):a}		:i $font$ = $debug$		:i $text$ = %GLOBAL%$debug_text$	:i :s}	:i $vocals_freeform_debug_text$.$obj_spawnscript$${StructQBKey vocal_freeform_debug_update_points_spawned}$	:i endfunction]