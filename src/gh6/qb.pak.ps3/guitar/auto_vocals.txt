Unknown [1c000000000000000000222c0000000000000000]SectionInteger g_reset_brow_inflect 0SectionFloat g_av_brow_inflect_current_distance 0.00000SectionFloat g_av_brow_inflect_current_syllable_length 0.00000SectionInteger AutoVocalTest 1SectionInteger Number_vocalists_Created 4SectionFloat Vocals_offset 150.000SectionInteger Test_Vocal_Culling 1SectionInteger Test_Vocal_Side_By_Side 0SectionInteger vocal_note 0SectionFloat AV_Pitch_Volume 1.00000SectionQBKey g_jaw_flap_busy falseSectionInteger g_current_jawflap_queue 0SectionFloat g_pitch_quiver 1.00000SectionInteger AV_Brow_priority 0SectionFloat AV_Face_Idle_Distance 750.000SectionFloat AV_Brow_Inflect_Distance 400.000SectionFloat AV_Brow_Relax_Distance 700.000SectionFloat AV_Brow_Mod_amp 0.200000SectionFloat AV_Brow_Mod_base 0.00000SectionFloat AV_Brow_Mod_freq 1.20000SectionFloat AV_Brow_Emot_amp 0.200000SectionFloat AV_Brow_Emot_base 0.500000SectionFloat AV_Brow_Emot_freq 0.500000SectionFloat AV_Brow_Scrub_amp 0.200000SectionFloat AV_Brow_Scrub_base 0.500000SectionFloat AV_Brow_Scrub_freq 0.200000SectionInteger max_Phon_Branches 6SectionFloat Phon_Min_Blend_Duration 0.00000SectionFloat Phon_face_Noise 0.500000SectionFloat phon_Average_Frame 16.6677SectionFloat Phon_longest_Init 750.000SectionFloat Phon_Shortest_Init 300.000SectionFloat Phon_init_point 0.150000SectionFloat Phon_Out_Point 0.870000SectionFloat phon_Sweet_Start 0.420000SectionFloat phon_Sweet_End 0.580000SectionFloat fastest_phon 530.000SectionFloat neutral_phon 1100.00Script autovocal_controlscript da0ddb7b [	${		StructInt stagger_Branch = 0		StructQBKey newword = true		StructFloat word = 1.00		StructInt sentance = 5		StructFloat wordlength = 100.00		StructInt randomphon = 0	}$		:i $AV_Global_Array_Index$ = %i(0)	:i $vocalist_Ids$ = :a{:a}	:i $num_vocalists$ = %i(0)	:i if NOT $check_for_vocalists$		:i return 	:i endif	:i $AutoVocal_PhonemesSupported$	:i if (%GLOBAL%$phonemes_supported$ = %i(0))		:i return 	:i endif	:i if (~$Test_Vocal_Side_By_Side$ = %i(1))		:i $vocalist_Ids$ = :a{$musician3$:a}		:i $num_vocalists$ = %i(1)	:i endif	:i $fastspawnscriptnow$$script_name$ = $av_pitch_control$$params$ = :s{$vocalist_Ids$ = %GLOBAL%$vocalist_Ids$$num_vocalists$ = %GLOBAL%$num_vocalists$:s}	:i $fastspawnscriptnow$$script_name$ = $AV_Set_Brow$$params$ = :s{$vocalist_Ids$ = %GLOBAL%$vocalist_Ids$$num_vocalists$ = %GLOBAL%$num_vocalists$:s}	:i $channel$ = :a{:a}	:i $AV_Vocal_Cycle$ = :a{:a}	:i $Phon_branch$ = :a{:a}	:i $waittime$ = :a{:a}	:i $Length$ = :a{:a}	:i $Init_Length$ = :a{:a}	:i $blend_duration$ = :a{:a}	:i $trans_trigger$ = :a{:a}	:i $first_pass$ = :a{:a}	:i $OldAnimStep$ = :a{:a}	:i $Anim_End$ = :a{:a}	:i $Extended_Checksum$ = $somechecksum$	:i $cycle_branch$ = %i(0)	:i while 	:i $channel_maker$ = (%GLOBAL%$cycle_branch$ + %i(1))	:i $extendcrcwithinteger$$checksum$ = $Vocal_AV_$$integer$ = %GLOBAL%$channel_maker$	:i $addchecksumarrayelement$$array$ = %GLOBAL%$channel$$element$ = %GLOBAL%$Extended_Checksum$	:i $channel$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$AV_Vocal_Cycle$$element$ = %f(0.0)	:i $AV_Vocal_Cycle$ = %GLOBAL%$array$	:i $addchecksumarrayelement$$array$ = %GLOBAL%$Phon_branch$$element$ = $inactive$	:i $Phon_branch$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$waittime$$element$ = %f(0.0)	:i $waittime$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$Length$$element$ = %f(0.0)	:i $Length$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$Init_Length$$element$ = %f(0.0)	:i $Init_Length$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$blend_duration$$element$ = %f(0.0)	:i $blend_duration$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$trans_trigger$$element$ = %f(0.0)	:i $trans_trigger$ = %GLOBAL%$array$	:i $addchecksumarrayelement$$array$ = %GLOBAL%$first_pass$$element$ = $false$	:i $first_pass$ = %GLOBAL%$array$	:i $AddFloatArrayElement$$array$ = %GLOBAL%$OldAnimStep$$element$ = %f(0.0)	:i $OldAnimStep$ = %GLOBAL%$array$	:i $addchecksumarrayelement$$array$ = %GLOBAL%$Anim_End$$element$ = $untriggered$	:i $Anim_End$ = %GLOBAL%$array$	:i $cycle_branch$ = (%GLOBAL%$cycle_branch$ + %i(1))	:i loop_to (~$max_Phon_Branches$)	:i $Next_Phon_Length$ = %f(0.0)	:i $Next_Phon_Distance$ = %f(0.0)	:i $Next_Next_Phon_Distance$ = %f(0.0)	:i $Next_Phon_Time$ = %f(0.0)	:i $Next_Blend_Duration$ = %f(0.1000000)	:i $current_Phon_Time$ = %f(0.0)	:i $current_Phon_Length$ = %f(0.0)	:i $requested_jawflap_queue$ = %i(0)	:i $ChangeGlobalFloat$${		StructQBKey global_name = AV_Pitch_Volume		StructFloat new_value = 1.00	}$		:i $changeglobalchecksum$${		StructQBKey global_name = g_jaw_flap_busy		StructQBKey new_value = false	}$		:i $ChangeGlobalInteger$${		StructQBKey global_name = g_current_jawflap_queue		StructInt new_value = 0	}$		:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$anim_command$$target$ = $autovocals_switch$$command$ = $partialswitch_setstate$$params$ = :s{$on$$blendduration$ = %f(0.0):s}	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$anim_command$$target$ = $autovocals_Mouth_Idle$$command$ = $partialswitch_setstate$$params$ = :s{$Off$$blendduration$ = %f(0.0):s}	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{		:i $AV_Pitch_Volume$ = %f(0.0)	:i :s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i while 	:i $getsongtimems$${StructQBString time_offset = Vocals_offset}$	:i if (%GLOBAL%$time$ >= %f(0.0))		:i continue	:i endif	:i $WaitOneGameFrame$	:i loop_to 	:i $AutoVocal_Iterator$:s{		:i $index$ = %GLOBAL%$AV_Global_Array_Index$		:i $Last_Phon_Time$ = %f(0.0)		:i $Last_Phon_Length$ = %f(0.0)	:i :s}	:i %GLOBAL%$AV_Global_Array_Index$ = %GLOBAL%$next_index$	:i $obtain_anims_from_phon$$Phon$ = %GLOBAL%$Next_Phon$	:i $New_phon$ = $true$	:i $timestamp$ = %f(0.0)	:i $ChangeGlobalInteger$${		StructQBKey global_name = g_reset_brow_inflect		StructInt new_value = 0	}$		:i $fastspawnscriptnow$${		StructQBKey script_name = av_brow_inflect		StructStruct params		{			StructHeader {}		}	}$		:i while 	:i $frame_length$ = %f(0.0)	:i $getframelength$	:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))	:i if (%GLOBAL%$New_phon$ = $true$)		:i $ChangeGlobalInteger$$global_name$ = $vocal_note$$new_value$ = ((~$vocal_note$) + %i(1))		:i $getsongtimems$${StructQBString time_offset = Vocals_offset}$		:i $miss$ = ((%GLOBAL%$current_Phon_Time$ + %GLOBAL%$current_Phon_Length$) - %GLOBAL%$time$)		:i $length_X$ = (%GLOBAL%$Next_Phon_Length$)		:i $distance$ = (%GLOBAL%$Next_Phon_Distance$ + %GLOBAL%$miss$)		:i $real_Distance$ = %GLOBAL%$Next_Phon_Distance$		:i $Blend_Duration_X$ = %GLOBAL%$Next_Blend_Duration$		:i $Phoneme_X$ = %GLOBAL%$Next_Phon$		:i $current_Phon_Time$ = %GLOBAL%$Next_Phon_Time$		:i $current_Phon_Length$ = %GLOBAL%$Next_Phon_Length$		:i $Current_Phon_Distance$ = %GLOBAL%$Next_Phon_Distance$		:i $Current_Syllable_Length$ = %GLOBAL%$Next_Syllable_Length$		:i $Phon_anim_Closed$ = %GLOBAL%$Next_Phon_anim_Closed$		:i $Phon_anim_Open$ = %GLOBAL%$Next_Phon_anim_Open$		:i if (%GLOBAL%$distance$ > %f(750.0))			:i $fastspawnscriptnow$$script_name$ = $av_mouth_idle$$params$ = :s{$distance$ = %GLOBAL%$distance$$num_vocalists$ = %GLOBAL%$num_vocalists$$vocalist_Ids$ = %GLOBAL%$vocalist_Ids$:s}		:i endif		:i $phon_create_desired_init$$Length$ = %GLOBAL%$length_X$		:i if (%GLOBAL%$Desired_Init_Length$ > ~$Phon_longest_Init$)			:i $Desired_Init_Length$ = (~$Phon_longest_Init$)		:i endif		:i if (%GLOBAL%$distance$ > (%GLOBAL%$Desired_Init_Length$))			:i $init_length_X$ = (%GLOBAL%$Desired_Init_Length$)			:i $waittime_X$ = (%GLOBAL%$distance$ - %GLOBAL%$Desired_Init_Length$)			:i $start_x$ = %f(0.0)		:i else 			:i $init_length_X$ = (%GLOBAL%$distance$)			:i $start_x$ = ((~$phon_Sweet_Start$) - ((%GLOBAL%$distance$ / %GLOBAL%$Desired_Init_Length$) * (~$phon_Sweet_Start$)))			:i $waittime_X$ = %f(0.0)		:i endif		:i $AutoVocal_Iterator$:s{			:i $index$ = %GLOBAL%$AV_Global_Array_Index$			:i $Last_Phon_Time$ = %GLOBAL%$Next_Phon_Time$			:i $Last_Phon_Length$ = %GLOBAL%$Next_Phon_Length$		:i :s}		:i %GLOBAL%$AV_Global_Array_Index$ = %GLOBAL%$next_index$		:i $phon_solve_transits$:s{			:i $Current_Phon_Distance_Extra$ = (%GLOBAL%$miss$)			:i $current_Phon_Length$ = (%GLOBAL%$length_X$ + %GLOBAL%$real_Distance$)			:i $Next_Phon$ = %GLOBAL%$Next_Phon$			:i $Next_Phon_Distance$ = %GLOBAL%$Next_Phon_Distance$			:i $Next_Phon_Length$ = (%GLOBAL%$Next_Phon_Length$ + %GLOBAL%$Next_Next_Phon_Distance$)			:i $Current_Extra_Blend_Factor$ = %GLOBAL%$Next_Extra_Blend_Factor$		:i :s}		:i if (%GLOBAL%$Current_Syllable_Length$ > %f(0.0))			:i $fastspawnscriptnow$$script_name$ = $spawn_auto_vocal_jaw_flap$$params$ = :s{				:i $Current_Syllable_Length$ = %GLOBAL%$Current_Syllable_Length$				:i $distance$ = %GLOBAL%$distance$				:i $num_vocalists$ = %GLOBAL%$num_vocalists$				:i $vocalist_Ids$ = %GLOBAL%$vocalist_Ids$				:i $requested_jawflap_queue$ = %GLOBAL%$requested_jawflap_queue$			:i :s}			:i $ChangeGlobalFloat$$global_name$ = $g_av_brow_inflect_current_distance$$new_value$ = %GLOBAL%$distance$			:i $ChangeGlobalFloat$$global_name$ = $g_av_brow_inflect_current_syllable_length$$new_value$ = %GLOBAL%$Current_Syllable_Length$			:i $ChangeGlobalInteger$${				StructQBKey global_name = g_reset_brow_inflect				StructInt new_value = 1			}$						:i $requested_jawflap_queue$ = (%GLOBAL%$requested_jawflap_queue$ + %i(1))			:i $Current_Syllable_Length$ = %f(0.0)		:i endif		:i $SetChecksumArrayElement$$array$ = %GLOBAL%$Phon_branch$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = $active$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$AV_Vocal_Cycle$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$start_x$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$waittime$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$waittime_X$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$Length$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$length_X$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$Init_Length$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$init_length_X$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$blend_duration$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$Blend_Duration_X$		:i $SetChecksumArrayElement$$array$ = %GLOBAL%$Anim_End$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = $untriggered$		:i $SetFloatArrayElement$$array$ = %GLOBAL%$trans_trigger$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = %GLOBAL%$trans_trigger_X$		:i $SetChecksumArrayElement$$array$ = %GLOBAL%$first_pass$$index$ = %GLOBAL%$stagger_Branch$$new_value$ = $true$		:i $stagger_Branch$ = (%GLOBAL%$stagger_Branch$ + %i(1))		:i if (%GLOBAL%$stagger_Branch$ > (~$max_Phon_Branches$%i(4294967295)))			:i %GLOBAL%$stagger_Branch$ = %i(0)		:i endif		:i $getframelength$		:i $frame_length1$ = (%GLOBAL%$frame_length$ * %f(1000.0))		:i $WaitOneGameFrame$		:i $getframelength$		:i $frame_length$ = ((%GLOBAL%$frame_length$ * %f(1000.0)) + %GLOBAL%$frame_length1$)		:i $New_phon$ = $false$	:i endif	:i $cycle_branch$ = %i(0)	:i while 	:i if ((%GLOBAL%$Phon_branch$:a{%GLOBAL%$cycle_branch$:a}) = $active$)		:i if ((%GLOBAL%$waittime$:a{%GLOBAL%$cycle_branch$:a}) = %f(0.0))			:i if ((%GLOBAL%$first_pass$:a{%GLOBAL%$cycle_branch$:a}) = $true$)				:i $fastspawnscriptnow$$script_name$ = $phon_transit$$params$ = :s{					:i $blend_duration$ = (%GLOBAL%$blend_duration$:a{%GLOBAL%$cycle_branch$:a})					:i $Phon_anim_Open$ = %GLOBAL%$Phon_anim_Open$					:i $Phon_anim_Closed$ = %GLOBAL%$Phon_anim_Closed$					:i $cycle_branch$ = %GLOBAL%$cycle_branch$					:i $vocalist_Ids$ = %GLOBAL%$vocalist_Ids$					:i $num_vocalists$ = %GLOBAL%$num_vocalists$				:i :s}				:i $SetChecksumArrayElement$$array$ = %GLOBAL%$first_pass$$index$ = %GLOBAL%$cycle_branch$$new_value$ = $false$			:i endif			:i $phon_timer$:s{				:i $channel$ = (%GLOBAL%$channel$:a{%GLOBAL%$cycle_branch$:a})				:i $timer$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%GLOBAL%$cycle_branch$:a})				:i $Length$ = (%GLOBAL%$Length$:a{%GLOBAL%$cycle_branch$:a})				:i $OldAnimStep$ = (%GLOBAL%$OldAnimStep$:a{%GLOBAL%$cycle_branch$:a})				:i $Init_Length$ = (%GLOBAL%$Init_Length$:a{%GLOBAL%$cycle_branch$:a})				:i $Anim_End$ = (%GLOBAL%$Anim_End$:a{%GLOBAL%$cycle_branch$:a})				:i $trans_trigger$ = (%GLOBAL%$trans_trigger$:a{%GLOBAL%$cycle_branch$:a})				:i $frame_length$ = %GLOBAL%$frame_length$				:i $New_phon$ = %GLOBAL%$New_phon$			:i :s}			:i $SetFloatArrayElement$$array$ = %GLOBAL%$AV_Vocal_Cycle$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$timer$			:i $SetFloatArrayElement$$array$ = %GLOBAL%$Length$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$length_X$			:i $SetFloatArrayElement$$array$ = %GLOBAL%$OldAnimStep$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$OldAnimStep_X$			:i $SetFloatArrayElement$$array$ = %GLOBAL%$Init_Length$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$init_length_X$			:i $SetChecksumArrayElement$$array$ = %GLOBAL%$Anim_End$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$Anim_End_X$			:i if (%GLOBAL%$timer$ = %f(1.0))				:i $SetChecksumArrayElement$$array$ = %GLOBAL%$Phon_branch$$index$ = %GLOBAL%$cycle_branch$$new_value$ = $inactive$			:i endif		:i else 			:i %GLOBAL%$new_wait_time$ = ((%GLOBAL%$waittime$:a{%GLOBAL%$cycle_branch$:a}) - %GLOBAL%$frame_length$)			:i if (%GLOBAL%$new_wait_time$ < %f(0.0))				:i $SetFloatArrayElement$$array$ = %GLOBAL%$waittime$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %f(0.0)			:i else 				:i $SetFloatArrayElement$$array$ = %GLOBAL%$waittime$$index$ = %GLOBAL%$cycle_branch$$new_value$ = %GLOBAL%$new_wait_time$			:i endif		:i endif	:i endif	:i $cycle_branch$ = (%GLOBAL%$cycle_branch$ + %i(1))	:i loop_to ~$max_Phon_Branches$	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{		:i $AV_Vocal_Cycle_0$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(0):a})		:i $AV_Vocal_Cycle_1$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(1):a})		:i $AV_Vocal_Cycle_2$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(2):a})		:i $AV_Vocal_Cycle_3$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(3):a})		:i $AV_Vocal_Cycle_4$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(4):a})		:i $AV_Vocal_Cycle_5$ = (%GLOBAL%$AV_Vocal_Cycle$:a{%i(5):a})	:i :s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $WaitOneGameFrame$	:i $timestamp$ = (%GLOBAL%$timestamp$ + %GLOBAL%$frame_length$)	:i loop_to 	:i $trans_trigger_X$ = %f(0.0)	:i $OldAnimStep_X$ = %f(0.0)	:i $Anim_End_X$ = $untriggered$	:i $target$ = $musician1$	:i $timer$ = %f(0.0)	:i $Extended_Checksum$ = $meu$	:i $channel$ = :a{$vocal_Av_0$:a}	:i $AV_Vocal_Cycle$ = :a{%f(0.0):a}	:i $Phon_branch$ = :a{$active$:a}	:i $waittime$ = :a{%f(0.0):a}	:i $Length$ = :a{%f(0.0):a}	:i $Init_Length$ = :a{%f(0.0):a}	:i $blend_duration$ = :a{%f(0.0):a}	:i $trans_trigger$ = :a{%f(0.0):a}	:i $first_pass$ = :a{$false$:a}	:i $OldAnimStep$ = :a{%f(0.0):a}	:i $Anim_End$ = :a{$untriggered$:a}	:i $Next_Phon_anim_Closed$ = $someanims$	:i $Next_Phon_anim_Open$ = $someanims$	:i $Next_Extra_Blend_Factor$ = %f(0.0)	:i $Phon_anim_Open$ = $someanims$	:i $Phon_anim_Closed$ = $someanims$	:i $Current_Syllable_Length$ = %f(0.0)	:i $Next_Syllable_Length$ = %f(0.0)	:i endfunction]Script spawn_auto_vocal_jaw_flap 0x406cd2e1 [	:i while 	:i $getframelength$	:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))	:i if (%GLOBAL%$requested_jawflap_queue$ = ~$g_current_jawflap_queue$)		:i continue	:i endif	:i $distance$ = (%GLOBAL%$distance$ - %GLOBAL%$frame_length$)	:i if (%GLOBAL%$distance$ < %f(0.0))		:i $distance$ = %f(0.0)	:i endif	:i $WaitOneGameFrame$	:i loop_to 	:i while 	:i if (~$g_jaw_flap_busy$ = $true$)		:i $distance$ = (%GLOBAL%$distance$ - %GLOBAL%$frame_length$)		:i if (%GLOBAL%$distance$ < %f(0.0))			:i $distance$ = %f(0.0)		:i endif	:i else 		:i $changeglobalchecksum$${			StructQBKey global_name = g_jaw_flap_busy			StructQBKey new_value = true		}$				:i $ChangeGlobalInteger$$global_name$ = $g_current_jawflap_queue$$new_value$ = ((~$g_current_jawflap_queue$) + %i(1))		:i continue	:i endif	:i $WaitOneGameFrame$	:i $getframelength$	:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))	:i loop_to 	:i $longest_forward_shift$ = %f(250.0)	:i if (%GLOBAL%$distance$ < %GLOBAL%$longest_forward_shift$)		:i $Current_Syllable_Length$ = (%GLOBAL%$Current_Syllable_Length$ + %GLOBAL%$distance$)		:i $distance$ = %f(0.0)	:i else 		:i $Current_Syllable_Length$ = (%GLOBAL%$Current_Syllable_Length$ + %GLOBAL%$longest_forward_shift$)		:i $distance$ = (%GLOBAL%$distance$ - %GLOBAL%$longest_forward_shift$)	:i endif	:i $distance$ = (%GLOBAL%$distance$ / %f(1000.0))	:i $waitseconds$$num_seconds$ = %GLOBAL%$distance$	:i $KillSpawnedScriptsByName$${StructQBKey name = auto_vocal_jaw_flap}$	:i $fastspawnscriptnow$$script_name$ = $auto_vocal_jaw_flap$$params$ = :s{		:i $Current_Syllable_Length$ = %GLOBAL%$Current_Syllable_Length$		:i $num_vocalists$ = %GLOBAL%$num_vocalists$		:i $vocalist_Ids$ = %GLOBAL%$vocalist_Ids$		:i $frame_length$ = %GLOBAL%$frame_length$	:i :s}	:i $distance$ = %f(0.0)	:i $requested_jawflap_queue$ = %i(0)	:i $Current_Syllable_Length$ = %f(0.0)	:i $num_vocalists$ = %i(1)	:i $vocalist_Ids$ = :a{:a}	:i endfunction]Script auto_vocal_jaw_flap 0x5f5e43df [	:i $end_of_sequence$ = $untriggered$	:i $pitch_volume_lerp_speed$ = %f(0.3300000)	:i $fastest_syllable$ = %f(150.0)	:i $slowest_syllable$ = %f(550.0)	:i $AV_Pitch_Volume$ = (~$AV_Pitch_Volume$)	:i $current_Pitch_Volume$ = (~$AV_Pitch_Volume$)	:i $remaining_length$ = (%GLOBAL%$Current_Syllable_Length$ - %GLOBAL%$frame_length$)	:i $accept_pitch_quiver$ = %f(0.0)	:i $pitch_quiver_ramp_in_duration$ = %f(250.0)	:i if (%GLOBAL%$Current_Syllable_Length$ > %GLOBAL%$slowest_syllable$)		:i $ramp_percent_of_current_syllable$ = (%GLOBAL%$slowest_syllable$ / %GLOBAL%$Current_Syllable_Length$)		:i $smooth_ease_out_start_point$ = (%f(1.0) - (%GLOBAL%$ramp_percent_of_current_syllable$ * %f(0.5)))		:i $smooth_ease_in_end_point$ = (%GLOBAL%$ramp_percent_of_current_syllable$ * %f(0.5))		:i $jaw_open_duration$ = ((%f(1.0) - %GLOBAL%$ramp_percent_of_current_syllable$) * %GLOBAL%$Current_Syllable_Length$)		:i $pitch_quiver_max$ = (%GLOBAL%$jaw_open_duration$ / %GLOBAL%$pitch_quiver_ramp_in_duration$)		:i if (%GLOBAL%$pitch_quiver_max$ > %f(1.0))			:i $pitch_quiver_max$ = %f(1.0)		:i endif	:i else 		:i $smooth_ease_out_start_point$ = %f(0.5)		:i $smooth_ease_in_end_point$ = %f(0.5)		:i $pitch_quiver_max$ = %f(0.0)		:i $jaw_open_duration$ = %f(0.0)	:i endif	:i $remaining_jaw_open_length$ = %GLOBAL%$jaw_open_duration$	:i $smooth_ease_in_start_point$ = (%f(1.0) - ((%f(1.0) - %GLOBAL%$smooth_ease_out_start_point$) * %f(0.5)))	:i $smooth_ease_out_end_point$ = (%GLOBAL%$smooth_ease_in_end_point$ * %f(0.5))	:i while 	:i $getframelength$	:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))	:i $remaining_length_factor$ = (%GLOBAL%$remaining_length$ / %GLOBAL%$Current_Syllable_Length$)	:i if (%GLOBAL%$remaining_length_factor$ > %GLOBAL%$smooth_ease_in_start_point$)		:i $current_range_factor$ = ((%GLOBAL%$remaining_length_factor$ - %GLOBAL%$smooth_ease_in_start_point$) / (%i(1) - %GLOBAL%$smooth_ease_in_start_point$))		:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)		:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)		:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)		:i $Target_Pitch_Volume$ = ((%GLOBAL%$current_Pitch_Volume$ * %GLOBAL%$current_range_factor$) + ((%f(0.5) * %GLOBAL%$current_Pitch_Volume$) * (%f(1.0) - %GLOBAL%$current_range_factor$)))	:i elseif (%GLOBAL%$remaining_length_factor$ > %GLOBAL%$smooth_ease_out_start_point$)		:i $current_range_factor$ = ((%GLOBAL%$remaining_length_factor$ - %GLOBAL%$smooth_ease_out_start_point$) / (%GLOBAL%$smooth_ease_in_start_point$ - %GLOBAL%$smooth_ease_out_start_point$))		:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)		:i $Target_Pitch_Volume$ = (((%f(0.5) * %GLOBAL%$current_Pitch_Volume$) * %GLOBAL%$current_range_factor$))	:i elseif (%GLOBAL%$remaining_length_factor$ > %GLOBAL%$smooth_ease_in_end_point$)		:i $Target_Pitch_Volume$ = %f(0.0)		:i $remaining_jaw_open_factor$ = (%GLOBAL%$remaining_jaw_open_length$ / %GLOBAL%$jaw_open_duration$)		:i if (%GLOBAL%$remaining_jaw_open_factor$ > %f(0.5))			:i $current_range_factor$ = ((%f(1.0) - %GLOBAL%$remaining_jaw_open_factor$) * %f(2.0))			:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)			:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %f(0.5))		:i else 			:i $current_range_factor$ = (((%f(1.0) - %GLOBAL%$remaining_jaw_open_factor$) * %f(2.0))%f(-1.0))			:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)			:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)			:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)			:i $current_range_factor$ = ((%GLOBAL%$current_range_factor$ * %f(0.5)) + %f(0.5))		:i endif		:i if (%GLOBAL%$current_range_factor$ > %f(1.0))			:i $current_range_factor$ = %f(1.0)		:i endif		:i $accept_pitch_quiver$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$pitch_quiver_max$)		:i $remaining_jaw_open_length$ = (%GLOBAL%$remaining_jaw_open_length$ - %GLOBAL%$frame_length$)		:i if (%GLOBAL%$remaining_jaw_open_length$ < %f(0.0))			:i $remaining_jaw_open_length$ = %f(0.0)		:i endif	:i elseif (%GLOBAL%$remaining_length_factor$ > %GLOBAL%$smooth_ease_out_end_point$)		:i $current_range_factor$ = ((%GLOBAL%$remaining_length_factor$ - %GLOBAL%$smooth_ease_out_end_point$) / (%GLOBAL%$smooth_ease_in_end_point$ - %GLOBAL%$smooth_ease_out_end_point$))		:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)		:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)		:i $current_range_factor$ = (%f(1.0) - %GLOBAL%$current_range_factor$)		:i $Target_Pitch_Volume$ = ((%f(0.5) * (%f(1.0) - %GLOBAL%$current_range_factor$)))		:i $accept_pitch_quiver$ = (%GLOBAL%$pitch_quiver_max$ * (%f(1.0) - %GLOBAL%$Target_Pitch_Volume$))	:i else 		:i $current_range_factor$ = (%GLOBAL%$remaining_length_factor$ / %GLOBAL%$smooth_ease_out_end_point$)		:i $current_range_factor$ = (%GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$ * %GLOBAL%$current_range_factor$)		:i $Target_Pitch_Volume$ = ((%f(0.5) * %GLOBAL%$current_range_factor$) + (%f(1.0) * (%f(1.0) - %GLOBAL%$current_range_factor$)))		:i $accept_pitch_quiver$ = (%GLOBAL%$pitch_quiver_max$ * (%f(1.0) - %GLOBAL%$Target_Pitch_Volume$))	:i endif	:i $AV_Pitch_Volume$ = (%GLOBAL%$AV_Pitch_Volume$ + ((%GLOBAL%$Target_Pitch_Volume$ - %GLOBAL%$AV_Pitch_Volume$) * %GLOBAL%$pitch_volume_lerp_speed$))	:i $AV_Pitch_Volume_inverted$ = (%f(1.0) - %GLOBAL%$AV_Pitch_Volume$)	:i $AV_Pitch_Volume_quiver$ = (%GLOBAL%$AV_Pitch_Volume_inverted$ * (%f(1.0) - ((~$g_pitch_quiver$) * %GLOBAL%$accept_pitch_quiver$)))	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{		:i $AV_Pitch_Volume$ = %GLOBAL%$AV_Pitch_Volume_quiver$	:i :s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $ChangeGlobalFloat$$global_name$ = $AV_Pitch_Volume$$new_value$ = %GLOBAL%$AV_Pitch_Volume$	:i $remaining_length$ = (%GLOBAL%$remaining_length$ - %GLOBAL%$frame_length$)	:i if (%GLOBAL%$remaining_length$ < %f(0.0))		:i $remaining_length$ = %f(0.0)	:i endif	:i if (%GLOBAL%$end_of_sequence$ = $untriggered$)		:i if (%GLOBAL%$Target_Pitch_Volume$ = %f(1.0))			:i $changeglobalchecksum$${				StructQBKey global_name = g_jaw_flap_busy				StructQBKey new_value = false			}$						:i $end_of_sequence$ = $triggered$		:i endif	:i endif	:i $WaitOneGameFrame$	:i loop_to 	:i $vocalist_Ids$ = :a{:a}	:i endfunction]Script av_mouth_idle d5ffa45f [	:i $waittime$ = ((%GLOBAL%$distance$%f(-750.0)) / %f(1000.0))	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$anim_command$$target$ = $autovocals_Mouth_Idle$$command$ = $partialswitch_setstate$$params$ = :s{$on$$blendduration$ = %f(2.0):s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $waitseconds$$num_seconds$ = %GLOBAL%$waittime$	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$anim_command$$target$ = $autovocals_Mouth_Idle$$command$ = $partialswitch_setstate$$params$ = :s{$Off$$blendduration$ = %f(0.75):s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $distance$ = %f(0.0)	:i $vocalist_Ids$ = :a{:a}	:i $waittime$ = %f(0.0)	:i endfunction]Script phon_timer 0x8c720895 [	:i $GetNumFrames$ = ((~$fastest_phon$) / %GLOBAL%$frame_length$)	:i $fastest_AnimStep$ = (%i(1) / %GLOBAL%$GetNumFrames$)	:i $GetNumFrames$ = ((~$neutral_phon$) / %GLOBAL%$frame_length$)	:i $neutral_AnimStep$ = (%i(1) / %GLOBAL%$GetNumFrames$)	:i if (%GLOBAL%$Init_Length$ > %GLOBAL%$frame_length$)		:i $GetNumFrames$ = (%GLOBAL%$Init_Length$ / %GLOBAL%$frame_length$)		:i $AnimStep$ = (((~$phon_Sweet_Start$) - %GLOBAL%$timer$) / %GLOBAL%$GetNumFrames$)		:i $Init_Length$ = (%GLOBAL%$Init_Length$ - %GLOBAL%$frame_length$)	:i else 		:i $Length$ = (%GLOBAL%$Length$ + %GLOBAL%$Init_Length$)		:i $Init_Length$ = %f(0.0)		:i if (%GLOBAL%$Length$ > %GLOBAL%$frame_length$)			:i $GetNumFrames$ = (%GLOBAL%$Length$ / %GLOBAL%$frame_length$)			:i $AnimStep$ = (((~$phon_Sweet_End$) - %GLOBAL%$timer$) / %GLOBAL%$GetNumFrames$)			:i if (%GLOBAL%$AnimStep$ > %GLOBAL%$fastest_AnimStep$)				:i $AnimStep$ = %GLOBAL%$fastest_AnimStep$			:i endif			:i $Length$ = (%GLOBAL%$Length$ - %GLOBAL%$frame_length$)		:i else 			:i $Length$ = %f(0.0)			:i $AnimStep$ = (%GLOBAL%$OldAnimStep$ * %GLOBAL%$frame_length$)			:i if (%GLOBAL%$AnimStep$ < (%f(0.0049999)))				:i $AnimStep$ = (%f(0.0049999))			:i endif		:i endif	:i endif	:i $OldAnimStep$ = (%GLOBAL%$AnimStep$ / %GLOBAL%$frame_length$)	:i if (%GLOBAL%$timer$ < (~$Phon_init_point$))		:i $nat_fact$ = %f(1.0)	:i elseif (%GLOBAL%$timer$ > (~$Phon_Out_Point$))		:i $nat_fact$ = %f(1.0)	:i else 		:i if (%GLOBAL%$timer$ > (~$phon_Sweet_End$))			:i $nat_fact$ = ((%GLOBAL%$timer$ - (~$phon_Sweet_End$)) / ((~$Phon_Out_Point$) - (~$phon_Sweet_End$)))		:i elseif (%GLOBAL%$timer$ < (~$phon_Sweet_Start$))			:i $nat_fact$ = (%i(1) - ((%GLOBAL%$timer$ - (~$Phon_init_point$)) / ((~$phon_Sweet_Start$) - (~$Phon_init_point$))))		:i else 			:i $nat_fact$ = %f(0.0)		:i endif	:i endif	:i if (%GLOBAL%$nat_fact$ < %f(0.5))		:i $nat_fact_exp$ = (%GLOBAL%$nat_fact$ / %f(0.5))		:i $nat_fact$ = (%GLOBAL%$nat_fact$ * %GLOBAL%$nat_fact_exp$)	:i else 		:i $nat_fact$ = (%i(1) - %GLOBAL%$nat_fact$)		:i $nat_fact_exp$ = (%GLOBAL%$nat_fact$ / %f(0.5))		:i $nat_fact$ = (%GLOBAL%$nat_fact$ * %GLOBAL%$nat_fact_exp$)		:i $nat_fact$ = (%i(1) - %GLOBAL%$nat_fact$)	:i endif	:i $AnimStep$ = ((%GLOBAL%$neutral_AnimStep$ * %GLOBAL%$nat_fact$) + (%GLOBAL%$AnimStep$ * (%i(1) - %GLOBAL%$nat_fact$)))	:i $timer$ = (%GLOBAL%$timer$ + %GLOBAL%$AnimStep$)	:i if (%GLOBAL%$timer$ > %f(1.0))		:i $timer$ = %f(1.0)	:i endif	:i if (%GLOBAL%$Anim_End$ = $untriggered$)		:i if (((%GLOBAL%$Length$ + %GLOBAL%$Init_Length$) - %GLOBAL%$trans_trigger$) < %GLOBAL%$frame_length$)			:i $New_phon$ = $true$			:i $Anim_End$ = $triggered$		:i endif	:i endif	:i return :s{		:i $timer$ = %GLOBAL%$timer$		:i $length_X$ = %GLOBAL%$Length$		:i $OldAnimStep_X$ = %GLOBAL%$OldAnimStep$		:i $init_length_X$ = %GLOBAL%$Init_Length$		:i $Anim_End_X$ = %GLOBAL%$Anim_End$		:i $New_phon$ = %GLOBAL%$New_phon$	:i :s}	:i $frame_length$ = %f(0.0)	:i $GetNumFrames$ = %f(0.0)	:i $fastest_AnimStep$ = %f(0.0)	:i $OldAnimStep$ = %f(0.0)	:i $neutral_AnimStep$ = %f(0.0)	:i $trans_trigger$ = %f(0.0)	:i $channel$ = $channel$	:i endfunction]Script phon_transit 0x572bcf2e [	${Unknown [00012500f3777d3b6969696900000018000126009bea99b2696969690000002800012600a4e42c2c69696969000000380001240099dcabe0696969690000004800012c00f9c2b13269696969000000580001240056a875fa6969696900000000]}$	:i switch %GLOBAL%$cycle_branch$		:i case %i(0)			:i $tree$ = $vocal_tree0$			:i endcase		case %i(1)			:i $tree$ = $vocal_tree1$			:i endcase		case %i(2)			:i $tree$ = $vocal_tree2$			:i endcase		case %i(3)			:i $tree$ = $vocal_tree3$			:i endcase		case %i(4)			:i $tree$ = $vocal_tree4$			:i endcase		case %i(5)			:i $tree$ = $vocal_tree5$	:i end_switch	:i if (%GLOBAL%$blend_duration$ < %f(0.0))		:i $blend_duration$ = %f(0.0)	:i endif	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$anim_command$$target$ = $DB_Phonemes$$command$ = $degenerateblend_addbranch$$params$ = :s{		:i $blendduration$ = %GLOBAL%$blend_duration$		:i $blendcurve$ = :a{%f(1.0),%f(0.9927929),%f(0.9673900),%f(0.9176250),%f(0.8359999),%f(0.7125129),%f(0.5325719),%f(0.3516780),%f(0.2243890),%f(0.1356329),%f(0.0755247),%f(0.0369909),%f(0.0145622),%f(0.0036750),%f(0.0001925),%f(0.0):a}		:i $tree$ = ~%GLOBAL%$tree$		:i $params$ = :s{			:i $anim_open$ = %GLOBAL%$Phon_anim_Open$			:i $anim_closed$ = %GLOBAL%$Phon_anim_Closed$		:i :s}	:i :s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i endfunction]Script av_pitch_control adf79130 [	:i $old_pitch$ = %f(0.0)	:i $max_pitch_diff$ = %f(3.0)	:i $pitch_quiver$ = %f(0.0)	:i $pitch_quiver_ascend$ = %f(0.0)	:i $smooth_pitch_quiver$ = %f(0.0)	:i $pitch_quiver_ascend_rate$ = %f(0.1000000)	:i $pitch_quiver_degrade_rate$ = %f(0.0799999)	:i $smooth_pitch_quiver_lerp_rate$ = %f(0.5)	:i while 	:i $pitch$ = ~$vocals_current_pitch_midinote$	:i $pitch_diff$ = (%GLOBAL%$pitch$ - %GLOBAL%$old_pitch$)	:i if (%GLOBAL%$pitch_diff$ < %f(0.0))		:i $pitch_diff$ = (%GLOBAL%$pitch_diff$ * (%f(0.0)%f(-1.0)))	:i endif	:i if (%GLOBAL%$pitch_diff$ > %GLOBAL%$max_pitch_diff$)		:i $pitch_diff$ = %GLOBAL%$max_pitch_diff$	:i endif	:i if (%GLOBAL%$pitch_diff$ = %f(0.0))		:i $pitch_quiver$ = (%GLOBAL%$pitch_quiver$ - %GLOBAL%$pitch_quiver_degrade_rate$)		:i if (%GLOBAL%$pitch_quiver$ < %f(0.0))			:i $pitch_quiver$ = %f(0.0)		:i endif	:i else 		:i $pitch_quiver$ = (%GLOBAL%$pitch_diff$ / %GLOBAL%$max_pitch_diff$)	:i endif	:i $pitch_quiver_ascend$ = (%GLOBAL%$pitch_quiver_ascend$ + %GLOBAL%$pitch_quiver_ascend_rate$)	:i if (%GLOBAL%$pitch_quiver_ascend$ > %GLOBAL%$pitch_quiver$)		:i $pitch_quiver_ascend$ = %GLOBAL%$pitch_quiver$	:i endif	:i $smooth_pitch_quiver$ = (%GLOBAL%$smooth_pitch_quiver$ + ((%GLOBAL%$pitch_quiver_ascend$ - %GLOBAL%$smooth_pitch_quiver$) * %GLOBAL%$smooth_pitch_quiver_lerp_rate$))	:i $ChangeGlobalFloat$$global_name$ = $g_pitch_quiver$$new_value$ = %GLOBAL%$smooth_pitch_quiver$	:i $getsongtimems$${StructQBString time_offset = Vocals_offset}$	:i $WaitOneGameFrame$	:i $old_pitch$ = %GLOBAL%$pitch$	:i loop_to 	:i $vocalist_Ids$ = :a{:a}	:i endfunction]Script av_brow_inflect_trans a053786e [	${StructFloat total_deduction = 0.00}$	:i if (~$g_reset_brow_inflect$ = %i(1))		:i return $total_deduction$ = %GLOBAL%$total_deduction$	:i endif	:i $Mod_base_N$ = %f(0.0)	:i $Emot_base_N$ = %f(0.5)	:i $Scrub_base_N$ = %f(0.5)	:i $max_offset$ = (%GLOBAL%$max_offset$ * %f(1.6000000))	:i $Mod_base1$ = (~$AV_Brow_Mod_base$)	:i $Emot_base1$ = (~$AV_Brow_Emot_base$)	:i $Scrub_base1$ = (~$AV_Brow_Scrub_base$)	:i $getrandomfloat$$a$ = (%GLOBAL%$Emot_base1$ - (%GLOBAL%$Emot_base1$ * %GLOBAL%$max_offset$))$b$ = (%GLOBAL%$Emot_base1$ + ((%i(1) - %GLOBAL%$Emot_base1$) * %GLOBAL%$max_offset$))	:i $Emot_base2$ = %GLOBAL%$random_float$	:i $getrandomfloat$$a$ = (%GLOBAL%$Scrub_base1$ - (%GLOBAL%$Scrub_base1$ * %GLOBAL%$max_offset$))$b$ = (%GLOBAL%$Scrub_base1$ + ((%i(1) - %GLOBAL%$Scrub_base1$) * %GLOBAL%$max_offset$))	:i $Scrub_base2$ = %GLOBAL%$random_float$	:i $getrandomfloat$$a$ = (%GLOBAL%$Mod_base1$ - (%GLOBAL%$Mod_base1$ * %GLOBAL%$max_offset$))$b$ = (%GLOBAL%$Mod_base1$ + ((%i(1) - %GLOBAL%$Mod_base1$) * %GLOBAL%$max_offset$))	:i $Mod_base2$ = %GLOBAL%$random_float$	:i $Mod_base2$ = ((%GLOBAL%$Mod_base_N$ * %GLOBAL%$Neutral_amount$) + (%GLOBAL%$Mod_base2$ * (%i(1) - %GLOBAL%$Neutral_amount$)))	:i $Emot_base2$ = ((%GLOBAL%$Emot_base_N$ * %GLOBAL%$Neutral_amount$) + (%GLOBAL%$Emot_base2$ * (%i(1) - %GLOBAL%$Neutral_amount$)))	:i $Scrub_base2$ = ((%GLOBAL%$Scrub_base_N$ * %GLOBAL%$Neutral_amount$) + (%GLOBAL%$Scrub_base2$ * (%i(1) - %GLOBAL%$Neutral_amount$)))	:i $Total_Trans$ = %GLOBAL%$Trans_Time$	:i if (%GLOBAL%$Mod_base2$ > %f(1.0))		:i $Mod_base2$ = %f(1.0)	:i elseif (%GLOBAL%$Mod_base2$ < %f(0.0))		:i $Mod_base2$ = %f(0.0)	:i endif	:i if (%GLOBAL%$Emot_base2$ > %f(1.0))		:i $Emot_base2$ = %f(1.0)	:i elseif (%GLOBAL%$Emot_base2$ < %f(0.0))		:i $Emot_base2$ = %f(0.0)	:i endif	:i if (%GLOBAL%$Scrub_base2$ > %f(1.0))		:i $Scrub_base2$ = %f(1.0)	:i elseif (%GLOBAL%$Scrub_base2$ < %f(0.0))		:i $Scrub_base2$ = %f(0.0)	:i endif	:i while 	:i if (%GLOBAL%$Trans_Time$ < %f(0.0))		:i $Trans_Time$ = %f(0.0)	:i endif	:i $Trans_factor$ = (%GLOBAL%$Trans_Time$ / %GLOBAL%$Total_Trans$)	:i $Mod_base$ = ((%GLOBAL%$Mod_base1$ * %GLOBAL%$Trans_factor$) + (%GLOBAL%$Mod_base2$ * (%i(1) - %GLOBAL%$Trans_factor$)))	:i $Emot_base$ = ((%GLOBAL%$Emot_base1$ * %GLOBAL%$Trans_factor$) + (%GLOBAL%$Emot_base2$ * (%i(1) - %GLOBAL%$Trans_factor$)))	:i $Scrub_base$ = ((%GLOBAL%$Scrub_base1$ * %GLOBAL%$Trans_factor$) + (%GLOBAL%$Scrub_base2$ * (%i(1) - %GLOBAL%$Trans_factor$)))	:i if (~$g_reset_brow_inflect$ = %i(1))		:i return $total_deduction$ = %GLOBAL%$total_deduction$	:i endif	:i $ChangeGlobalFloat$$global_name$ = $AV_Brow_Mod_base$$new_value$ = %GLOBAL%$Mod_base$	:i $ChangeGlobalFloat$$global_name$ = $AV_Brow_Emot_base$$new_value$ = %GLOBAL%$Emot_base$	:i $ChangeGlobalFloat$$global_name$ = $AV_Brow_Scrub_base$$new_value$ = %GLOBAL%$Scrub_base$	:i if (%GLOBAL%$Trans_Time$ = %f(0.0))		:i return $total_deduction$ = %GLOBAL%$total_deduction$	:i endif	:i $WaitOneGameFrame$	:i $getframelength$	:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))	:i $Trans_Time$ = (%GLOBAL%$Trans_Time$ - %GLOBAL%$frame_length$)	:i $total_deduction$ = (%GLOBAL%$total_deduction$ + %GLOBAL%$frame_length$)	:i loop_to 	:i $frame_length$ = %f(0.0)	:i $total_deduction$ = %f(0.0)	:i $Neutral_amount$ = %f(0.0)	:i $random_float$ = %f(0.0)	:i $max_offset$ = %f(0.0)	:i endfunction]Script AV_Set_Brow d96e4705 [	:i $Old_AV_Brow_Scrub$ = %f(0.5)	:i $Old_AV_Brow_Mod$ = %f(0.0)	:i $Old_AV_Brow_Emot$ = %f(0.5)	:i $Speed$ = %f(0.1000000)	:i while 	:i $AV_Brow_Scrub$ = (%GLOBAL%$Old_AV_Brow_Scrub$ + (((~$AV_Brow_Scrub_base$) - %GLOBAL%$Old_AV_Brow_Scrub$) * %GLOBAL%$Speed$))	:i $AV_Brow_Mod$ = (%GLOBAL%$Old_AV_Brow_Mod$ + (((~$AV_Brow_Mod_base$) - %GLOBAL%$Old_AV_Brow_Mod$) * %GLOBAL%$Speed$))	:i $AV_Brow_Emot$ = (%GLOBAL%$Old_AV_Brow_Emot$ + (((~$AV_Brow_Emot_base$) - %GLOBAL%$Old_AV_Brow_Emot$) * %GLOBAL%$Speed$))	:i $Mod_factor$ = (%f(0.5) - %GLOBAL%$AV_Brow_Scrub$)	:i if (%GLOBAL%$Mod_factor$ < %f(0.0))		:i $Mod_factor$ = (%GLOBAL%$Mod_factor$ * (%i(0)%i(4294967295)))	:i endif	:i $Mod_factor2$ = (%f(0.5) - %GLOBAL%$AV_Brow_Emot$)	:i if (%GLOBAL%$Mod_factor2$ < %f(0.0))		:i $Mod_factor2$ = (%GLOBAL%$Mod_factor2$ * (%i(0)%i(4294967295)))	:i endif	:i $Mod_factor$ = (%GLOBAL%$Mod_factor$ + %GLOBAL%$Mod_factor2$)	:i $Final_Brow_Mod$ = (%GLOBAL%$AV_Brow_Mod$ + ((%i(1) - %GLOBAL%$AV_Brow_Mod$) * %GLOBAL%$Mod_factor$))	:i if (%GLOBAL%$Final_Brow_Mod$ > %f(1.0))		:i $Final_Brow_Mod$ = %f(1.0)	:i endif	:i $index$ = %i(0)	:i while 	:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{		:i $AV_Brow_Scrub$ = %GLOBAL%$AV_Brow_Scrub$		:i $AV_Brow_Mod$ = %GLOBAL%$Final_Brow_Mod$		:i $AV_Brow_Emot$ = %GLOBAL%$AV_Brow_Emot$	:i :s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $Old_AV_Brow_Scrub$ = %GLOBAL%$AV_Brow_Scrub$	:i $Old_AV_Brow_Mod$ = %GLOBAL%$AV_Brow_Mod$	:i $Old_AV_Brow_Emot$ = %GLOBAL%$AV_Brow_Emot$	:i $WaitOneGameFrame$	:i loop_to 	:i endfunction]Script av_brow_inflect 0x7245ff20 [	:i $min_offset$ = %f(0.2000000)	:i $max_length$ = %f(1500.0)	:i %GLOBAL%$distance$ = %f(0.0)	:i %GLOBAL%$Length$ = %f(0.0)	:i $ChangeGlobalInteger$${		StructQBKey global_name = g_reset_brow_inflect		StructInt new_value = 0	}$		:i %GLOBAL%$brow_inflect_needed$ = %i(0)	:i while 	:i if (%GLOBAL%$brow_inflect_needed$ = %i(1))		:i if (%GLOBAL%$Length$ > %GLOBAL%$max_length$)			:i $Length_inflect$ = %f(1.0)		:i else 			:i $Length_inflect$ = (%GLOBAL%$Length$ / %GLOBAL%$max_length$)		:i endif		:i if (%GLOBAL%$distance$ > ~$AV_Face_Idle_Distance$)			:i $Distance_inflect$ = %f(1.0)			:i $av_brow_inflect_trans$:s{				:i $Trans_Time$ = (~$AV_Brow_Relax_Distance$)				:i $Neutral_amount$ = %f(1.0)				:i $max_offset$ = %f(0.0)			:i :s}			:i $distance$ = (%GLOBAL%$distance$ - %GLOBAL%$total_deduction$)		:i else 			:i $Distance_inflect$ = (%GLOBAL%$distance$ / ~$AV_Face_Idle_Distance$)		:i endif		:i while 		:i if (~$g_reset_brow_inflect$ = %i(1))			:i continue		:i elseif (%GLOBAL%$distance$ > ~$AV_Brow_Inflect_Distance$)			:i $WaitOneGameFrame$			:i $getframelength$			:i $frame_length$ = (%GLOBAL%$frame_length$ * %f(1000.0))			:i $distance$ = (%GLOBAL%$distance$ - %GLOBAL%$frame_length$)		:i else 			:i continue		:i endif		:i loop_to 		:i $Distance_inflect$ = (%GLOBAL%$Distance_inflect$ + (%GLOBAL%$min_offset$ * (%i(1) - %GLOBAL%$Distance_inflect$)))		:i $Length_inflect$ = (%GLOBAL%$Length_inflect$ + (%GLOBAL%$min_offset$ * (%i(1) - %GLOBAL%$Length_inflect$)))		:i $Distance_inflect$ = ((%GLOBAL%$Distance_inflect$ * %f(0.6999999)) + (%GLOBAL%$Length_inflect$ * %f(0.3000000)))		:i $av_brow_inflect_trans$:s{			:i $Trans_Time$ = (%GLOBAL%$distance$)			:i $Neutral_amount$ = %f(0.0)			:i $max_offset$ = %GLOBAL%$Distance_inflect$		:i :s}		:i $av_brow_inflect_trans$:s{			:i $Trans_Time$ = (%GLOBAL%$Length$)			:i $Neutral_amount$ = %f(0.0)			:i $max_offset$ = %GLOBAL%$Length_inflect$		:i :s}	:i endif	:i if (~$g_reset_brow_inflect$ = %i(1))		:i $ChangeGlobalInteger$${			StructQBKey global_name = g_reset_brow_inflect			StructInt new_value = 0		}$				:i %GLOBAL%$brow_inflect_needed$ = %i(1)		:i %GLOBAL%$distance$ = ~$g_av_brow_inflect_current_distance$		:i %GLOBAL%$Length$ = ~$g_av_brow_inflect_current_syllable_length$	:i else 		:i %GLOBAL%$brow_inflect_needed$ = %i(0)	:i endif	:i $WaitOneGameFrame$	:i loop_to 	:i $total_deduction$ = %f(0.0)	:i $frame_length$ = %f(0.0)	:i $distance$ = %f(0.0)	:i endfunction]Script av_face_noise cef0633c [	:i $target_threshold$ = %f(0.0099999)	:i $strength$ = %f(100.5)	:i $target_strength$ = %f(100.5)	:i $Cap_Strength_Smooth$ = %f(0.5)	:i $target_direction$ = $equal$	:i while 	:i switch %GLOBAL%$Face_Channel$		:i case $Emot$			:i $amplitude$ = (~$AV_Brow_Emot_amp$)			:i $baseline$ = (~$AV_Brow_Emot_base$)			:i $Frequency$ = (~$AV_Brow_Emot_freq$)			:i endcase		case $mod$			:i $amplitude$ = (~$AV_Brow_Mod_amp$)			:i $baseline$ = (~$AV_Brow_Mod_base$)			:i $Frequency$ = (~$AV_Brow_Mod_freq$)			:i endcase		case $Scrub$			:i $amplitude$ = (~$AV_Brow_Scrub_amp$)			:i $baseline$ = (~$AV_Brow_Scrub_base$)			:i $Frequency$ = (~$AV_Brow_Scrub_freq$)	:i end_switch	:i $Frequency$ = (%f(0.0199999) * %GLOBAL%$Frequency$)	:i $smoothness$ = (%GLOBAL%$Frequency$ * %f(2.5))	:i $target_diff$ = (%GLOBAL%$strength$ - %GLOBAL%$target_strength$)	:i if (%GLOBAL%$target_direction$ = $higher$)		:i $strength_Step$ = %GLOBAL%$Frequency$		:i $Target_Diff_ABS$ = (%GLOBAL%$target_diff$ * (%f(0.0)%f(-1.0)))	:i elseif (%GLOBAL%$target_direction$ = $lower$)		:i $strength_Step$ = (%GLOBAL%$Frequency$ * (%f(0.0)%f(-1.0)))		:i $Target_Diff_ABS$ = (%GLOBAL%$target_diff$)	:i else 		:i $strength_Step$ = %f(0.0)		:i $Target_Diff_ABS$ = %f(-1.0)	:i endif	:i if (%GLOBAL%$Target_Diff_ABS$ < %f(0.0))		:i $strength$ = %GLOBAL%$target_strength$		:i $getrandomfloat$$a$ = ((%f(100.0) + %GLOBAL%$baseline$ - %GLOBAL%$amplitude$))$b$ = ((%f(100.0) + %GLOBAL%$baseline$ + %GLOBAL%$amplitude$))		:i $target_strength$ = %GLOBAL%$random_float$		:i if (%GLOBAL%$target_strength$ > %GLOBAL%$strength$)			:i $target_direction$ = $higher$		:i elseif (%GLOBAL%$target_strength$ < %GLOBAL%$strength$)			:i $target_direction$ = $lower$		:i else 			:i $target_direction$ = $equal$		:i endif	:i endif	:i $strength$ = (%GLOBAL%$strength$ + %GLOBAL%$strength_Step$)	:i $Cap_Strength$ = (%GLOBAL%$strength$%f(-100.0))	:i if (%GLOBAL%$Cap_Strength$ > %f(1.0))		:i $Cap_Strength$ = %f(1.0)	:i elseif (%GLOBAL%$Cap_Strength$ < %f(0.0))		:i $Cap_Strength$ = %f(0.0)	:i endif	:i $smooth_diff$ = (%GLOBAL%$Cap_Strength$ - %GLOBAL%$Cap_Strength_Smooth$)	:i $Cap_Strength_Smooth$ = (%GLOBAL%$Cap_Strength_Smooth$ + (%GLOBAL%$smooth_diff$ * %GLOBAL%$smoothness$))	:i $Final_Noise_output$ = (%GLOBAL%$Cap_Strength_Smooth$)	:i $index$ = %i(0)	:i while 	:i switch %GLOBAL%$Face_Channel$		:i case $Emot$			:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{				:i $AV_Brow_Emot$ = %GLOBAL%$Final_Noise_output$			:i :s}			:i endcase		case $mod$			:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{				:i $AV_Brow_Mod$ = %GLOBAL%$Final_Noise_output$			:i :s}			:i endcase		case $Scrub$			:i (%GLOBAL%$vocalist_Ids$:a{%GLOBAL%$index$:a}).$animpreview_setsourcevalues$:s{				:i $AV_Brow_Scrub$ = %GLOBAL%$Final_Noise_output$			:i :s}	:i end_switch	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %GLOBAL%$num_vocalists$	:i $WaitOneGameFrame$	:i loop_to 	:i $random_float$ = %f(0.0)	:i $target$ = $musician2$	:i $Face_Channel$ = $mod$	:i $vocalist_Ids$ = :a{:a}	:i endfunction]Script AV_Generic_Noise 0x6524e9e6 [	:i $amplitude$ = %f(0.5)	:i $baseline$ = %f(0.5)	:i $overshoot$ = %f(0.75)	:i $Frequency$ = %f(0.5)	:i $target_threshold$ = %f(0.0099999)	:i $Frequency$ = (%f(0.0199999) * %GLOBAL%$Frequency$)	:i $smoothness$ = (%GLOBAL%$Frequency$ * %f(2.5))	:i $strength$ = %f(100.5)	:i $target_strength$ = %f(100.5)	:i $Cap_Strength_Smooth$ = %f(0.5)	:i $target_direction$ = $equal$	:i while 	:i $target_diff$ = (%GLOBAL%$strength$ - %GLOBAL%$target_strength$)	:i if (%GLOBAL%$target_direction$ = $higher$)		:i $strength_Step$ = %GLOBAL%$Frequency$		:i $Target_Diff_ABS$ = (%GLOBAL%$target_diff$ * (%f(0.0)%f(-1.0)))	:i elseif (%GLOBAL%$target_direction$ = $lower$)		:i $strength_Step$ = (%GLOBAL%$Frequency$ * (%f(0.0)%f(-1.0)))		:i $Target_Diff_ABS$ = (%GLOBAL%$target_diff$)	:i else 		:i $strength_Step$ = %f(0.0)		:i $Target_Diff_ABS$ = %f(-1.0)	:i endif	:i if (%GLOBAL%$Target_Diff_ABS$ < %f(0.0))		:i $strength$ = %GLOBAL%$target_strength$		:i $getrandomfloat$$a$ = (%f(100.0) - %GLOBAL%$overshoot$)$b$ = (%f(101.0) + %GLOBAL%$overshoot$)		:i $target_strength$ = %GLOBAL%$random_float$		:i if (%GLOBAL%$target_strength$ > %GLOBAL%$strength$)			:i $target_direction$ = $higher$		:i elseif (%GLOBAL%$target_strength$ < %GLOBAL%$strength$)			:i $target_direction$ = $lower$		:i else 			:i $target_direction$ = $equal$		:i endif	:i endif	:i $strength$ = (%GLOBAL%$strength$ + %GLOBAL%$strength_Step$)	:i $Cap_Strength$ = (%GLOBAL%$strength$%f(-100.0))	:i if (%GLOBAL%$Cap_Strength$ > %f(1.0))		:i $Cap_Strength$ = %f(1.0)	:i elseif (%GLOBAL%$Cap_Strength$ < %f(0.0))		:i $Cap_Strength$ = %f(0.0)	:i endif	:i $smooth_diff$ = (%GLOBAL%$Cap_Strength$ - %GLOBAL%$Cap_Strength_Smooth$)	:i $Cap_Strength_Smooth$ = (%GLOBAL%$Cap_Strength_Smooth$ + (%GLOBAL%$smooth_diff$ * %GLOBAL%$smoothness$))	:i $Final_Noise_output$ = ((((%GLOBAL%$Cap_Strength_Smooth$%f(-0.5)) * %f(2.0)) * %GLOBAL%$amplitude$) + %GLOBAL%$baseline$)	:i $fastgetarraysize$$array$ = (~$gAnimTreePreviewObjects$)	:i if (%GLOBAL%$array_size$ > %i(0))		:i $target$ = ((~$gAnimTreePreviewObjects$):a{%i(0):a}->$name$)		:i %GLOBAL%$target$.$animpreview_setsourcevalues$:s{		:i :s}	:i else 		:i continue	:i endif	:i $wait$${		StructInt 1		StructQBKey frame	}$		:i loop_to 	:i $target$ = $musician2$	:i endfunction]