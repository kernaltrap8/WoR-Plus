Unknown [1c000000000000000000245c0000000000000000]Script guitar_startup_initialize 0x344a7d96 [	:i $output_status_begin$${StructString prefix = "iinit"}$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Setup traditional band parts."	}$		:i $globaltag_setup_traditional_band$$savegame$ = %GLOBAL%$savegame$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Calling user startup script"	}$		:i if $ScriptExists$${StructQBKey startup}$		:i $startup$	:i endif	:i $output_status$${		StructString prefix = "iinit"		StructString text = "AssertOnMissingScripts = 1"	}$		:i $change$${StructInt assertonmissingscripts = 1}$	:i if $IsXenon$		:i if $DebugBuild$			:i $change$${StructQBKey crowd_config_xenon = crowd_config_nojiggle_768}$		:i endif		:i if NOT $UsingPureHeap$			:i $change$${StructQBKey crowd_config_xenon = crowd_config_nojiggle_768}$		:i endif	:i endif	:i $output_status$${		StructString prefix = "iinit"		StructString text = "disable particle LOD"	}$		:i $engineConfig$${StructInt particlelod = 0}$	:i $engineConfig$${StructInt skinmaterialoverwrite = 1}$	:i $SetSplitRenderMode$${StructInt func = 7}$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Shadow params"	}$		:i $engineConfig$${StructQBKey shadowalgorithm = None}$	:i $engineConfig$${StructFloat deferredshadowblurradius = 6.00}$	:i $engineConfig$${		StructFloatX2 SmokeParticleSizeRange		{			Floats [0.450000, 0.350000]		}	}$		:i $engineConfig$${StructFloat SmokeDensity = 0.10000000149011612}$	:i $engineConfig$${StructQBKey SmokeParticleInit}$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "light housing projector shadow softness"	}$		:i $engineConfig$${StructInt HotspotDiffuseTex = 1}$	:i $engineConfig$${StructFloat HotspotMultiplier = 4.00}$	:i $engineConfig$${StructFloat lightprojectorshadowblurradius = 3.00}$	:i $engineConfig$${StructFloat lightvolume2dfadeout = 0.05000000074505806}$	:i $engineConfig$${StructFloat LightVolumeLaserFadeout = 0.009999999776482582}$	:i $engineConfig$${StructInt lightvolumeburn = 1}$	:i $engineConfig$${StructFloat lightvolume2dfadeout = 0.10000000149011612}$	:i $engineConfig$${StructFloat LightVolumeLaserFadeout = 0.0005000000237487257}$	:i $engineConfig$${StructQBKey fillburstblendmode_pass0 = Blend}$	:i $engineConfig$${		StructArray fillburstclearcolor_pass0		{			ArrayFloat			[				0.300000				0.300000				0.300000				0.00000			]		}	}$		:i $engineConfig$${StructQBKey fillburstblendmode_pass1 = addrgba}$	:i $engineConfig$${		StructArray fillburstclearcolor_pass1		{			ArrayInteger			[				0				0				0				0			]		}	}$		:i $output_status$${		StructString prefix = "iinit"		StructString text = "setup shadow params"	}$		:i $SetShadowRenderingFlags$${		StructString enable = "true"		StructString object = "all"	}$		:i $SetShadowMapParams$${StructFloat far = 16.00}$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "SetShadowProjectionTexture"	}$		:i $SetShadowProjectionTexture$${StructQBKey texture = white}$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Set platform maximums for jam mode"	}$		:i $set_plat_jam_maximums$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Setting button cheats"	}$		:i if $DemoBuild$		:i $change$${StructInt enable_button_cheats = 0}$	:i endif	:i if $RetailBuild$		:i $change$${StructInt enable_button_cheats = 0}$		:i $change$${StructInt g_career_skip_narration = 0}$	:i endif	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Default to skipping the boot up flow if on a debug build."	}$		:i $output_status$${		StructString prefix = "iinit"		StructString text = "Loading net preferences"	}$		:i $PushMemProfile$${StructString 0x00000000 = "net_load_preferences"}$	:i $net_load_preferences$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "iinit"		StructString text = "Tutorial settings"	}$		:i $output_status_end$${StructString prefix = "iinit"}$	:i endfunction]Script guitar_startup_memory 0x651a1314 [	:i $output_status_begin$${StructString prefix = "heaps"}$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "memory_get_heap_sizes"	}$		:i $memory_get_heap_sizes$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Initialize bink stuff first since loading screens will need it."	}$		:i $MemInitHeap$$name$ = %s("heap_bink")$size$ = %GLOBAL%$heap_size_bink$$vram_size$ = %GLOBAL%$heap_size_bink_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "CAS build heap"	}$		:i $MemInitHeap$$name$ = %s("heap_cas_build")$size$ = %GLOBAL%$heap_size_cas_build$$vram_size$ = %GLOBAL%$heap_size_cas_build_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Player info heap"	}$		:i $MemInitHeap$$name$ = %s("heap_player_info")$size$ = %GLOBAL%$heap_size_player_info$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Frag heap"	}$		:i $MemInitHeap$$name$ = %s("heap_frag")$size$ = %GLOBAL%$heap_size_frag$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Nodearray heap"	}$		:i $MemInitHeap$$name$ = %s("heap_nodearray")$size$ = %GLOBAL%$heap_size_nodearray$	:i $SetNodeFuncsHeap$${StructQBKey heap = heap_nodearray}$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Gameplay heap"	}$		:i $MemInitHeap$$name$ = %s("heap_gameplay")$size$ = %GLOBAL%$heap_size_gameplay$	:i $MemPushContext$${StructQBKey heap_gameplay}$	:i $MemInitHeap$$name$ = %s("heap_gameplay_player1")$size$ = %GLOBAL%$heap_size_gameplay_per_player$	:i $MemInitHeap$$name$ = %s("heap_gameplay_player2")$size$ = %GLOBAL%$heap_size_gameplay_per_player$	:i $MemInitHeap$$name$ = %s("heap_gameplay_player3")$size$ = %GLOBAL%$heap_size_gameplay_per_player$	:i $MemInitHeap$$name$ = %s("heap_gameplay_player4")$size$ = %GLOBAL%$heap_size_gameplay_per_player$	:i $MemPopContext$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Lightortho heap"	}$		:i $MemInitHeap$$name$ = %s("heap_lightortho")$size$ = %GLOBAL%$heap_size_lightortho$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Songstat pak heap"	}$		:i $MemInitHeap$$name$ = %s("heap_songstat_pak")$size$ = %GLOBAL%$heap_size_songstat_pak$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Massive Ads heap"	}$		:i $MemInitHeap$$name$ = %s("heap_massive_ads")$size$ = %GLOBAL%$heap_size_massive_ads$$vram_size$ = %GLOBAL%$heap_size_massive_ads_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Create boot-time save heap"	}$		:i $memory_create_save_heap_at_boot$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Bink sub heaps"	}$		:i $create_bink_sub_heaps$${StructQBKey no_save_heap}$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Audio heaps"	}$		:i if $IsFmodEnabled$		:i $MemInitHeap$$name$ = %s("heap_global_sfx")$size$ = %GLOBAL%$heap_size_global_sfx$$vram_size$ = %GLOBAL%$heap_size_global_sfx_vram$		:i $MemInitHeap$$name$ = %s("heap_audio")$size$ = %GLOBAL%$heap_size_audio$	:i endif	:i $output_status$${		StructString prefix = "heaps"		StructString text = "UI Shared Heap"	}$		:i $MemInitHeap$$name$ = %s("heap_ui_shared")$size$ = %GLOBAL%$heap_size_ui_shared$$vram_size$ = %GLOBAL%$heap_size_ui_shared_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "In Game Heap"	}$		:i $MemInitHeap$$name$ = %s("heap_in_game")$size$ = %GLOBAL%$heap_size_in_game$$vram_size$ = %GLOBAL%$heap_size_in_game_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Crowd Heap"	}$		:i $MemInitHeap$$name$ = %s("heap_crowd")$size$ = %GLOBAL%$heap_size_crowd$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Crowd Jam"	}$		:i $MemInitHeap$$name$ = %s("heap_jam")$size$ = %GLOBAL%$heap_size_jam$$vram_size$ = %GLOBAL%$heap_size_jam_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Character heaps"	}$		:i $MemInitHeap$$name$ = %s("heap_musician1")$size$ = %GLOBAL%$heap_size_musician$$vram_size$ = %GLOBAL%$heap_size_musician_vram$	:i $MemInitHeap$$name$ = %s("heap_musician2")$size$ = %GLOBAL%$heap_size_musician$$vram_size$ = %GLOBAL%$heap_size_musician_vram$	:i $MemInitHeap$$name$ = %s("heap_musician3")$size$ = %GLOBAL%$heap_size_musician$$vram_size$ = %GLOBAL%$heap_size_musician_vram$	:i $MemInitHeap$$name$ = %s("heap_musician4")$size$ = %GLOBAL%$heap_size_musician$$vram_size$ = %GLOBAL%$heap_size_musician_vram$	:i $MemInitHeap$$name$ = %s("heap_musician_anim")$size$ = %GLOBAL%$heap_size_musician_anim$	:i $MemInitHeap$$name$ = %s("heap_skeleton")$size$ = %GLOBAL%$heap_size_skeleton$$vm$	:i $MemInitHeap$$name$ = %s("heap_animnode")$size$ = %GLOBAL%$heap_size_animnode$	:i $MemPushContext$${StructQBKey heap_musician_anim}$	:i $MemInitHeap$$name$ = %s("heap_win_lose_anim")$size$ = %GLOBAL%$heap_size_win_lose_anim$	:i $MemPopContext$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Anim pools"	}$		:i $MemPushContext$${StructQBKey heap_animnode}$	:i $PushMemProfile$${StructString 0x00000000 = "Anim pools"}$	:i $AllocateAnimPools$${StructQBString g_anim_pool_params}$	:i $PopMemProfile$	:i $MemPopContext$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "CAS Heaps"	}$		:i $MemInitHeap$$name$ = %s("heap_cas_global")$size$ = %GLOBAL%$heap_size_cas_global$$vram_size$ = %GLOBAL%$heap_size_cas_global_vram$	:i $MemInitHeap$$name$ = %s("heap_cas_cache")$size$ = %GLOBAL%$heap_size_cas_cache$$vram_size$ = %GLOBAL%$heap_size_cas_cache_vram$$vm$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Initializing COIM"	}$		:i $PushMemProfile$${StructString 0x00000000 = "COIM"}$	:i $InitCOIM$${		StructQBString size = Generic_COIM_Size		StructQBString blockalign = Generic_COIM_BlockAlign		StructQBKey coim_min_scratch_blocks		StructQBString Generic_COIM_Params	}$		:i $PopMemProfile$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "InitLightManager"	}$		:i $PushMemProfile$${StructString 0x00000000 = "InitLightManager"}$	:i $InitLightManager$${		StructInt max_lights = 110		StructInt max_model_lights = 1		StructInt max_groups = 17	}$		:i $PopMemProfile$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Set up the animation cache"	}$		:i $PushMemProfile$${StructString 0x00000000 = "Animation Cache"}$	:i $InitAnimSystem$:s{		:i $animheapsize$ = %i(0)		:i $CacheBlockAlign$ = %i(3072)		:i $animnxbuffersize$ = (%i(2) * %i(1024) * %i(1024))		:i $DefCacheType$ = $fullres$		:i $maxanimstages$ = %i(2)		:i $maxanimsubsets$ = %i(4)		:i $maxdegenerateanims$ = %i(3)		:i $animjqsize$ = (%i(1255) * %i(1024))	:i :s}	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating download heap"	}$		:i $MemInitHeap$$name$ = %s("heap_downloads")$size$ = %GLOBAL%$heap_size_downloads$$vram_size$ = %GLOBAL%$heap_size_downloads_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating musicstore heap"	}$		:i $MemInitHeap$$name$ = %s("heap_musicstore")$size$ = %GLOBAL%$heap_size_musicstore$	:i if $IsPS3$		:i $output_status$${			StructString prefix = "heaps"			StructString text = "Creating PS3 CDN Pools heap"		}$				:i $MemInitHeap$$name$ = %s("heap_cdnpools")$size$ = %GLOBAL%$heap_size_cdnpools$	:i endif	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating Download paks heap"	}$		:i $MemInitHeap$$name$ = %s("heap_downloadpaks")$size$ = %GLOBAL%$heap_size_downloadpaks$$vram_size$ = %GLOBAL%$heap_size_downloadpaks_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating zone heap"	}$		:i $MemInitHeap$$name$ = %s("heap_zones")$size$ = %GLOBAL%$heap_size_zones$$vram_size$ = %GLOBAL%$heap_size_zones_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating atoms heap"	}$		:i $MemInitHeap$$name$ = %s("heap_atoms")$size$ = %GLOBAL%$heap_size_atoms$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating UI Pak Slot heap"	}$		:i $MemInitHeap$$name$ = %s("heap_ui_pak_slot")$size$ = %GLOBAL%$heap_size_ui_pak_slot$$vram_size$ = %GLOBAL%$heap_size_ui_pak_slot_vram$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Creating drumpak heaps"	}$		:i $MusicStudio_Instrument_CreateDrumHeaps$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Shhhh - creating stash heap"	}$		:i if NOT $RetailBuild$		:i if $UsingPureHeap$			:i $MemInitHeap$$name$ = %s("heap_stash")$size$ = %GLOBAL%$heap_size_stash$$vram_size$ = %GLOBAL%$heap_size_stash_vram$		:i endif	:i endif	:i $output_status$${		StructString prefix = "heaps"		StructString text = "InitArchiveFileSys"	}$		:i $MemPushContext$${StructQBKey bottomupheap}$	:i $PushMemProfile$${StructString 0x00000000 = "Archive File System"}$	:i $InitArchiveFileSys$${		StructInt max_archives = 4		StructInt max_files = 10000	}$		:i $PopMemProfile$	:i $MemPopContext$	:i $output_status$${		StructString prefix = "heaps"		StructString text = "Initializing Replay buffer"	}$		:i if $are_replays_enabled$		:i $memory_get_replay_heap$		:i $MemPushContext$%GLOBAL%$replay_heap$		:i $PushMemProfile$${StructString 0x00000000 = "Replay buffer"}$		:i %GLOBAL%$replay_buffer_size$ = (%i(1024) * %i(4))		:i $AllocateDataBuffer$$name$ = $replay$$kb$ = %GLOBAL%$replay_buffer_size$		:i $PopMemProfile$		:i $MemPopContext$	:i endif	:i $output_status_end$${StructString prefix = "heaps"}$	:i endfunction]Script guitar_startup_systems f134afef [	:i $output_status_begin$${StructString prefix = "systm"}$	:i $output_status$${		StructString prefix = "systm"		StructString text = "InitSoundSystem"	}$		:i $InitSoundSystem$	:i $output_status$${		StructString prefix = "systm"		StructString text = "InitMovieSystem"	}$		:i $InitMovieSystem$	:i $output_status$${		StructString prefix = "systm"		StructString text = "InitMicSystem"	}$		:i $InitMicSystem$	:i $output_status$${		StructString prefix = "systm"		StructString text = "ScreenElementSystemInit"	}$		:i $ScreenElementSystemInit$	:i $output_status$${		StructString prefix = "systm"		StructString text = "CompositeObjectManager_startup"	}$		:i $PushMemProfile$${StructString 0x00000000 = "CompositeObjectManager_startup"}$	:i $CompositeObjectManager_startup$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "Register all supported screen fx types"	}$		:i $RegisterScreenFX$	:i $output_status$${		StructString prefix = "systm"		StructString text = "Init2DParticles"	}$		:i $CreateScreenElement$${		StructQBKey type = ContainerElement		StructQBKey id = dead_particle_container		StructQBKey parent = root_window		StructFloatX2 Pos		{			Floats [0.00000, 0.00000]		}	}$		:i $CreateScreenElement$${		StructQBKey type = ContainerElement		StructQBKey id = alive_root_particle_container		StructQBKey parent = root_window		StructFloatX2 Pos		{			Floats [0.00000, 0.00000]		}	}$		:i $PushMemProfile$${StructString 0x00000000 = "Init2DParticles"}$	:i $Init2DParticles$${StructQBKey parent = dead_particle_container}$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "setup the bg viewport with a dummy camera"	}$		:i $PushMemProfile$${StructString 0x00000000 = "BG Viewport"}$	:i $setup_bg_viewport_boot$	:i $restore_dummy_bg_camera$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "DisableDolbyDigital"	}$		:i if $IsXenon$		:i if $DemoBuild$			:i if (~$g_kiosk_demo$ = %i(1))				:i $DisableDolbyDigital$			:i endif		:i endif	:i endif	:i $output_status$${		StructString prefix = "systm"		StructString text = "Initializing memory card system"	}$		:i $PushMemProfile$${StructString 0x00000000 = "MemCardSystem"}$	:i $MemCardSystemInitialize$	:i $PopMemProfile$	:i $MC_SetActivePlayer$${StructQBKey querydefault}$	:i $output_status$${		StructString prefix = "systm"		StructString text = "Lightshow setup"	}$		:i $PushMemProfile$${StructString 0x00000000 = "LightShow"}$	:i $LightShow_AddNodeFlags$	:i $LightShow_Init$${		StructQBString notes = LightShow_NoteMapping		StructQBString nodeflags = LightShow_StateNodeFlags	}$		:i $LightShow_SetProcessors$${StructQBString shared = LightShow_SharedProcessors}$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "create_node_flags"	}$		:i $PushMemProfile$${StructString 0x00000000 = "create_node_flags"}$	:i $create_node_flags$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "JamClearMemCache"	}$		:i $PushMemProfile$${StructString 0x00000000 = "JamClearMemCache"}$	:i $JamClearMemCache$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "GamerPics"	}$		:i $PushMemProfile$${StructString 0x00000000 = "GamerPics"}$	:i $gamerpic_sys_init$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "systm"		StructString text = "Turning on viewer"	}$		:i if (~$enable_button_cheats$ = %i(1))		:i $LaunchViewer$		:i $qbr_callback_setup$		:i $change$${StructInt select_shift = 1}$	:i endif	:i $output_status$${		StructString prefix = "systm"		StructString text = "Creating sound busses"	}$		:i $audio_master_sfx_adding_sound_busses$	:i $output_status$${		StructString prefix = "systm"		StructString text = "Setup Pause"	}$		:i $setup_main_button_event_mappings$	:i $setup_pause$	:i $disable_pause$	:i $output_status$${		StructString prefix = "systm"		StructString text = "create the font arrays to be used by the create a logo tech."	}$		:i $create_font_arrays$	:i $output_status$${		StructString prefix = "systm"		StructString text = "setup the netfeed module."	}$		:i $net_get_title_id$	:i $NetFeed$$func$ = $settitleid$$titleid$ = %GLOBAL%$title_id$	:i if $IsPS3$		:i $NetFeed$${			StructQBKey func = setplatform			StructQBKey platform = ps3		}$			:i elseif $IsXenon$		:i $NetFeed$${			StructQBKey func = setplatform			StructQBKey platform = xbox360		}$			:i elseif $IsWinDX$		:i $NetFeed$${			StructQBKey func = setplatform			StructQBKey platform = pc		}$			:i else 	:i endif	:i $NetFeed$${		StructQBKey func = setinboxheaderlimitsize		StructInt limit = 100	}$		:i $NetFeed$${		StructQBKey func = setinboxheaderlimitstrategy		StructQBKey strategy = keepnewer	}$		:i $output_status_end$${StructString prefix = "systm"}$	:i endfunction]Script guitar_startup_critical_loads 0x56b7e7b8 [	:i $output_status_begin$${StructString prefix = "cload"}$	:i $output_status$${		StructString prefix = "cload"		StructString text = "Load CAS Archives"	}$		:i $InitArchiveLoader$${StructInt max_entries = 1800}$	:i $PushMemProfile$${StructString 0x00000000 = "cas_globalarchive caching"}$	:i if $IsPS3$		:i $strategy$ = $all_to_vram$	:i else 		:i $strategy$ = $as_appropriate$	:i endif	:i $LoadArchive$%s("pak\archive\cas_globalarchive.pak")$cache$ = $cas_globalarchive$$heap$ = $heap_cas_global$$async$ = %GLOBAL%$async$$strategy$ = %GLOBAL%$strategy$	:i $PopMemProfile$	:i $PushMemProfile$${StructString 0x00000000 = "cas_pieces"}$	:i if $LoadArchive$${StructString 0x00000000 = "pak\archive\cas_pieces.pak"}$		:i if $GotParam$${StructQBKey reference_archive}$			:i $change$${StructInt cas_pieces_is_a_reference_archive = 1}$		:i endif	:i endif	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "cload"		StructString text = "Load Anim Archive"	}$		:i $PushMemProfile$${StructString 0x00000000 = "anim_loops"}$	:i $LoadArchive$${		StructString 0x00000000 = "pak\archive\anim_loops.pak"		StructInt verify_filenames_match_descs = 0	}$		:i $PopMemProfile$	:i $output_status$${		StructString prefix = "cload"		StructString text = "Initializing file cache"	}$		:i if NOT $DemoBuild$		:i $PushMemProfile$${StructString 0x00000000 = "FileCache"}$		:i $InitFileCache$${			StructInt max_files = 1			StructInt streambuff = 0			StructInt size = 0			StructQBKey disable_on_start			StructQBKey heap = bottomupheap		}$				:i $PopMemProfile$	:i endif	:i if $IsStandardDef$		:i $finalprintf$${StructString 0x00000000 = "Standard Def TV Output!"}$	:i else 		:i $finalprintf$${StructString 0x00000000 = "High Def TV Output!"}$	:i endif	:i $output_status$${		StructString prefix = "cload"		StructString text = "Initializing AnimCompressTable"	}$		:i $PushMemProfile$${StructString 0x00000000 = "AnimCompressTable"}$	:i $InitAnimCompressTable$${		StructString 0x00000000 = "anims\standardkeyq.bin"		StructQBKey q48	}$		:i $InitAnimCompressTable$${		StructString 0x00000000 = "anims\standardkeyt.bin"		StructQBKey t48	}$		:i $PopMemProfile$	:i $output_status_end$${StructString prefix = "cload"}$	:i endfunction]Script guitar_startup_async_init 0x1a064a2b [	:i $output_status_begin$${StructString prefix = "ainit"}$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "Initializing packed structs"	}$		:i $get_num_savegames$	:i $init_packed_structs$$num_savegames$ = %GLOBAL%$num_savegames$	:i $init_savegames$$num_savegames$ = %GLOBAL%$num_savegames$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "BuildCasLookupTables"	}$		:i $BuildCasLookupTables$${StructQBKey master_editable_list = master_editable_list}$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "check_cas preset_profiles"	}$		:i if NOT $cd$		:i if $ScriptExists$${StructQBKey check_cas}$			:i $check_cas$${StructQBKey preset_profiles}$			:i $validate_locked_playlists$			:i $verify_genre_data$			:i $anim_check_win_lose_anim_sizes$			:i $sanity_check_unlocks$${StructInt quest_first = 1}$			:i $sanity_check_unlocks$${StructInt quest_first = 0}$		:i endif		:i $check_localized_string_length$${			StructQBStringQs string = 0x00000000			StructInt len = 0		}$				:i $check_localized_string_length$${			StructQBStringQs string = 0x2ba2c9a2			StructInt len = 1		}$			:i endif	:i $output_status$${		StructString prefix = "ainit"		StructString text = "CAS Setup"	}$		:i $PushMemProfile$${StructString 0x00000000 = "CAS Asset Storage"}$	:i $CASAllocateBudgetBlock$${		StructQBKey heap = heap_musician1		StructInt avatarindex = 1		StructQBKey name = heap_musician1		StructQBString budget = cas_budget_groups	}$		:i $CASAllocateBudgetBlock$${		StructQBKey heap = heap_musician2		StructInt avatarindex = 2		StructQBKey name = heap_musician2		StructQBString budget = cas_budget_groups	}$		:i $CASAllocateBudgetBlock$${		StructQBKey heap = heap_musician3		StructInt avatarindex = 3		StructQBKey name = heap_musician3		StructQBString budget = cas_budget_groups	}$		:i $CASAllocateBudgetBlock$${		StructQBKey heap = heap_musician4		StructInt avatarindex = 4		StructQBKey name = heap_musician4		StructQBString budget = cas_budget_groups	}$		:i $CreateAssetStorageFromBudgetBlock$${		StructQBKey name = heap_musician1		StructQBKey slopheap = heap_frag	}$		:i $CreateAssetStorageFromBudgetBlock$${		StructQBKey name = heap_musician2		StructQBKey slopheap = heap_frag	}$		:i $CreateAssetStorageFromBudgetBlock$${		StructQBKey name = heap_musician3		StructQBKey slopheap = heap_frag	}$		:i $CreateAssetStorageFromBudgetBlock$${		StructQBKey name = heap_musician4		StructQBKey slopheap = heap_frag	}$		:i $PopMemProfile$	:i $CASTemporariesSetHeap$${		StructQBKey heap = heap_cas_build		StructInt max_files = 48	}$		:i $output_status$${		StructString prefix = "ainit"		StructString text = "ArchiveInvalidateSizes"	}$		:i if NOT $cd$		:i $ArchiveInvalidateSizes$	:i endif	:i $output_status$${		StructString prefix = "ainit"		StructString text = "Band logo budget setup"	}$		:i $PushMemProfile$${StructString 0x00000000 = "CAS Logo"}$	:i $MemPushContext$${StructQBKey bottomupheap}$	:i $CASAllocateBudgetBlock$${		StructQBKey heap = bottomupheap		StructQBKey name = band_logo_block		StructQBString budget = cas_band_logo_budget	}$		:i $CreateAssetStorageFromBudgetBlock$$name$ = $band_logo_block$$slopheap$ = $bottomupheap$$assetcontext$ = (~$CAS_Band_Logo_Details$->$assetcontext$)	:i $MemPopContext$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "register_initial_character_profiles"	}$		:i $PushMemProfile$${StructString 0x00000000 = "register_initial_character_profiles"}$	:i $MemPushContext$${StructQBKey bottomupheap}$	:i $register_initial_character_profiles$${StructInt async = 1}$	:i $MemPopContext$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "reset_globaltags_all"	}$		:i $LockGlobalTags$${		StructQBKey boot		StructQBKey allow_this_script	}$		:i $PushMemProfile$${StructString 0x00000000 = "Atoms Progression Globaltags"}$	:i $SetProgressionMaxDifficulty$${StructInt difficulty = 4}$	:i $printf$${StructString 0x00000000 = "Setting GlobalTags"}$	:i $FinalProfile_Start$${StructString 0x00000000 = "reset_globaltags_all"}$	:i $reset_globaltags_all$${		StructQBKey boot		StructInt async = 1	}$		:i $FinalProfile_Stop$${StructString 0x00000000 = "reset_globaltags_all"}$	:i $printf$${StructString 0x00000000 = "Setting GlobalTags End"}$	:i $PopMemProfile$	:i $LockGlobalTags$${		StructQBKey boot		StructQBKey Off	}$		:i $create_initial_temporary_random_cars$${StructInt async = 1}$	:i $RichPresence_SetActive$${StructInt active = 1}$	:i $interlock$${		StructString prefix = "ainit"		StructQBKey lock_name = lock_globaltags	}$		:i $output_status$${		StructString prefix = "ainit"		StructString text = "UI_InitializeStateMachine"	}$		:i $PushMemProfile$${StructString 0x00000000 = "UI_InitializeStateMachine"}$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $InitStateMachineSystem$	:i $UI_InitializeStateMachine$	:i $PopMemProfile$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "savegame scanning"	}$		:i $output_status_begin$${StructString prefix = "boots"}$	:i $output_status$${		StructString prefix = "boots"		StructString text = "Memcard scan"	}$		:i $memory_create_save_heap_at_boot$	:i $change$${StructQBKey game_mode = freeplay}$	:i $interlock$${		StructQBKey wait		StructString prefix = "ainit"		StructQBKey lock_name = lock_uishared	}$		:i if $IsXenon$		:i $ui_event$${			StructQBKey event = menu_change			StructStruct Data			{				StructHeader				{					StructQBKey state = UIstate_savegame_boot_scan				}			}		}$			:i else 		:i if $DemoBuild$			:i $ui_event$${				StructQBKey event = menu_change				StructStruct Data				{					StructHeader					{						StructQBKey state = UIstate_savegame_boot_scan					}				}			}$					:i else 			:i $BeginTrophySetup$			:i while 			:i $GetTrophyInitState$			:i if (%GLOBAL%$state$ !== $initializing$)				:i continue			:i endif			:i $wait$${				StructInt 10				StructQBKey gameframes			}$						:i loop_to 			:i if (%GLOBAL%$state$ = $not_enough_space$)				:i $ui_event$$event$ = $menu_replace$$Data$ = :s{$state$ = $UIstate_trophy_warning$$device_num$ = %GLOBAL%$device_num$$freespacerequired$ = %GLOBAL%$freespacerequired$:s}			:i elseif (%GLOBAL%$state$ = $ok$)				:i $ui_event$${					StructQBKey event = menu_change					StructStruct Data					{						StructHeader						{							StructQBKey state = UIstate_savegame_boot_scan						}					}				}$							:i else 				:i $scriptassert$^[fd48a693]^$s$ = %GLOBAL%$state$			:i endif		:i endif	:i endif	:i $output_status$${		StructString prefix = "ainit"		StructString text = "create_global_materials"	}$		:i $interlock$${		StructQBKey wait		StructString prefix = "ainit"		StructQBKey lock_name = lock_materials	}$		:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $create_global_materials$${StructInt async = 1}$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $create_zone_specific_visualizer_materials$${StructInt async = 1}$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "Create in-game materials"	}$		:i $PushMemProfile$${StructString 0x00000000 = "z_in_game"}$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $create_in_game_materials$${		StructInt savegame = 0		StructInt async = 1	}$		:i $PopMemProfile$	:i $output_status$${		StructString prefix = "ainit"		StructString text = "Create multipass materials"	}$		:i $PushMemProfile$${StructString 0x00000000 = "z_in_game"}$	:i $create_multipass_materials$${StructInt async = 1}$	:i $PopMemProfile$	:i $output_status_end$${StructString prefix = "ainit"}$	:i $interlock$${		StructQBKey wait		StructString prefix = "ainit"	}$		:i endfunction]SectionInteger g_iinit_overall_start_time 0SectionInteger g_iinit_start_time 0SectionInteger g_heaps_overall_start_time 0SectionInteger g_heaps_start_time 0SectionInteger g_systm_overall_start_time 0SectionInteger g_systm_start_time 0SectionInteger g_cload_overall_start_time 0SectionInteger g_cload_start_time 0SectionInteger g_ainit_overall_start_time 0SectionInteger g_ainit_start_time 0SectionInteger g_aload_overall_start_time 0SectionInteger g_aload_start_time 0SectionInteger g_mload_overall_start_time 0SectionInteger g_mload_start_time 0SectionInteger g_mgame_overall_start_time 0SectionInteger g_mgame_start_time 0SectionInteger g_boots_overall_start_time 0SectionInteger g_boots_start_time 0SectionInteger g_movie_overall_start_time 0SectionInteger g_movie_start_time 0SectionInteger g_deflt_overall_start_time 0SectionInteger g_deflt_start_time 0SectionInteger g_overall_time -1Script get_overall_time 0x6c5505aa [	:i if (~$g_overall_time$ = %i(4294967295))		:i $GetTrueStartTime$		:i $change$$g_overall_time$ = %GLOBAL%$starttime$	:i endif	:i $GetElapsedTime$${StructQBString starttime = g_overall_time}$	:i return $OverallTime$ = %GLOBAL%$elapsedtime$	:i endfunction]Script output_status_text 0x5eeedd74 [	${StructString prefix = "default"}$	:i $finalprintf$ isNull 	:i $printf$$channel$ = $guitar_startup$ isNull 	:i $FormatText$$checksumname$ = $channel$%s("guitar_startup_%a")$a$ = %GLOBAL%$prefix$	:i $printf$ isNull 	:i endfunction]Script get_output_var_names 0x82b3ca32 [	${StructString prefix = "default"}$	:i $FormatText$$checksumname$ = $overall_start_time$%s("g_%a_overall_start_time")$a$ = %GLOBAL%$prefix$	:i $FormatText$$checksumname$ = $start_time$%s("g_%a_start_time")$a$ = %GLOBAL%$prefix$	:i $get_overall_time$	:i return $overall_start_time$ = %GLOBAL%$overall_start_time$$start_time$ = %GLOBAL%$start_time$$OverallTime$ = %GLOBAL%$OverallTime$	:i endfunction]Script output_time_taken 0x5a8a0cfe [	${StructString prefix = "default"}$	:i $get_output_var_names$$prefix$ = %GLOBAL%$prefix$	:i if NOT (~%GLOBAL%$start_time$ = %i(0))		:i $elapsedtime$ = (%GLOBAL%$starttime$ - ~%GLOBAL%$start_time$)		:i $output_status_text$$prefix$ = %GLOBAL%$prefix$%s("(%o)---guitar_startup_%s---> Time taken: %ams")$s$ = %GLOBAL%$prefix$$a$ = %GLOBAL%$elapsedtime$$o$ = %GLOBAL%$OverallTime$	:i endif	:i $change$$globalname$ = %GLOBAL%$start_time$$newValue$ = %GLOBAL%$starttime$	:i endfunction]Script output_status_begin b997e435 [	${StructString prefix = "default"}$	:i $get_output_var_names$$prefix$ = %GLOBAL%$prefix$	:i $GetTrueStartTime$	:i $change$$globalname$ = %GLOBAL%$overall_start_time$$newValue$ = %GLOBAL%$starttime$	:i $change$$globalname$ = %GLOBAL%$start_time$$newValue$ = %i(0)	:i endfunction]Script output_status de28af7f [	${		StructString prefix = "default"		StructString text = "???????????????"	}$		:i $get_output_var_names$$prefix$ = %GLOBAL%$prefix$	:i $GetTrueStartTime$	:i $output_time_taken$$prefix$ = %GLOBAL%$prefix$$starttime$ = %GLOBAL%$starttime$$OverallTime$ = %GLOBAL%$OverallTime$	:i $output_status_text$$prefix$ = %GLOBAL%$prefix$%s("(%o)---guitar_startup_%s---> %t")$s$ = %GLOBAL%$prefix$$t$ = %GLOBAL%$text$$o$ = %GLOBAL%$OverallTime$	:i endfunction]Script output_status_end 0x9bfc2493 [	${StructString prefix = "default"}$	:i $get_output_var_names$$prefix$ = %GLOBAL%$prefix$	:i $GetTrueStartTime$	:i $output_time_taken$$prefix$ = %GLOBAL%$prefix$$starttime$ = %GLOBAL%$starttime$$OverallTime$ = %GLOBAL%$OverallTime$	:i $elapsedtime$ = (%GLOBAL%$starttime$ - ~%GLOBAL%$overall_start_time$)	:i $output_status_text$$prefix$ = %GLOBAL%$prefix$%s("(%o)---guitar_startup_%s---> Overall time taken: %ams")$s$ = %GLOBAL%$prefix$$a$ = %GLOBAL%$elapsedtime$$o$ = %GLOBAL%$OverallTime$	:i endfunction]SectionInteger lock_default 0SectionInteger lock_freeplay 0SectionInteger lock_materials 0SectionInteger lock_savegame 0SectionInteger lock_globaltags 0SectionInteger lock_uishared 0Script interlock c2dbf2f4 [	${		StructQBKey lock_name = lock_default		StructString prefix = "default"	}$		:i if $GotParam$${StructQBKey wait}$		:i $GetTrueStartTime$	:i endif	:i $change$$globalname$ = %GLOBAL%$lock_name$$newValue$ = (%i(1) - ~%GLOBAL%$lock_name$)	:i if $GotParam$${StructQBKey wait}$		:i while 		:i if (~%GLOBAL%$lock_name$ = %i(0))			:i continue		:i endif		:i $wait$${			StructInt 1			StructQBKey gameframe		}$				:i loop_to 		:i $GetElapsedTime$$starttime$ = %GLOBAL%$starttime$		:i $output_status_text$$prefix$ = %GLOBAL%$prefix$%s("---guitar_startup_%s---> Interlock %l took %ams")$s$ = %GLOBAL%$prefix$$l$ = %GLOBAL%$lock_name$$a$ = %GLOBAL%$elapsedtime$	:i endif	:i endfunction]Script check_localized_string_length 0x7be49bf1 [	${Unknown [0001280061414d56696969690000001800012400f3f3c7146969696900000000]}$	:i $StringLength$$string$ = %GLOBAL%$string$	:i if (%GLOBAL%$str_len$ !== %GLOBAL%$len$)		:i $scriptassert$%s("Localized string length mismatch: '%s' size is %a but should be %b")$s$ = %GLOBAL%$string$$a$ = %GLOBAL%$str_len$$b$ = %GLOBAL%$len$	:i endif	:i endfunction]