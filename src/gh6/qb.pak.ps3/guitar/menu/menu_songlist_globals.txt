Unknown [1c00000000000000000022340000000000000000]SectionArray OnlineBetaSongs{	ArrayQBKey	[		AreYouGonnaGoMyWay		NeverTooLate		whativedone	]}SectionQBKey tie_breaker HOSTSectionQBKey num_songs num_1SectionInteger net_song_countdown 0SectionInteger g_songlist_page_size 0SectionInteger g_num_local_song_picks 0SectionInteger g_songlist_warning_active 0SectionQBKeyStringQs g_online_songlist_warning_msg_ps3 0x67bd4b60SectionQBKeyStringQs g_online_songlist_warning_msg_xen 0x9a494cedSectionQBKeyStringQs g_online_songlist_warning_title 0x29815eaeSectionQBKeyStringQs g_online_career_sl_warning_title d8b58345SectionQBKeyStringQs g_songlist_all_vocalists_warning 0x2bb4f3eaSectionInteger g_show_online_songlist_warning 1SectionQBKey current_songlist_song_preview NoneSectionInteger songlist_song_preview_changing 0SectionQBKey target_songlist_song_preview NoneSectionStruct g_songlist_modes{	StructHeader	{		StructStruct play_song		{			StructHeader			{				StructQBStringQs Title = ae6cf896			}		}		StructStruct playlist		{			StructHeader			{				StructQBStringQs Title = ae6cf896			}		}		StructStruct music_store		{			StructHeader			{				StructQBStringQs Title = a8e9637f			}		}		StructStruct leaderboard		{			StructHeader			{				StructQBStringQs Title = 0x4d9ad28f			}		}		StructStruct practice		{			StructHeader			{				StructQBStringQs Title = 0x4d9ad28f			}		}		StructStruct sing_a_long		{			StructHeader			{				StructQBStringQs Title = ae6cf896			}		}	}}SectionStruct g_songlist_headers{	StructHeader	{		StructArray alphabetical		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x14ca3e50					StructQBStringQs header_text_override = 0x5a1a0634					StructQBStringQs seek_first = 0x00000000				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x0dd10f11				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x26fc5cd2				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x3fe76d93				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x70a6fb54				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x69bdca15				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x429099d6				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x5b8ba897				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = dc13b458				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = c5088519				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = ee25d6da				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = f73ee79b				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = b87f715c				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = a164401d				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x8a4913de				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x9352229f				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x5e082c01				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x47131d40				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x6c3e4e83				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x75257fc2				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x3a64e905				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x237fd844				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x08528b87				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x1149bac6				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x96d1a609				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x8fca9748				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = a4e7c48b				}						]		}		StructArray year		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = d64b998d					StructInt lower = 0					StructInt upper = 1969				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x2dc50a72					StructInt lower = 1970					StructInt upper = 1979				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = f4e518de					StructInt lower = 1980					StructInt upper = 1989				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x384f1840					StructInt lower = 1990					StructInt upper = 1999				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = ac8bfa51					StructInt lower = 2000					StructInt upper = 2009				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = ea450327					StructInt lower = 2010					StructInt upper = 100000				}						]		}		StructArray duration		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x379b2d4d					StructInt lower = 0					StructInt upper = 179				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = f8567aa9					StructInt lower = 180					StructInt upper = 239				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x85d2f756					StructInt lower = 240					StructInt upper = 299				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = a2c5c5ae					StructInt lower = 300					StructInt upper = 479				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x48250d4c					StructInt lower = 480					StructInt upper = 10000				}						]		}		StructArray intensity		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = f9ea216e					StructInt lower = 0					StructInt upper = 2				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x1f331fb3					StructInt lower = 3					StructInt upper = 4				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x349f4418					StructInt lower = 5					StructInt upper = 6				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x31fce503					StructInt lower = 7					StructInt upper = 8				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = c4cad56c					StructInt lower = 9					StructInt upper = 10				}				StructHeader				{					StructInt header = 1					StructQBString header_text = content_source_ghtunes_artist_string					StructInt lower = 11					StructInt upper = 11				}						]		}		StructArray popularity		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x90b664dc					StructFloat percentage = 0.3400000035762787				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x5b6fd934					StructFloat percentage = 0.33000001311302185				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x86ec4c46					StructFloat percentage = 0.33000001311302185				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x301d7ebc				}				StructHeader				{					StructInt header = 1					StructQBString header_text = content_source_ghtunes_artist_string				}						]		}		StructArray stars		{			ArrayStruct			[				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x246daaef					StructInt lower = -1000					StructInt upper = -51				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x218378fd					StructInt lower = -50					StructInt upper = -41				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = fcf2b558					StructInt lower = -40					StructInt upper = -31				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = fc2a6c97					StructInt lower = -30					StructInt upper = -21				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = 0x38f72e29					StructInt lower = -20					StructInt upper = -11				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = b6f59bad					StructInt lower = -10					StructInt upper = -1				}				StructHeader				{					StructInt header = 1					StructQBStringQs header_text = e1162588					StructInt lower = 0					StructInt upper = 0				}				StructHeader				{					StructInt header = 1					StructQBString header_text = content_source_ghtunes_artist_string					StructInt lower = 1					StructInt upper = 1				}						]		}		StructArray genre		{			Floats [0.00000, 0.00000]		}		StructArray source		{			Floats [0.00000, 0.00000]		}	}}SectionArray g_songlist_sort_array{	ArrayStruct	[		StructHeader		{			StructQBKey key = song_sort_title			StructQBStringQs text = a8443859			StructQBKey progression = ascending			StructQBKey alt_key = song_artist			StructQBKey header_type = alphabetical			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_artist			StructQBStringQs text = 0x16ace3e7			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = alphabetical			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_year			StructQBStringQs text = 0x2404532a			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = year			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_genre_string			StructQBStringQs text = d83650ac			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = genre			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_num_times_played			StructQBStringQs text = b2197352			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = popularity			StructQBKey visibility = songlist_only			StructQBKey extra_boolean_script = allow_popularity_sort_option		}		StructHeader		{			StructQBKey key = song_source_txt			StructQBStringQs text = f851f58c			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = source			StructQBKey visibility = songlist_only		}		StructHeader		{			StructQBKey key = song_stars			StructQBStringQs text = abac4789			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = stars			StructQBKey visibility = songlist_only			StructQBKey extra_boolean_script = allow_stars_sort_option		}		StructHeader		{			StructQBKey key = song_guitar_difficulty_rating			StructQBStringQs text = ddd03b6f			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = intensity			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_bass_difficulty_rating			StructQBStringQs text = f5464675			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = intensity			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_drums_difficulty_rating			StructQBStringQs text = 0x1ab278e5			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = intensity			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_vocals_difficulty_rating			StructQBStringQs text = 0x45116eda			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = intensity			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = song_duration			StructQBStringQs text = bf2d8f52			StructQBKey progression = ascending			StructQBKey alt_key = song_sort_title			StructQBKey header_type = duration			StructQBKey visibility = always		}		StructHeader		{			StructQBKey key = type_string			StructQBStringQs text = 0x26333077			StructQBKey progression = ascending			StructQBKey alt_key = song_title			StructQBKey header_type = null			StructQBKey visibility = never		}		]}SectionStruct g_songlist_sort_indexes{	StructHeader	{		StructInt play_song = 5		StructInt playlist = 5		StructInt music_store = 0		StructInt leaderboard = 5		StructInt practice = 5		StructInt sing_a_long = 5	}}SectionInteger g_songlist_sort_index 5SectionInteger g_songlist_force_num_songs_to_choose 0SectionQBKey g_songlist_current_pivot nullSectionQBKey g_songlist_seek_first nullSectionInteger g_songlist_mini_playlist_detail_items 5SectionInteger g_max_playlist_size 128SectionArray current_playlist{	Floats [0.00000, 0.00000]}SectionInteger g_include_debug_songs 0SectionInteger g_on_disc_only 0SectionFloat g_songlist_scroll_speed 0.0800000SectionFloat g_songlist_paging_speed 0.0400000SectionInteger g_songlist_num_songs_required_for_headers 10SectionFloat g_songlist_detail_fade_time 0.200000SectionFloatsX2 g_songlist_music_store_hilight_pos{	Floats [182.000, 180.000]}SectionInteger g_songlist_debug_output 0SectionInteger g_songlist_requires_unblock 0SectionInteger g_songlist_playlist_size 0SectionInteger g_songlist_beginning_playlist_size 0SectionInteger g_songlist_infinite_playlist 0SectionInteger g_songlist_random_playlist 0SectionInteger g_songlist_num_5star_songs 0SectionArray g_songlist_item_focus_rgba{	ArrayInteger	[		249		243		190		255	]}SectionArray g_songlist_item_unfocus_rgba{	ArrayInteger	[		205		185		123		255	]}SectionArray g_songlist_sub_item_focus_rgba{	ArrayInteger	[		249		243		190		255	]}SectionArray g_songlist_sub_item_unfocus_rgba{	ArrayInteger	[		150		130		75		200	]}SectionArray g_songlist_invalid_item_focus_rgba{	ArrayInteger	[		0		0		0		255	]}SectionArray g_songlist_invalid_item_unfocus_rgba{	ArrayInteger	[		170		149		83		80	]}SectionArray g_songlist_invalid_sub_item_focus_rgba{	ArrayInteger	[		0		0		0		255	]}SectionArray g_songlist_invalid_sub_item_unfocus_rgba{	ArrayInteger	[		170		149		83		80	]}SectionArray g_music_store_item_focus_rgba{	ArrayInteger	[		249		243		190		255	]}SectionArray g_music_store_item_unfocus_rgba{	ArrayInteger	[		205		185		123		255	]}SectionArray g_music_store_sub_item_focus_rgba{	ArrayInteger	[		249		243		190		255	]}SectionArray g_music_store_sub_item_unfocus_rgba{	ArrayInteger	[		150		130		75		200	]}SectionInteger g_music_store_viewing_pack_songs 0SectionQBKey g_songlist_targeted_song nullSectionInteger g_songlist_force_to_challenges 0SectionQBKeyStringQs g_music_store_patch_req_message 0x9f54765dSectionInteger g_music_store_truncate_track_pack_title_length 35Script songlist_get_mode 0x2baf7675 [	:i $songlist_component$.$MembFunc_Songlist_UIStack_GetMode$	:i return $mode$ = %GLOBAL%$mode$	:i endfunction]Script songlist_change_sort_index f6ee7ac5 [	${Unknown [000124007f8c98fe6969696900000000]}$	:i $change$$g_songlist_sort_index$ = %GLOBAL%$index$	:i endfunction]Script songlist_change_sort_by_key 0x67a505c4 [	${Unknown [00012600756f54566969696900000000]}$	:i $GetArraySize$${StructQBString g_songlist_sort_array}$	:i %GLOBAL%$i$ = %i(0)	:i while 	:i if (((~$g_songlist_sort_array$):a{%GLOBAL%$i$:a}->$key$) = %GLOBAL%$key$)		:i $change$$g_songlist_sort_index$ = %GLOBAL%$i$		:i return 	:i endif	:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))	:i loop_to %GLOBAL%$array_size$	:i $scriptassert$${StructQBStringQs 0x25cfff5e}$	:i endfunction]Script songlist_set_mode_sort_index 0x7e264f97 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				mode			]		}		StructQBKey all	}$		:i switch (%GLOBAL%$mode$)		:i case $play_song$			:i $change$$structurename$ = $g_songlist_sort_indexes$$play_song$ = (~$g_songlist_sort_index$)			:i $change$$structurename$ = $g_songlist_sort_indexes$$playlist$ = (~$g_songlist_sort_index$)			:i endcase		case $playlist$			:i $change$$structurename$ = $g_songlist_sort_indexes$$playlist$ = (~$g_songlist_sort_index$)			:i $change$$structurename$ = $g_songlist_sort_indexes$$play_song$ = (~$g_songlist_sort_index$)			:i endcase		case $music_store$			:i $change$$structurename$ = $g_songlist_sort_indexes$$music_store$ = (~$g_songlist_sort_index$)			:i endcase		case $leaderboard$			:i $change$$structurename$ = $g_songlist_sort_indexes$$leaderboard$ = (~$g_songlist_sort_index$)			:i endcase		case $practice$			:i $change$$structurename$ = $g_songlist_sort_indexes$$practice$ = (~$g_songlist_sort_index$)	:i end_switch	:i endfunction]Script songlist_get_header_array 0x9b97befc [	${Unknown [00012600e38d0eea6969696900000000]}$	:i %GLOBAL%$header_type$ = ((~$g_songlist_sort_array$:a{(~$g_songlist_sort_index$):a})->$header_type$)	:i switch %GLOBAL%$header_type$		:i case $genre$			:i endcase		case $source$			:i endcase		case $null$			:i return $header_type$ = %GLOBAL%$header_type$			:i endcase		default 			:i return $header_array$ = ((~$g_songlist_headers$)->%GLOBAL%$header_type$)$header_type$ = %GLOBAL%$header_type$	:i end_switch	:i endfunction]Script songlist_set_header_array dcc11523 [	${Unknown [00012600dea5d25b696969690000001800012c00cd576aaf6969696900000000]}$	:i $UpdateStructElement$:s{		:i $struct$ = ~$g_songlist_headers$		:i $element$ = %GLOBAL%$header_type$		:i $value$ = %GLOBAL%$header_array$	:i :s}	:i $change$$g_songlist_headers$ = %GLOBAL%$newstruct$	:i endfunction]Script songlist_get_sort_key 0x2c15f01c [	:i %GLOBAL%$sort_key$ = ((~$g_songlist_sort_array$:a{(~$g_songlist_sort_index$):a})->$key$)	:i return $sort_key$ = %GLOBAL%$sort_key$	:i endfunction]Script songlist_change_filterspec b1937eae [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				filterspec			]		}		StructQBKey all	}$		:i if $ScreenElementExists$${StructQBKey id = songlist_component}$		:i if $GotParam$${StructQBKey invert_filterspec}$			:i $songlist_component$.$MembFunc_Songlist_UIStack_SetFilterspec$$filterspec$ = %GLOBAL%$filterspec$$invert_filterspec$ = %i(1)		:i else 			:i $songlist_component$.$MembFunc_Songlist_UIStack_SetFilterspec$$filterspec$ = %GLOBAL%$filterspec$		:i endif	:i endif	:i endfunction]Script songlist_clear_filterspec 0x4e48ec23 [	:i if $ScreenElementExists$${StructQBKey id = songlist_component}$		:i $songlist_component$.$MembFunc_Songlist_UIStack_SetFilterspec$${			StructArray filterspec			{				Floats [0.00000, 0.00000]			}		}$			:i endif	:i endfunction]Script songlist_force_num_songs_to_choose 0x943cb6c0 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				num_songs			]		}		StructQBKey all	}$		:i $change$$g_songlist_force_num_songs_to_choose$ = %GLOBAL%$num_songs$	:i endfunction]Script songlist_dont_force_num_songs 0x4c204de1 [	:i $change$${StructInt g_songlist_force_num_songs_to_choose = 0}$	:i endfunction]Script is_a_playlist_loaded 0x24b79847 [	:i $GetArraySize$${StructQBString current_playlist}$	:i if (%GLOBAL%$array_size$ > %i(0))		:i return $true$$size$ = %GLOBAL%$array_size$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script is_current_playlist_empty a971a0ad [	:i if $is_a_playlist_loaded$		:i return ${StructQBKey false}$	:i else 		:i return ${StructQBKey true}$	:i endif	:i endfunction]Script allow_songlist_options_writes f0e3621e [	:i $gamemode_gettype$	:i if (%GLOBAL%$type$ = $freeplay$)		:i return ${StructQBKey false}$	:i endif	:i $band_lobby_get_is_guest$$device_num$ = (~$g_gbm_savegame_device$)	:i if (($IsLocallySignedIn$$controller$ = ~$g_gbm_savegame_device$) AND (%GLOBAL%$is_guest$ = %i(0)))		:i $get_savegame_from_controller$$controller$ = (~$g_gbm_savegame_device$)		:i if $get_savegame_has_saved_game$$savegame$ = %GLOBAL%$savegame$			:i if $is_autosave_on$$savegame$ = %GLOBAL%$savegame$				:i return ${StructQBKey true}$			:i endif		:i endif	:i endif	:i return ${StructQBKey false}$	:i endfunction]