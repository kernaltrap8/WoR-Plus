Unknown [1c00000000000000000027fc0000000000000000]SectionArray mic_binding_status_windows{	ArrayQBKey	[		alias_status_1		alias_status_2		alias_status_3		alias_status_4	]}SectionStruct mic_binding_text{	StructHeader	{		StructQBStringQs choose_controller_title = 0x74acfbac		StructQBStringQs choose_controller = 0x74f5e6e0		StructQBStringQs choose_controller_guest = 0x5ca0998b		StructQBStringQs choose_controller_ps3 = fb5f65f0		StructQBStringQs bind_mic = c330f74f		StructQBStringQs sing_title = 0x5f81a86f		StructQBStringQs sing = 0x8804a0cf		StructQBStringQs chosen_headset = e15f3ac4		StructQBStringQs chosen_mic = 0x90c220f8		StructQBStringQs confirm_title = fcc1ea3b		StructQBStringQs confirm_text_headset = f532d055		StructQBStringQs confirm_text_mic = c601ef28		StructQBStringQs confirm_text_default = 0x3009ed04		StructQBStringQs mic = c0b34c9f		StructQBStringQs headset = 0x089aeca5		StructQBStringQs yes = 0x58e0a1fb		StructQBStringQs no = d2915c27		StructQBStringQs continue = 0x182f0173		StructQBStringQs done = 0x3fc1c076		StructQBStringQs ok = 0x0e41fe46		StructQBStringQs retry = 0x5d8b66a0		StructQBStringQs button_select = c18d5e76		StructQBStringQs button_back = af4d5dd2		StructQBStringQs binding = 0x984a2e6d		StructQBStringQs Waiting = 0x177b26f0		StructQBStringQs binding_complete = e6ceea62		StructQBStringQs error = 0x79597197		StructQBStringQs error_no_mics_ps3 = 0x57bd9c45		StructQBStringQs invalid_mic = 0x23980f0d		StructQBStringQs invalid_mic_text = 0x1399d3f6		StructQBStringQs no_valid_mics = 0x2fd9323b		StructQBStringQs no_valid_mics_text = 0x7032d244	}}SectionInteger mic_binding_mic0 -1SectionInteger mic_binding_mic1 -1SectionInteger mic_binding_mic2 -1SectionInteger mic_binding_mic3 -1SectionFloat mic_binding_noise_gate 0.0200000SectionInteger mic_binding_curr_player 0SectionQBKey mic_binding_chosen_mic_type NoneScript ui_create_mic_binding 0x2c035217 [	${StructInt from_pause_menu = 0}$	:i $change$${StructInt mic_binding_mic0 = -1}$	:i $change$${StructInt mic_binding_mic1 = -1}$	:i $change$${StructInt mic_binding_mic2 = -1}$	:i $change$${StructInt mic_binding_mic3 = -1}$	:i %GLOBAL%$root_id$ = $hud_mic_binding$	:i $CreateScreenElement$${		StructQBKey type = descinterface		StructString desc = "mic_binding"		StructQBKey id = hud_mic_binding		StructQBKey parent = root_window		StructFloatX2 Pos		{			Floats [0.00000, 0.00000]		}		StructInt z_priority = 200	}$		:i if $hud_mic_binding$.$desc_resolvealias$${			StructQBKey name = alias_mic_menu			StructQBKey param = mic_menu_id		}$				:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{			:i $event_handlers$ = :a{				:i :s{$menu_selection_changed$$UI_SFX$$params$ = :s{$menustate$ = $generic$$uitype$ = $ScrollUp$:s}:s}			:i :a}		:i :s}	:i endif	:i if $GotParam$${StructQBKey controller}$		:i $hud_mic_binding$.$se_setprops$$exclusive_device$ = %GLOBAL%$controller$	:i endif	:i %GLOBAL%$root_id$.$se_setprops$:s{		:i $event_handlers$ = :a{			:i :s{$pad_back$$mic_binding_end$:s}		:i :a}	:i :s}	:i $mic_binding_update_button_helpers$	:i $vocals_deinit_all_mics$	:i $mic_binding_setup_all_status_windows$	:i $vocals_distribute_mics$	:i $mic_binding_initialize_mics$	:i $spawnscriptnow$${		StructQBKey mic_binding_update_mic_icons		StructQBKey id = mic_binding	}$		:i $LaunchEvent$${		StructQBKey type = focus		StructQBKey target = hud_mic_binding	}$		:i $hud_mic_binding$.$obj_spawnscriptnow$${StructQBKey mic_binding_start_flow}$	:i endfunction]Script mic_binding_initialize_mics c916c5cc [	:i $Vocals_GetAvailableMics$	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i if $IsPS3$		:i if (%GLOBAL%$available_mics$ = %i(0))			:i $mic_binding_error_no_mics$			:i return 		:i endif	:i endif	:i $mic_array$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $mic_binding_reset_mic_globals$	:i $mics_activated$ = %i(0)	:i $mic_index$ = %i(0)	:i $GetFirstPlayer$${StructQBKey on_screen}$	:i while 	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $getplayerinfo$%GLOBAL%$player$$mic_type$			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i if NOT (%GLOBAL%$mic_type$ = $headset$ OR %GLOBAL%$mic_type$ = $None$)				:i $mic_binding_init_mic$$controller$ = %GLOBAL%$controller$$mic_type$ = %GLOBAL%$mic_type$$noise_gate$ = (~$mic_binding_noise_gate$)				:i $mics_activated$ = (%GLOBAL%$mics_activated$ + %i(1))			:i endif		:i endif	:i endif	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players_shown$	:i if (%GLOBAL%$mics_activated$ < %GLOBAL%$available_mics$)		:i $num_remaining$ = (%GLOBAL%$available_mics$ - %GLOBAL%$mics_activated$)		:i $controller_index$ = %i(0)		:i while 		:i if NOT $mic_binding_controller_used$$controller$ = %GLOBAL%$controller_index$			:i $mic_binding_init_mic$$controller$ = %GLOBAL%$controller_index$$mic_type$ = $first_free_mic$$noise_gate$ = (~$mic_binding_noise_gate$)			:i $mics_activated$ = (%GLOBAL%$mics_activated$ + %i(1))			:i if (%GLOBAL%$mics_activated$ = %GLOBAL%$available_mics$)				:i continue			:i endif		:i endif		:i $controller_index$ = (%GLOBAL%$controller_index$ + %i(1))		:i loop_to %i(4)	:i endif	:i endfunction]Script mic_binding_error_no_mics 0x726bb8d3 [	:i return 	:i if NOT $IsPS3$		:i return 	:i endif	:i $hud_mic_binding$.$se_setprops$:s{		:i $main_title_text$ = (~$mic_binding_text$->$error$)		:i $main_text$ = (~$mic_binding_text$->$error_no_mics_ps3$)	:i :s}	:i $mic_binding_setup_menu$${StructInt player = -1}$	:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$ok$)$choose_script$ = $mic_binding_end$$choose_params$ = :s{$player$ = %GLOBAL%$player$$play_sound$ = %i(0):s}	:i if $hud_mic_binding$.$desc_resolvealias$${			StructQBKey name = alias_mic_menu			StructQBKey param = mic_menu_id		}$				:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{			:i $event_handlers$ = :a{				:i :s{$pad_up$$NullScript$:s}				:i :s{$pad_down$$NullScript$:s}			:i :a}			:i $replace_handlers$		:i :s}	:i endif	:i endfunction]Script mic_binding_update_button_helpers 0x7349f448 [	:i $clean_up_user_control_helpers$	:i $add_user_control_helper$$text$ = (~$mic_binding_text$->$button_select$)$button$ = $green$$z$ = %i(100000)	:i $add_user_control_helper$$text$ = (~$mic_binding_text$->$button_back$)$button$ = $red$$z$ = %i(100000)	:i endfunction]Script mic_binding_controller_used f35e5cbb [	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i $GetFirstPlayer$${StructQBKey on_screen}$	:i while 	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i if $playerinfoequals$%GLOBAL%$player$$controller$ = %GLOBAL%$controller$			:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $headset$				:i return ${StructQBKey true}$			:i endif			:i continue		:i endif	:i endif	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players_shown$	:i $index$ = %i(0)	:i while 	:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})	:i if (~%GLOBAL%$mic_global$ = %GLOBAL%$controller$)		:i return ${StructQBKey true}$	:i endif	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i return ${StructQBKey false}$	:i endfunction]Script mic_binding_update_mic_icons 0x597bbc3c [	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i while 	:i $GetFirstPlayer$${StructQBKey on_screen}$	:i while 	:i if (%GLOBAL%$player$ = %i(4294967295))		:i continue	:i endif	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i $Vocals_GetMicAmplitude$$controller$ = %GLOBAL%$controller$			:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$			:i if (%GLOBAL%$amplitude$ > %f(0.0500000))				:i %GLOBAL%$status_id$.$se_setprops$$mic_rgba$ = :a{%i(255)%i(0)%i(0)%i(255):a}			:i else 				:i %GLOBAL%$status_id$.$se_setprops$$mic_rgba$ = :a{%i(255)%i(255)%i(255)%i(255):a}			:i endif		:i endif	:i endif	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players_shown$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i endfunction]Script ui_destroy_mic_binding 0x8ac9dc30 [	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $mic_types$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $index$ = %i(0)	:i while 	:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})	:i if (~%GLOBAL%$mic_global$ !== %i(4294967295))		:i $mic_binding_deinit_mic$$controller$ = (~%GLOBAL%$mic_global$)$mic_type$ = (%GLOBAL%$mic_types$:a{%GLOBAL%$index$:a})	:i endif	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i $DestroyScreenElement$${StructQBKey id = hud_mic_binding}$	:i $KillSpawnedScript$${StructQBKey id = mic_binding}$	:i $KillSpawnedScript$${StructQBKey id = amp_check}$	:i endfunction]Script mic_binding_setup_all_status_windows 0x052df154 [	:i $status_index$ = %i(1)	:i while 	:i $mic_binding_disable_status_window$$player$ = %GLOBAL%$status_index$	:i %GLOBAL%$status_index$ = (%GLOBAL%$status_index$ + %i(1))	:i loop_to %i(4)	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i $GetFirstPlayer$${StructQBKey on_screen}$	:i while 	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i $getplayerinfo$%GLOBAL%$player$$part$		:i if (%GLOBAL%$part$ = $Vocals$)			:i $mic_binding_setup_status_window$$player$ = %GLOBAL%$player$		:i endif	:i endif	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players_shown$	:i endfunction]Script mic_binding_get_status_id fceafb62 [	:i $player_index$ = (%GLOBAL%$player$%i(4294967295))	:i $hud_mic_binding$.$desc_resolvealias$$name$ = (~$mic_binding_status_windows$:a{%GLOBAL%$player_index$:a})$param$ = $status_id$	:i return $status_id$ = %GLOBAL%$status_id$	:i endfunction]Script mic_binding_animate_status 0x184cc2d5 [	:i while 	:i $se_setprops$${		StructFloat alpha = 0.3500000238418579		StructInt Scale = 1		StructFloat time = 0.5	}$		:i $wait$${		StructFloat 0.5		StructQBKey seconds	}$		:i $se_setprops$${		StructInt alpha = 1		StructFloat Scale = 1.0099999904632568		StructFloat time = 0.5	}$		:i $wait$${		StructFloat 0.5		StructQBKey seconds	}$		:i loop_to 	:i endfunction]Script mic_binding_setup_status_window f52a5f0a [	:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$	:i $getplayerinfo$%GLOBAL%$player$$mic_preference$	:i if (%GLOBAL%$mic_preference$ = $headset$)		:i $headset_alpha$ = %i(1)		:i $mic_alpha$ = %i(0)	:i elseif (%GLOBAL%$mic_preference$ = $None$ OR %GLOBAL%$mic_preference$ = $invalid$)		:i $headset_alpha$ = %i(0)		:i $mic_alpha$ = %i(0)	:i else 		:i $headset_alpha$ = %i(0)		:i $getplayerinfo$%GLOBAL%$player$$mic_type$		:i if NOT (%GLOBAL%$mic_type$ = $None$)			:i $mic_alpha$ = %i(1)		:i endif	:i endif	:i if (~$mic_binding_curr_player$ = %GLOBAL%$player$)		:i $highlight_alpha$ = %i(1)		:i $new_status_text$ = (~$mic_binding_text$->$binding$)	:i else 		:i $highlight_alpha$ = %i(0)		:i $new_status_text$ = (~$mic_binding_text$->$Waiting$)	:i endif	:i if $GotParam$${StructQBKey status_text}$		:i $new_status_text$ = %GLOBAL%$status_text$	:i endif	:i $getplayerinfo$%GLOBAL%$player$$controller$	:i $get_controller_or_gamertag_text_name$$controller$ = %GLOBAL%$controller$	:i $playername_text$ = %GLOBAL%$controller_text$	:i %GLOBAL%$status_id$.$se_setprops$:s{		:i $alpha$ = %f(1.0)		:i $player_text$ = %GLOBAL%$playername_text$		:i $tags$ = :s{$state$ = $in$:s}		:i $exclusive_device$ = %GLOBAL%$controller$		:i $headset_alpha$ = %GLOBAL%$headset_alpha$		:i $mic_alpha$ = %GLOBAL%$mic_alpha$		:i $status_text$ = %GLOBAL%$new_status_text$		:i $event_handlers$ = :a{			:i :s{$pad_back$$mic_binding_end$$params$ = :s{$player$ = %GLOBAL%$player$:s}:s}		:i :a}	:i :s}	:i %GLOBAL%$status_id$.$desc_resolvealias$$name$ = $alias_focus_highlight$$param$ = $highlight_id$	:i %GLOBAL%$highlight_id$.$obj_killspawnedscript$$id$ = $animate_status$	:i %GLOBAL%$highlight_id$.$se_setprops$:s{		:i $alpha$ = %GLOBAL%$highlight_alpha$	:i :s}	:i if (%GLOBAL%$highlight_alpha$ = %f(1.0))		:i %GLOBAL%$highlight_id$.$obj_spawnscript$$mic_binding_animate_status$$id$ = $animate_status$	:i endif	:i $LaunchEvent$$type$ = $focus$$target$ = %GLOBAL%$status_id$	:i endfunction]Script mic_binding_disable_status_window 0x6ae65b4a [	:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$	:i %GLOBAL%$status_id$.$se_setprops$:s{		:i $alpha$ = %f(0.3000000)		:i $player_text$ = ^[00000000]^		:i $headset_alpha$ = %i(0)		:i $mic_alpha$ = %i(0)		:i $status_text$ = ^[00000000]^		:i $replace_handlers$	:i :s}	:i endfunction]Script mic_binding_join_in 0x37f4de7a [	:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$	:i %GLOBAL%$status_id$.$se_setprops$:s{		:i $alpha$ = %f(1.0)		:i $tags$ = :s{$state$ = $in$:s}		:i $replace_handlers$		:i $event_handlers$ = :a{			:i :s{$pad_back$$mic_binding_drop_out$$params$ = :s{$player$ = %GLOBAL%$player$:s}:s}		:i :a}	:i :s}	:i endfunction]Script mic_binding_drop_out b509669c [	:i $UI_SFX$${		StructQBKey menustate = generic		StructQBKey uitype = back	}$		:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$	:i %GLOBAL%$status_id$.$se_setprops$:s{		:i $alpha$ = %f(0.5)		:i $tags$ = :s{$state$ = $out$:s}		:i $replace_handlers$		:i $event_handlers$ = :a{			:i :s{$pad_back$$mic_binding_end$:s}		:i :a}	:i :s}	:i endfunction]Script mic_binding_add_menu_element 0x6fca54db [	:i $hud_mic_binding$.$desc_resolvealias$${		StructQBKey name = alias_mic_menu		StructQBKey param = mic_menu_id	}$		:i if $IsPS3$		:i $icon$ = $mixer_icon_vox$	:i endif	:i if $GotParam$${StructQBKey not_focusable}$		:i $CreateScreenElement$:s{			:i $type$ = $descinterface$			:i $desc$ = %s("mic_binding_selection")			:i $parent$ = %GLOBAL%$mic_menu_id$			:i $text_text$ = %GLOBAL%$text$			:i $icon_texture$ = %GLOBAL%$icon$			:i $icon_alpha$ = %GLOBAL%$icon_alpha$			:i $not_focusable$			:i $alpha$ = %f(0.3000000)			:i $autosizedims$ = $true$			:i $event_handlers$ = :a{				:i :s{$pad_choose$%GLOBAL%$choose_script$$params$ = %GLOBAL%$choose_params$:s}				:i :s{$pad_choose$$UI_SFX$$params$ = :s{$menustate$ = $generic$$uitype$ = $select$:s}:s}				:i :s{$focus$$mic_binding_focus$:s}				:i :s{$unfocus$$mic_binding_unfocus$:s}			:i :a}		:i :s}	:i else 		:i $CreateScreenElement$:s{			:i $type$ = $descinterface$			:i $desc$ = %s("mic_binding_selection")			:i $parent$ = %GLOBAL%$mic_menu_id$			:i $text_text$ = %GLOBAL%$text$			:i $icon_texture$ = %GLOBAL%$icon$			:i $icon_alpha$ = %GLOBAL%$icon_alpha$			:i $autosizedims$ = $true$			:i $event_handlers$ = :a{				:i :s{$pad_choose$%GLOBAL%$choose_script$$params$ = %GLOBAL%$choose_params$:s}				:i :s{$pad_choose$$UI_SFX$$params$ = :s{$menustate$ = $generic$$uitype$ = $select$:s}:s}				:i :s{$focus$$mic_binding_focus$:s}				:i :s{$unfocus$$mic_binding_unfocus$:s}			:i :a}		:i :s}	:i endif	:i %GLOBAL%$id$.$mic_binding_unfocus$	:i if $GotParam$${StructQBKey spawn_headset_watcher}$		:i %GLOBAL%$id$.$obj_spawnscript$$mic_binding_headset_watcher$$id$ = $headset_watcher$$params$ = :s{$player$ = %GLOBAL%$player$:s}	:i endif	:i endfunction]Script mic_binding_headset_watcher 0x1a4de7cb [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i $getplayerinfo$%GLOBAL%$player$$controller$	:i $hud_mic_binding$.$desc_resolvealias$${		StructQBKey name = alias_mic_menu		StructQBKey param = mic_menu_id	}$		:i while 	:i if $controller_has_headset$$controller$ = %GLOBAL%$controller$		:i $se_setprops$${			StructQBKey focusable			StructFloat alpha = 1.00		}$			:i else 		:i %GLOBAL%$should_return$ = %i(0)		:i if $CheckForSignin$$controller_index$ = %GLOBAL%$controller$$network_platform_only$$dont_set_primary$			:i if $IsXenonOrWinDX$				:i if $NetSessionFunc$$func$ = $xenonisguest$$params$ = :s{$controller_index$ = %GLOBAL%$controller$:s}					:i $hud_mic_binding$.$se_setprops$:s{						:i $main_text$ = (~$mic_binding_text$->$choose_controller_guest$)					:i :s}					:i %GLOBAL%$should_return$ = %i(1)				:i endif			:i endif		:i endif		:i $se_setprops$${			StructQBKey not_focusable			StructFloat alpha = 0.30000001192092896		}$				:i $LaunchEvent$$type$ = $unfocus$$target$ = %GLOBAL%$mic_menu_id$		:i $LaunchEvent$$type$ = $focus$$target$ = %GLOBAL%$mic_menu_id$$Data$ = :s{$child_index$ = %i(0):s}		:i if (%GLOBAL%$should_return$ = %i(1))			:i return 		:i endif	:i endif	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i endfunction]Script mic_binding_start_flow 0x8f58752b [	:i $player$ = %i(1)	:i while 	:i $mic_binding_get_status_id$$player$ = %GLOBAL%$player$	:i %GLOBAL%$status_id$.$getsingletag$$state$	:i if $GotParam$${StructQBKey state}$		:i if (%GLOBAL%$state$ = $in$)			:i $mic_binding_player_flow$$player$ = %GLOBAL%$player$			:i return 		:i endif	:i endif	:i $RemoveParameter$${StructQBKey state}$	:i $player$ = (%GLOBAL%$player$ + %i(1))	:i loop_to %i(4)	:i endfunction]Script mic_binding_player_flow c541d3f7 [	:i $change$$mic_binding_curr_player$ = %GLOBAL%$player$	:i $mic_binding_setup_all_status_windows$	:i if $IsPS3$		:i $hud_mic_binding$.$se_setprops$:s{			:i $main_title_text$ = (~$mic_binding_text$->$choose_controller_title$)			:i $main_text$ = (~$mic_binding_text$->$choose_controller_ps3$)		:i :s}		:i $mic_binding_setup_menu$$player$ = %GLOBAL%$player$		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$bind_mic$)$icon$ = $mixer_icon_vox$$icon_alpha$ = %i(1)$choose_script$ = $mic_binding_set_mic_type$$choose_params$ = :s{$player$ = %GLOBAL%$player$$new_mic_type$ = $mic$:s}		:i if $hud_mic_binding$.$desc_resolvealias$${				StructQBKey name = alias_mic_menu				StructQBKey param = mic_menu_id			}$						:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{				:i $event_handlers$ = :a{					:i :s{$pad_up$$NullScript$:s}					:i :s{$pad_down$$NullScript$:s}				:i :a}				:i $replace_handlers$			:i :s}		:i endif	:i else 		:i $hud_mic_binding$.$se_setprops$:s{			:i $main_title_text$ = (~$mic_binding_text$->$choose_controller_title$)			:i $main_text$ = (~$mic_binding_text$->$choose_controller$)		:i :s}		:i $mic_binding_setup_menu$$player$ = %GLOBAL%$player$		:i $getplayerinfo$%GLOBAL%$player$$controller$		:i if $controller_has_headset$$controller$ = %GLOBAL%$controller$			:i $not_focusable$ = %i(1)		:i endif		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$mic$)$icon$ = $mixer_icon_vox$$icon_alpha$ = %i(1)$choose_script$ = $mic_binding_set_mic_type$$choose_params$ = :s{$player$ = %GLOBAL%$player$$new_mic_type$ = $mic$:s}		:i $mic_binding_add_menu_element$$spawn_headset_watcher$$player$ = %GLOBAL%$player$$not_focusable$ = %GLOBAL%$not_focusable$$text$ = (~$mic_binding_text$->$headset$)$icon$ = $Logo_Headset$$icon_alpha$ = %i(1)$choose_script$ = $mic_binding_set_mic_type$$choose_params$ = :s{$player$ = %GLOBAL%$player$$new_mic_type$ = $headset$:s}	:i endif	:i $hud_mic_binding$.$desc_resolvealias$${		StructQBKey name = alias_mic_menu		StructQBKey param = mic_menu_id	}$		:i $getplayerinfo$%GLOBAL%$player$$controller$	:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{		:i $exclusive_device$ = %GLOBAL%$controller$	:i :s}	:i $LaunchEvent$$type$ = $focus$$target$ = %GLOBAL%$mic_menu_id$$Data$ = :s{$child_index$ = %i(0):s}	:i endfunction]Script mic_binding_focus 0x4964f41b [	:i $se_setprops$${		StructInt highlight_alpha = 1		StructArray text_rgba		{			ArrayInteger			[				249				243				190				255			]		}	}$		:i endfunction]Script mic_binding_unfocus 0x882cdc5b [	:i $se_setprops$${		StructInt highlight_alpha = 0		StructArray text_rgba		{			ArrayInteger			[				206				196				124				255			]		}	}$		:i endfunction]Script mic_binding_setup_menu 0x5e409e77 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				player			]		}		StructQBKey all	}$		:i if $ScreenElementExists$${StructQBKey id = hud_mic_binding}$		:i if NOT $hud_mic_binding$.$desc_resolvealias$${				StructQBKey name = alias_mic_menu				StructQBKey param = mic_menu_id			}$						:i $scriptassert$${StructString 0x00000000 = "couldnt find mic menu id"}$		:i endif		:i $LaunchEvent$$type$ = $unfocus$$target$ = %GLOBAL%$mic_menu_id$		:i $wait$${			StructFloat 0.10000000149011612			StructQBKey seconds		}$				:i $DestroyScreenElement$$id$ = %GLOBAL%$mic_menu_id$$preserve_parent$		:i if NOT (%GLOBAL%$player$ = %i(4294967295))			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{				:i $exclusive_device$ = %GLOBAL%$controller$			:i :s}		:i endif		:i $LaunchEvent$$type$ = $focus$$target$ = %GLOBAL%$mic_menu_id$	:i endif	:i endfunction]Script mic_binding_add_sfx_handlers 0x75f31969 [	:i $se_setprops$${		StructArray event_handlers		{			ArrayStruct			[				StructHeader				{					StructQBKey pad_up					StructQBKey UI_SFX					StructStruct params					{						StructHeader						{							StructQBKey menustate = generic							StructQBKey uitype = ScrollUp						}					}				}				StructHeader				{					StructQBKey pad_down					StructQBKey UI_SFX					StructStruct params					{						StructHeader						{							StructQBKey menustate = generic							StructQBKey uitype = ScrollUp						}					}				}			]		}		StructQBKey replace_handlers	}$		:i endfunction]Script mic_binding_remove_sfx_handlers e8808b6a [	:i $se_setprops$${		StructArray event_handlers		{			ArrayStruct			[				StructHeader				{					StructQBKey pad_up					StructQBKey NullScript				}				StructHeader				{					StructQBKey pad_down					StructQBKey NullScript				}			]		}		StructQBKey replace_handlers	}$		:i endfunction]Script mic_binding_set_mic_type e8be6c4d [	:i $KillSpawnedScript$${StructQBKey id = headset_watcher}$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $mic_binding_setup_menu$$player$ = %GLOBAL%$player$	:i $getplayerinfo$%GLOBAL%$player$$controller$	:i $getplayerinfo$%GLOBAL%$player$$mic_type$	:i if (%GLOBAL%$new_mic_type$ = $mic$)		:i $band_lobby_set_mic_preference$$player$ = %GLOBAL%$player$$mic_preference$ = $mic$		:i $vocals_deinit_all_mics$		:i $vocals_distribute_mics$		:i $Vocals_GetAvailableMics$		:i $mic_binding_initialize_mics$		:i $getplayerinfo$%GLOBAL%$player$$mic_type$		:i %GLOBAL%$icon$ = $mixer_icon_vox$		:i if (%GLOBAL%$mic_type$ = $headset$)			:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $None$			:i if NOT $IsPS3$				:i %GLOBAL%$icon$ = $Logo_Headset$			:i endif		:i endif		:i $mic_binding_setup_status_window$$player$ = %GLOBAL%$player$		:i if (%GLOBAL%$available_mics$ > %i(1))			:i $hud_mic_binding$.$se_setprops$:s{				:i $main_title_text$ = (~$mic_binding_text$->$sing_title$)				:i $main_text$ = (~$mic_binding_text$->$sing$)			:i :s}			:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$done$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow_confirm$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}			:i $spawnscriptnow$$mic_binding_bind_mic$$id$ = $mic_binding$$params$ = :s{$player$ = %GLOBAL%$player$:s}		:i elseif (%GLOBAL%$available_mics$ = %i(1))			:i $hud_mic_binding$.$se_setprops$:s{				:i $main_title_text$ = (~$mic_binding_text$->$sing_title$)				:i $main_text$ = (~$mic_binding_text$->$chosen_mic$)			:i :s}			:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$done$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow_confirm$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}		:i else 			:i $hud_mic_binding$.$se_setprops$:s{				:i $main_title_text$ = (~$mic_binding_text$->$no_valid_mics$)				:i $main_text$ = (~$mic_binding_text$->$no_valid_mics_text$)			:i :s}			:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$retry$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}			:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$continue$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow_next_player$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}		:i endif	:i else 		:i $band_lobby_set_mic_preference$$player$ = %GLOBAL%$player$$mic_preference$ = $headset$		:i $hud_mic_binding$.$se_setprops$:s{			:i $main_title_text$ = (~$mic_binding_text$->$sing_title$)			:i $main_text$ = (~$mic_binding_text$->$chosen_headset$)		:i :s}		:i $SetPlayerInfo$%GLOBAL%$player$$mic_type$ = $headset$		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$continue$)$choose_script$ = $mic_binding_player_flow_confirm$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}	:i endif	:i if $hud_mic_binding$.$desc_resolvealias$${			StructQBKey name = alias_mic_menu			StructQBKey param = mic_menu_id		}$				:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{			:i $event_handlers$ = :a{				:i :s{$pad_up$$NullScript$:s}				:i :s{$pad_down$$NullScript$:s}			:i :a}			:i $replace_handlers$		:i :s}	:i endif	:i endfunction]Script mic_binding_check_amplitude 0x5f34453b [	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $mic_types$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $count$ = %i(0)	:i while 	:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})	:i $controller$ = (~%GLOBAL%$mic_global$)	:i if NOT (%GLOBAL%$controller$ = %i(4294967295))		:i $Vocals_GetMicAmplitude$$controller$ = %GLOBAL%$controller$		:i if (%GLOBAL%$amplitude$ > %f(0.0500000))			:i $count$ = (%GLOBAL%$count$ + %i(1))		:i else 			:i $count$ = %i(0)		:i endif	:i else 		:i $count$ = %i(0)	:i endif	:i if (%GLOBAL%$count$ > %i(30))		:i $mic_binding_bind_mic_finished$$player$ = %GLOBAL%$player$$controller$ = %GLOBAL%$controller$$mic_type$ = (%GLOBAL%$mic_types$:a{%GLOBAL%$index$:a})		:i return 	:i endif	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i endfunction]Script mic_binding_bind_mic fd62d7e4 [	:i $getplayerinfo$%GLOBAL%$player$$mic_type$	:i $curr_player$ = %GLOBAL%$player$	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $mic_types$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $index$ = %i(0)	:i while 	:i $spawnscriptnow$$mic_binding_check_amplitude$$id$ = $amp_check$$params$ = :s{$index$ = %GLOBAL%$index$$player$ = %GLOBAL%$curr_player$:s}	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i return 	:i endfunction]Script mic_binding_bind_mic_finished c2a7e164 [	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $mic_types$ = :a{$mic0$$mic1$$mic2$$mic3$:a}	:i $controller_b$ = %GLOBAL%$controller$	:i $mic_type_b$ = %GLOBAL%$mic_type$	:i $getplayerinfo$%GLOBAL%$player$$controller$	:i $controller_a$ = %GLOBAL%$controller$	:i $index$ = %i(0)	:i while 	:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})	:i if (~%GLOBAL%$mic_global$ = %GLOBAL%$controller$)		:i $mic_type_a$ = (%GLOBAL%$mic_types$:a{%GLOBAL%$index$:a})		:i continue	:i endif	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i if NOT $GotParam$${StructQBKey mic_type_a}$		:i $mic_type_a$ = $None$	:i endif	:i $player_a$ = %GLOBAL%$player$	:i $player_b$ = %i(4294967295)	:i $GetNumPlayersInGame$${StructQBKey on_screen}$	:i $GetFirstPlayer$${StructQBKey on_screen}$	:i while 	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i if $playerinfoequals$%GLOBAL%$player$$controller$ = %GLOBAL%$controller_b$			:i $player_b$ = %GLOBAL%$player$			:i continue		:i endif	:i endif	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players_shown$	:i if (%GLOBAL%$mic_type_b$ = $headset$)		:i $SetPlayerInfo$%GLOBAL%$player_a$$mic_type$ = $headset$	:i else 		:i $mic_binding_deinit_mic$$controller$ = %GLOBAL%$controller_b$$mic_type$ = %GLOBAL%$mic_type_b$		:i if NOT (%GLOBAL%$mic_type_a$ = $headset$ OR %GLOBAL%$mic_type_a$ = $None$)			:i $mic_binding_deinit_mic$$controller$ = %GLOBAL%$controller_a$$mic_type$ = %GLOBAL%$mic_type_a$			:i $mic_binding_init_mic$$controller$ = %GLOBAL%$controller_b$$mic_type$ = %GLOBAL%$mic_type_a$			:i if NOT (%GLOBAL%$player_b$ = %i(4294967295))				:i if NOT $playerinfoequals$%GLOBAL%$player_b$$mic_type$ = $headset$					:i $SetPlayerInfo$%GLOBAL%$player_b$$mic_type$ = %GLOBAL%$mic_type_a$				:i endif			:i endif		:i else 			:i if NOT (%GLOBAL%$player_b$ = %i(4294967295))				:i if NOT $playerinfoequals$%GLOBAL%$player_b$$mic_type$ = $headset$					:i $SetPlayerInfo$%GLOBAL%$player_b$$mic_type$ = $None$				:i endif			:i endif		:i endif		:i $mic_binding_init_mic$$controller$ = %GLOBAL%$controller_a$$mic_type$ = %GLOBAL%$mic_type_b$		:i $SetPlayerInfo$%GLOBAL%$player_a$$mic_type$ = %GLOBAL%$mic_type_b$	:i endif	:i $mic_binding_setup_all_status_windows$	:i $mic_binding_player_flow_confirm$$player$ = %GLOBAL%$player_a$	:i endfunction]Script mic_binding_player_flow_confirm d17b2351 [	:i $mic_binding_setup_status_window$$player$ = %GLOBAL%$player$$status_text$ = (~$mic_binding_text$->$binding_complete$)	:i $mic_binding_setup_menu$$player$ = %GLOBAL%$player$	:i if $playerinfoequals$%GLOBAL%$player$$mic_type$ = $None$		:i $hud_mic_binding$.$se_setprops$:s{			:i $main_title_text$ = (~$mic_binding_text$->$invalid_mic$)			:i $main_text$ = (~$mic_binding_text$->$invalid_mic_text$)		:i :s}		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$retry$)$choose_script$ = $mic_binding_player_flow$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$continue$)$choose_script$ = $mic_binding_player_flow_next_player$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}	:i else 		:i $getplayerinfo$%GLOBAL%$player$$mic_preference$		:i if (%GLOBAL%$mic_preference$ = $mic$)			:i $main_text$ = (~$mic_binding_text$->$confirm_text_mic$)			:i %GLOBAL%$icon$ = $mixer_icon_vox$		:i elseif NOT $IsPS3$			:i $main_text$ = (~$mic_binding_text$->$confirm_text_headset$)			:i %GLOBAL%$icon$ = $Logo_Headset$		:i else 			:i $main_text$ = (~$mic_binding_text$->$confirm_text_default$)			:i %GLOBAL%$icon$ = $mixer_icon_vox$		:i endif		:i $hud_mic_binding$.$se_setprops$:s{			:i $main_title_text$ = (~$mic_binding_text$->$confirm_title$)			:i $main_text$ = %GLOBAL%$main_text$		:i :s}		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$yes$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow_next_player$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}		:i $mic_binding_add_menu_element$$text$ = (~$mic_binding_text$->$no$)$icon$ = %GLOBAL%$icon$$choose_script$ = $mic_binding_player_flow$$choose_params$ = :s{$player$ = %GLOBAL%$player$:s}		:i $hud_mic_binding$.$desc_resolvealias$${			StructQBKey name = alias_mic_menu			StructQBKey param = mic_menu_id		}$				:i $getplayerinfo$%GLOBAL%$player$$controller$		:i %GLOBAL%$mic_menu_id$.$se_setprops$:s{			:i $exclusive_device$ = %GLOBAL%$controller$		:i :s}		:i $LaunchEvent$$type$ = $focus$$target$ = %GLOBAL%$mic_menu_id$$Data$ = :s{$child_index$ = %i(0):s}	:i endif	:i $KillSpawnedScript$${StructQBKey id = amp_check}$	:i endfunction]Script mic_binding_player_flow_next_player dd6cf071 [	:i $KillSpawnedScript$${StructQBKey id = amp_check}$	:i while 	:i $GetNextPlayer$$on_screen$$player$ = %GLOBAL%$player$	:i if (%GLOBAL%$player$ = %i(4294967295))		:i $mic_binding_end$		:i return 	:i endif	:i if $playerinfoequals$%GLOBAL%$player$$is_local_client$ = %i(1)		:i if $playerinfoequals$%GLOBAL%$player$$part$ = $Vocals$			:i $mic_binding_player_flow$$player$ = %GLOBAL%$player$			:i return 		:i endif	:i endif	:i loop_to 	:i endfunction]Script mic_binding_get_mic_global 0x32f77e41 [	:i switch %GLOBAL%$mic_type$		:i case $mic0$			:i $mic_global$ = $mic_binding_mic0$			:i endcase		case $mic1$			:i $mic_global$ = $mic_binding_mic1$			:i endcase		case $mic2$			:i $mic_global$ = $mic_binding_mic2$			:i endcase		case $mic3$			:i $mic_global$ = $mic_binding_mic3$			:i endcase		default 			:i $softassert$${StructQBStringQs 0x9f887b0d}$	:i end_switch	:i return $mic_global$ = %GLOBAL%$mic_global$	:i endfunction]Script mic_binding_init_mic 0x261d91ae [	:i if (%GLOBAL%$mic_type$ = $first_free_mic$)		:i $mic_array$ = :a{$mic0$$mic1$$mic2$$mic3$:a}		:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}		:i $index$ = %i(0)		:i while 		:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})		:i if (~%GLOBAL%$mic_global$ = %i(4294967295))			:i $mic_type$ = (%GLOBAL%$mic_array$:a{%GLOBAL%$index$:a})			:i continue		:i endif		:i $index$ = (%GLOBAL%$index$ + %i(1))		:i loop_to %i(4)	:i endif	:i $mic_binding_get_mic_global$$mic_type$ = %GLOBAL%$mic_type$	:i $change$$globalname$ = %GLOBAL%$mic_global$$newValue$ = %GLOBAL%$controller$	:i $Vocals_InitMic$$controller$ = %GLOBAL%$controller$$mic_type$ = %GLOBAL%$mic_type$$noise_gate$ = %f(0.0199999)	:i $printf$$channel$ = $Vocals$^[9a024601]^$a$ = %GLOBAL%$mic_type$$b$ = %GLOBAL%$controller$	:i endfunction]Script mic_binding_deinit_mic c58cfa62 [	:i if NOT (%GLOBAL%$mic_type$ = $headset$ OR %GLOBAL%$mic_type$ = $None$)		:i $mic_binding_get_mic_global$$mic_type$ = %GLOBAL%$mic_type$		:i $change$$globalname$ = %GLOBAL%$mic_global$$newValue$ = %i(4294967295)		:i $printf$$channel$ = $Vocals$^[95686418]^$a$ = %GLOBAL%$mic_type$$b$ = %GLOBAL%$controller$		:i $Vocals_DeinitMic$$controller$ = %GLOBAL%$controller$	:i endif	:i endfunction]Script mic_binding_reset_mic_globals dba3b8d9 [	:i $mic_globals$ = :a{$mic_binding_mic0$$mic_binding_mic1$$mic_binding_mic2$$mic_binding_mic3$:a}	:i $index$ = %i(0)	:i while 	:i $mic_global$ = (%GLOBAL%$mic_globals$:a{%GLOBAL%$index$:a})	:i $change$$globalname$ = %GLOBAL%$mic_global$$newValue$ = %i(4294967295)	:i $index$ = (%GLOBAL%$index$ + %i(1))	:i loop_to %i(4)	:i endfunction]Script mic_binding_end 0x2ad8d84d [	${StructInt play_sound = 1}$	:i if (%GLOBAL%$play_sound$ = %i(1))		:i $UI_SFX$${			StructQBKey menustate = generic			StructQBKey uitype = back		}$			:i endif	:i if $ui_event_exists_in_stack$${StructString name = "gameplay"}$		:i $gamemode_gettype$		:i if (%GLOBAL%$type$ = $practice$)			:i $ui_destroy_mic_binding$			:i $practice_restart_song$		:i else 			:i if (%GLOBAL%$type$ = $quickplay$)				:i $quickplay_unload_challenges$			:i endif			:i $change$${StructInt gameplay_restart_song = 1}$		:i endif		:i $create_loading_screen$		:i $generic_event_back$${StructQBKey state = UIState_Gameplay}$		:i return 	:i endif	:i $generic_event_back$	:i endfunction]