Unknown [1c00000000000000000014100000000000000000]SectionArray drums_autonotemapping{	ArrayStruct	[		StructHeader		{			StructInt midinote = 108			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_sticks_tiny					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 109			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_sticks_normal					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 110			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_sticks_huge					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 111			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_HHpedal					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 112			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_HHclosed					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 113			StructQBKey scr = audio_gameplay_practice_play_project_dependent_drum_sample			StructStruct params			{				StructHeader				{					StructQBKey pad = countin					StructQBKey sfxtype = countin_HHopen					StructQBKey buss = Drums_PracticeMode_Cymbals_Crash				}			}		}		StructHeader		{			StructInt midinote = 70			StructQBKey scr = Countoff_NoteMap			StructStruct params			{				StructHeader {}			}		}		]}SectionArray Crowd_AutoNoteMapping{	ArrayStruct	[		StructHeader		{			StructInt midinote = 82			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 1				}			}		}		StructHeader		{			StructInt midinote = 83			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 2				}			}		}		StructHeader		{			StructInt midinote = 84			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 3				}			}		}		StructHeader		{			StructInt midinote = 85			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 4				}			}		}		StructHeader		{			StructInt midinote = 86			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 5				}			}		}		StructHeader		{			StructInt midinote = 87			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 6				}			}		}		StructHeader		{			StructInt midinote = 88			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 7				}			}		}		StructHeader		{			StructInt midinote = 89			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 8				}			}		}		StructHeader		{			StructInt midinote = 90			StructQBKey scr = Band_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey Positive				}			}		}		StructHeader		{			StructInt midinote = 91			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = guitar					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 92			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = Bass					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 93			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = drum					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 94			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 9				}			}		}		StructHeader		{			StructInt midinote = 95			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 10				}			}		}		StructHeader		{			StructInt midinote = 96			StructQBKey scr = audio_crowd_event_listener			StructStruct params			{				StructHeader				{					StructInt event_type = 11				}			}		}		]}SectionArray Triggers_AutoNoteMapping{	ArrayStruct	[		StructHeader		{			StructInt midinote = 101			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = guitar					StructQBKey Positive				}			}		}		StructHeader		{			StructInt midinote = 102			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = guitar					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 103			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = guitar					StructQBKey Positive					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 104			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = Bass					StructQBKey Positive				}			}		}		StructHeader		{			StructInt midinote = 105			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = Bass					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 106			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = Bass					StructQBKey Positive					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 107			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = drum					StructQBKey Positive				}			}		}		StructHeader		{			StructInt midinote = 108			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = drum					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 109			StructQBKey scr = Trigger_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey part = drum					StructQBKey Positive					StructQBKey negative				}			}		}		StructHeader		{			StructInt midinote = 110			StructQBKey scr = Band_PerformanceCrowdReaction			StructStruct params			{				StructHeader				{					StructQBKey Positive				}			}		}		]}Script NoteMap_Dummy dd5d3b33 [	:i $printf$${StructQBStringQs a9b4ece2}$	:i endfunction]Script Countoff_NoteMap 0x0694d9c0 [	:i $printf$${		StructQBKey channel = sfx		StructQBStringQs 0x750207eb	}$		:i $printstruct$ isNull 	:i $spawnscriptnow$$audio_gameplay_countoff_logic$$params$ = :s{ isNull :s}	:i endfunction]Script notemap_startiterator c34ab503 [	:i $FormatText$$checksumname$ = $global_notemapping$%s("%s_AutoNoteMapping")$s$ = %GLOBAL%$event_string$	:i if NOT $globalexists$$name$ = %GLOBAL%$global_notemapping$$type$ = $array$		:i return 	:i endif	:i $FormatText$$checksumname$ = $event_checksum$%s("%s")$s$ = %GLOBAL%$event_string$	:i $SetNoteMappings$$section$ = %GLOBAL%$event_checksum$$mapping$ = ~%GLOBAL%$global_notemapping$	:i $spawnscriptnow$$notemap_iterator$$params$ = :s{ isNull :s}	:i endfunction]Script notemap_deinit 0x03d13903 [	:i $ClearNoteMappings$${StructQBKey section = all}$	:i $KillSpawnedScript$${StructQBKey name = notemap_iterator}$	:i $KillSpawnedScript$${StructQBKey name = notemap_startiterator}$	:i endfunction]Script notemap_iterator 0x8fcc7326 [	:i $Notemap_iterator_CFunc_Setup$	:i while 	:i if $Notemap_iterator_CFunc$		:i continue	:i endif	:i loop_to 	:i $Notemap_iterator_CFunc_Cleanup$	:i endfunction]Script Band_PerformanceCrowdReaction a98e6b84 [	:i if NOT (~$game_mode$ = $practice$)		:i $error$ = %i(0)		:i $Trigger_PerformanceCrowdReactionGet$ isNull $part$ = $drum$		:i $notes_hitd$ = %GLOBAL%$notes_hit$		:i $total_notesd$ = %GLOBAL%$total_notes$		:i $playerd$ = %GLOBAL%$player$		:i $Trigger_PerformanceCrowdReactionGet$ isNull $part$ = $Bass$		:i $notes_hitr$ = %GLOBAL%$notes_hit$		:i $total_notesr$ = %GLOBAL%$total_notes$		:i $playerr$ = %GLOBAL%$player$		:i $Trigger_PerformanceCrowdReactionGet$ isNull $part$ = $guitar$		:i if (%GLOBAL%$error$ = %i(1))			:i return 		:i endif		:i $getsongtimems$		:i $target$ = (%GLOBAL%$time$ + %GLOBAL%$Length$)		:i while 		:i $wait$${			StructInt 1			StructQBKey gameframe		}$				:i $getsongtimems$		:i if (%GLOBAL%$time$ >= %GLOBAL%$target$)			:i continue		:i endif		:i loop_to 		:i $getplayerinfo$%GLOBAL%$player$$notes_hit$$out$ = $player_notes_hit$		:i $getplayerinfo$%GLOBAL%$player$$total_notes$$out$ = $player_total_notes$		:i $notes_hit_count$ = (%GLOBAL%$notes_hit$ - %GLOBAL%$player_notes_hit$)		:i $total_notes_count$ = (%GLOBAL%$total_notes$ - %GLOBAL%$player_total_notes$)		:i if (%GLOBAL%$notes_hit_count$ = %GLOBAL%$total_notes_count$)			:i if $GotParam$${StructQBKey Positive}$				:i $Trigger_PositiveCrowdReaction$			:i endif		:i else 			:i if $GotParam$${StructQBKey negative}$				:i $Trigger_NegativeCrowdReaction$			:i endif		:i endif		:i $succeed$ = %i(0)		:i if $Trigger_PerformanceCrowdReactionCheck$$notes_hit$ = %GLOBAL%$notes_hitd$$total_notes$ = %GLOBAL%$total_notesd$$player$ = %GLOBAL%$playerd$			:i if $Trigger_PerformanceCrowdReactionCheck$$notes_hit$ = %GLOBAL%$notes_hitr$$total_notes$ = %GLOBAL%$total_notesr$$player$ = %GLOBAL%$playerr$				:i if $Trigger_PerformanceCrowdReactionCheck$$notes_hit$ = %GLOBAL%$notes_hit$$total_notes$ = %GLOBAL%$total_notes$$player$ = %GLOBAL%$player$					:i $succeed$ = %i(1)				:i endif			:i endif		:i endif		:i if (%GLOBAL%$succeed$ = %i(1))			:i if $GotParam$${StructQBKey Positive}$				:i $Trigger_PositiveCrowdReaction$			:i endif		:i else 			:i if $GotParam$${StructQBKey negative}$				:i $Trigger_NegativeCrowdReaction$			:i endif		:i endif	:i endif	:i endfunction]Script Trigger_PerformanceCrowdReactionGet dfc87e3c [	:i $error$ = %i(1)	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(0))		:i $GetFirstPlayer$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$$out$ = $player_part$		:i if (%GLOBAL%$player_part$ = %GLOBAL%$part$)			:i %GLOBAL%$error$ = %i(0)			:i continue		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players$	:i endif	:i if (%GLOBAL%$error$ = %i(1))		:i return ${StructInt error = 1}$	:i endif	:i $getplayerinfo$%GLOBAL%$player$$notes_hit$	:i $getplayerinfo$%GLOBAL%$player$$total_notes$	:i return $notes_hit$ = %GLOBAL%$notes_hit$$total_notes$ = %GLOBAL%$total_notes$$player$ = %GLOBAL%$player$	:i endfunction]Script Trigger_PerformanceCrowdReactionCheck 0x18e27ac8 [	:i $getplayerinfo$%GLOBAL%$player$$notes_hit$$out$ = $notes_hit_count$	:i $getplayerinfo$%GLOBAL%$player$$total_notes$$out$ = $total_notes_count$	:i if (%GLOBAL%$notes_hit_count$ = %GLOBAL%$total_notes_count$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script Trigger_PerformanceCrowdReaction 0x4304d9b6 [	:i $error$ = %i(0)	:i $Trigger_PerformanceCrowdReactionGet$ isNull 	:i if (%GLOBAL%$error$ = %i(1))		:i return 	:i endif	:i $getsongtimems$	:i $target$ = (%GLOBAL%$time$ + %GLOBAL%$Length$)	:i while 	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i $getsongtimems$	:i if (%GLOBAL%$time$ >= %GLOBAL%$target$)		:i continue	:i endif	:i loop_to 	:i if $Trigger_PerformanceCrowdReactionCheck$ isNull 		:i if $GotParam$${StructQBKey Positive}$			:i $Trigger_PositiveCrowdReaction$		:i endif	:i else 		:i if $GotParam$${StructQBKey negative}$			:i $Trigger_NegativeCrowdReaction$		:i endif	:i endif	:i endfunction]Script Trigger_PositiveCrowdReaction 0x17579fec [	:i $GetPakManCurrent$${StructQBKey map = zones}$	:i $AppendSuffixToChecksum$$base$ = %GLOBAL%$pak$$suffixstring$ = %s("_sfx_Crowd_Middle_Left")	:i $middleleftobjectname$ = %GLOBAL%$appended_id$	:i $AppendSuffixToChecksum$$base$ = %GLOBAL%$pak$$suffixstring$ = %s("_sfx_Crowd_Middle_Right")	:i $middlerightobjectname$ = %GLOBAL%$appended_id$	:i switch %GLOBAL%$pak$		:i case $z_metalfest$			:i if $CompositeObjectExists$$name$ = %GLOBAL%$middleleftobjectname$				:i $SoundEvent$$event$ = $LG_EXT_Crowd_Trigger_Short_Positive_L$$object$ = %GLOBAL%$middleleftobjectname$			:i endif			:i if $CompositeObjectExists$$name$ = %GLOBAL%$middlerightobjectname$				:i $SoundEvent$$event$ = $LG_EXT_Crowd_Trigger_Short_Positive_R$$object$ = %GLOBAL%$middlerightobjectname$			:i endif			:i endcase		default 			:i $SoundEvent$${StructQBKey event = Medium_Crowd_Swell}$	:i end_switch	:i $SoundEvent$${StructQBKey event = Large_EXT_Crowd_Positive_Swell_Layer}$	:i endfunction]Script Trigger_NegativeCrowdReaction ffffffff [	:i endfunction]