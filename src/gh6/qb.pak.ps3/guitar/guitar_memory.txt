Unknown [1c00000000000000000012cc0000000000000000]SectionInteger g_memory_check_fragmentation 0SectionInteger g_memory_check_leaks 0SectionArray g_heaps_allowed_fragmentation{	ArrayStruct	[		StructHeader		{			StructQBKey heap = heap_thread_local_storage			StructInt amount = 16		}		StructHeader		{			StructQBKey heap = heap_script_cache_small_allocs		}		StructHeader		{			StructQBKey heap = heap_script_cache_big_allocs		}		StructHeader		{			StructQBKey heap = heap_script		}		StructHeader		{			StructQBKey heap = heap_frontend		}		StructHeader		{			StructQBKey heap = heap_renderdata			StructInt amount = 128		}		StructHeader		{			StructQBKey heap = heap_frag		}		StructHeader		{			StructQBKey heap = heap_network		}		StructHeader		{			StructQBKey heap = heap_nodearray		}		StructHeader		{			StructQBKey heap = heap_skeleton		}		StructHeader		{			StructQBKey heap = heap_audio		}		StructHeader		{			StructQBKey heap = heap_animnode		}		StructHeader		{			StructQBKey heap = heap_debug		}		StructHeader		{			StructQBKey heap = heap_debug_rsx		}		StructHeader		{			StructQBKey heap = heap_flxparticles		}		StructHeader		{			StructQBKey heap = heap_avatar1		}		StructHeader		{			StructQBKey heap = heap_avatar2		}		StructHeader		{			StructQBKey heap = heap_avatar3		}		StructHeader		{			StructQBKey heap = heap_avatar4		}		]}SectionStruct g_anim_pool_params{	StructHeader	{		StructArray anim_node_pools		{			ArrayStruct			[				StructHeader				{					StructInt element_size = 72					StructInt max_elements = 600				}				StructHeader				{					StructInt element_size = 160					StructInt max_elements = 64				}				StructHeader				{					StructInt element_size = 512					StructInt max_elements = 32				}				StructHeader				{					StructInt element_size = 1200					StructInt max_elements = 128				}				StructHeader				{					StructInt element_size = 1872					StructInt max_elements = 30				}				StructHeader				{					StructInt element_size = 18016					StructInt max_elements = 4				}						]		}		StructInt num_degen_blend_child_states = 512		StructInt num_blend_functions = 256		StructInt num_curve_blend_arrays = 200		StructInt num_poses = 12	}}Script memory_get_heap_sizes ccad5408 [	:i $heap_inner_overhead$ = (%i(1) * %i(1024))	:i if $IsPS3$		:i $main_heap_overhead$ = (%i(384))		:i $vram_heap_overhead$ = ((%i(40) * %i(1024)) + %GLOBAL%$main_heap_overhead$)	:i else 		:i $main_heap_overhead$ = (%i(384))		:i $vram_heap_overhead$ = (%i(0))	:i endif	:i $atoms_size$ = (%i(85) * %i(1024))	:i $ghtunes_cache_size$ = (%i(1) * %i(1024) * %i(1024))	:i $get_num_savegames$	:i %GLOBAL%$heap_size_skeleton$ = (%i(180) * %i(1024))	:i %GLOBAL%$heap_size_animnode$ = (%i(512) * %i(1024))	:i %GLOBAL%$heap_size_ms_notes$ = (%i(2) * %i(1024) * %i(1024))	:i %GLOBAL%$heap_size_save_file$ = ((%i(2) * %i(1024) * %i(1024)) + %GLOBAL%$heap_inner_overhead$)	:i %GLOBAL%$heap_size_song$ = ((%i(9) * %i(1024) * %i(1024)) + (%i(20) * %i(1024)))	:i %GLOBAL%$heap_size_atoms$ = (%GLOBAL%$atoms_size$ * %GLOBAL%$num_savegames$)	:i %GLOBAL%$heap_size_frag$ = (%i(320) * %i(1024))	:i %GLOBAL%$heap_size_lightortho$ = (%i(10) * %i(1024))	:i %GLOBAL%$heap_size_player_info$ = (%i(32) * %i(1024))	:i %GLOBAL%$heap_size_gameplay$ = (%i(1100) * %i(1024))	:i %GLOBAL%$heap_size_gameplay_per_player$ = (%i(256) * %i(1024))	:i %GLOBAL%$heap_size_nodearray$ = (%i(768) * %i(1024))	:i %GLOBAL%$heap_size_songstat_pak$ = (%i(410) * %i(1024))	:i %GLOBAL%$heap_size_musician_anim$ = (%i(19156) * %i(1024))	:i %GLOBAL%$heap_size_win_lose_anim$ = (%i(860) * %i(1024))	:i %GLOBAL%$heap_size_crowd$ = (%i(120) * %i(1024))	:i %GLOBAL%$heap_size_musicstore$ = ((%i(1) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))	:i if $IsXenonOrWinDX$		:i %GLOBAL%$heap_size_ui_shared$ = (%i(13892) * %i(1024))		:i %GLOBAL%$heap_size_ui_shared_vram$ = %i(0)		:i %GLOBAL%$heap_size_in_game$ = (%i(12890) * %i(1024))		:i %GLOBAL%$heap_size_in_game_vram$ = %i(0)		:i %GLOBAL%$heap_size_jam$ = %i(0)		:i %GLOBAL%$heap_size_jam_vram$ = %i(0)		:i %GLOBAL%$heap_size_audio$ = ((%i(13) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))		:i %GLOBAL%$heap_size_global_sfx$ = ((%i(7) * %i(1024) * %i(1024)) + (%i(310) * %i(1024)))		:i %GLOBAL%$heap_size_global_sfx_vram$ = %i(0)		:i %GLOBAL%$heap_size_musicstudio_guitar$ = ((%i(21) * %i(1024) * %i(1024)) + (%i(658) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_guitar_vram$ = %i(0)		:i %GLOBAL%$heap_size_musicstudio_bass$ = ((%i(4) * %i(1024) * %i(1024)) + (%i(618) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_bass_vram$ = %i(0)		:i %GLOBAL%$heap_size_musicstudio_keyboard$ = ((%i(2) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_keyboard_vram$ = %i(0)		:i %GLOBAL%$heap_size_drumkitaudio$ = ((%i(1) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_drumkitaudio_vram$ = %i(0)		:i %GLOBAL%$heap_size_drumkitaudio_percussion$ = ((%i(1) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_drumkitaudio_percussion_vram$ = %i(0)		:i %GLOBAL%$heap_size_musician$ = (%i(13500) * %i(1024))		:i %GLOBAL%$heap_size_musician_vram$ = (%i(0) * %i(1024))		:i %GLOBAL%$heap_size_downloads$ = (%i(1) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_downloads_vram$ = (%i(0) * %i(1024))		:i %GLOBAL%$heap_size_cas_build$ = ((%i(4) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))		:i %GLOBAL%$heap_size_cas_build_vram$ = (%i(0) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_cas_global$ = ((%i(17) * %i(1024) * %i(1024)) + (%i(140) * %i(1024)))		:i %GLOBAL%$heap_size_cas_global_vram$ = (%i(0) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_cas_cache$ = (%GLOBAL%$heap_size_musicstudio_guitar$ + %GLOBAL%$main_heap_overhead$ + 		:i %GLOBAL%$heap_size_musicstudio_bass$ + %GLOBAL%$main_heap_overhead$ + 		:i %GLOBAL%$heap_size_musicstudio_keyboard$ + %GLOBAL%$main_heap_overhead$ + 		:i %GLOBAL%$heap_size_drumkitaudio$ + %GLOBAL%$main_heap_overhead$ + 		:i %GLOBAL%$heap_size_drumkitaudio_percussion$ + %GLOBAL%$main_heap_overhead$ + 		:i %GLOBAL%$heap_size_song$ + %GLOBAL%$main_heap_overhead$)		:i %GLOBAL%$heap_size_cas_cache_vram$ = (%i(0) * %i(1024))		:i if (~$cas_pieces_is_a_reference_archive$ = %i(1))			:i %GLOBAL%$cas_building_cache_size$ = (%i(30) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_ui_precache_size$ = (%i(0) * %i(1024) * %i(1024))		:i else 			:i %GLOBAL%$cas_building_cache_size$ = (%i(6) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_ui_precache_size$ = ((%i(34) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i endif		:i %GLOBAL%$heap_size_zones$ = ((%i(31) * %i(1024) * %i(1024)) + (%i(900) * %i(1024)))		:i %GLOBAL%$heap_size_zones_vram$ = (%i(0) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_zone_slop_space_req$ = (%i(50) * %i(1024))		:i %GLOBAL%$heap_size_drumkits$ = (%i(1) * %i(1024))		:i %GLOBAL%$heap_size_ui_pak_slot$ = ((%i(9) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_ghtunes_cache$ = (%i(1) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_ghtunes_cache_vram$ = (%i(0) * %i(1024))		:i %GLOBAL%$heap_size_bink$ = ((%GLOBAL%$heap_size_save_file$ + %GLOBAL%$main_heap_overhead$) + 		:i (%GLOBAL%$heap_size_ghtunes_cache$ + %GLOBAL%$main_heap_overhead$) + 		:i (%i(16) * %i(1024)) + 		:i (%i(4) * %i(1024) * %i(1024)) + (%i(256) * %i(1024))		:i )		:i %GLOBAL%$heap_size_bink_vram$ = %i(0)		:i %GLOBAL%$heap_size_downloadpaks$ = (%i(600) * %i(1024))		:i %GLOBAL%$heap_size_massive_ads$ = (%i(1) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_massive_ads_vram$ = (%i(0))		:i %GLOBAL%$heap_size_stash$ = ((%i(7) * %i(1024) * %i(1024)) + (%i(24) * %i(1024)))		:i %GLOBAL%$heap_size_stash_vram$ = (%i(0) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_ref_archive_names$ = (%i(576) * %i(1024))		:i %GLOBAL%$bottomup_runtime_size_required$ = (%i(770) * %i(1024))		:i if $globalexists$${StructQBKey name = g_extra_zone_memory}$			:i if (~$g_extra_zone_memory$ = %i(1))				:i %GLOBAL%$heap_size_stash$ = %i(0)				:i %GLOBAL%$heap_size_zones$ = (%GLOBAL%$heap_size_zones$ + (%i(8) * %i(1024) * %i(1024)))			:i endif		:i endif		:i if $IsWinDX$			:i %GLOBAL%$heap_size_drumkitaudio$ = (%i(3) * %i(1024) * %i(1024))			:i %GLOBAL%$heap_size_drumkitaudio_percussion$ = (%i(3) * %i(1024) * %i(1024))			:i %GLOBAL%$heap_size_cas_cache$ = (%i(2) * %GLOBAL%$heap_size_cas_cache$)			:i %GLOBAL%$heap_size_global_sfx$ = (%i(10) * %i(1024) * %i(1024))			:i %GLOBAL%$heap_size_zones$ = (%i(36) * %i(1024) * %i(1024))		:i endif	:i else 		:i %GLOBAL%$heap_size_ui_shared$ = (%i(2420) * %i(1024))		:i %GLOBAL%$heap_size_ui_shared_vram$ = (%i(13344) * %i(1024))		:i %GLOBAL%$heap_size_in_game$ = (%i(576) * %i(1024))		:i %GLOBAL%$heap_size_in_game_vram$ = (%i(9057) * %i(1024))		:i %GLOBAL%$heap_size_jam$ = ((%i(0) * %i(1024)))		:i %GLOBAL%$heap_size_jam_vram$ = ((%i(7) * %i(1024) * %i(1024)) + (%i(64) * %i(1024)))		:i %GLOBAL%$heap_size_audio$ = ((%i(12) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))		:i %GLOBAL%$heap_size_global_sfx$ = (%i(20) * %i(1024))		:i %GLOBAL%$heap_size_global_sfx_vram$ = ((%i(4) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_guitar$ = (%i(56) * %i(1024))		:i %GLOBAL%$heap_size_musicstudio_guitar_vram$ = ((%i(17) * %i(1024) * %i(1024)) + (%i(0) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_bass$ = (%i(16) * %i(1024))		:i %GLOBAL%$heap_size_musicstudio_bass_vram$ = ((%i(5) * %i(1024) * %i(1024)) + (%i(0) * %i(1024)))		:i %GLOBAL%$heap_size_musicstudio_keyboard$ = (%i(32) * %i(1024))		:i %GLOBAL%$heap_size_musicstudio_keyboard_vram$ = ((%i(2) * %i(1024) * %i(1024)) + (%i(320) * %i(1024)))		:i %GLOBAL%$heap_size_cdnpools$ = (%i(900) * %i(1024))		:i %GLOBAL%$heap_size_drumkitaudio$ = (%i(32) * %i(1024))		:i %GLOBAL%$heap_size_drumkitaudio_vram$ = ((%i(2) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))		:i %GLOBAL%$heap_size_drumkitaudio_percussion$ = (%i(32) * %i(1024))		:i %GLOBAL%$heap_size_drumkitaudio_percussion_vram$ = ((%i(1) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_musician$ = (%i(2300) * %i(1024))		:i %GLOBAL%$heap_size_musician_vram$ = (%i(10500) * %i(1024))		:i %GLOBAL%$heap_size_downloads$ = (%i(1) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_downloads_vram$ = (%i(1) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_cas_build$ = ((%i(1) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_cas_build_vram$ = (%i(4) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_cas_global$ = (%i(80) * %i(1024))		:i %GLOBAL%$heap_size_cas_global_vram$ = ((%i(16) * %i(1024) * %i(1024)) + (%i(0) * %i(1024)))		:i %GLOBAL%$heap_size_cas_cache$ = ((%i(10) * %i(1024) * %i(1024)) - (%i(50) * %i(1024)) - %GLOBAL%$heap_size_skeleton$)		:i %GLOBAL%$intro_movie_vram_extra_space$ = (%i(3288) * %i(1024))		:i %GLOBAL%$additional_vram_for_cas_precache$ = (%i(6) * %i(1024) * %i(1024))		:i %GLOBAL%$additional_vram_for_cas_building$ = (%i(2) * %i(1024) * %i(1024))		:i %GLOBAL%$heap_size_cas_cache_vram$ = (%GLOBAL%$heap_size_musicstudio_guitar_vram$ + 		:i %GLOBAL%$heap_size_musicstudio_bass_vram$ + 		:i %GLOBAL%$heap_size_musicstudio_keyboard_vram$ + 		:i %GLOBAL%$heap_size_drumkitaudio_vram$ + 		:i %GLOBAL%$heap_size_drumkitaudio_percussion_vram$ + 		:i %GLOBAL%$intro_movie_vram_extra_space$ + 		:i %GLOBAL%$additional_vram_for_cas_precache$ + 		:i %GLOBAL%$additional_vram_for_cas_building$)		:i if (~$cas_pieces_is_a_reference_archive$ = %i(1))			:i %GLOBAL%$cas_building_cache_size$ = (%i(9) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_building_cache_size_vram$ = (%i(20) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_ui_precache_size$ = (%i(0) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_ui_precache_size_vram$ = (%i(0) * %i(1024) * %i(1024))		:i else 			:i %GLOBAL%$cas_building_cache_size$ = (%i(1) * %i(1024) * %i(1024))			:i %GLOBAL%$cas_building_cache_size_vram$ = ((%i(6) * %i(1024) * %i(1024)) + %GLOBAL%$additional_vram_for_cas_building$)			:i %GLOBAL%$cas_ui_precache_size$ = ((%i(8) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))			:i %GLOBAL%$cas_ui_precache_size_vram$ = ((%i(22) * %i(1024) * %i(1024)) + %GLOBAL%$intro_movie_vram_extra_space$ + %GLOBAL%$additional_vram_for_cas_precache$)		:i endif		:i %GLOBAL%$heap_size_zones$ = ((%i(3) * %i(1024) * %i(1024)) + (%i(768) * %i(1024)))		:i %GLOBAL%$heap_size_zones_vram$ = ((%i(27) * %i(1024) * %i(1024)) + (%i(256) * %i(1024)))		:i %GLOBAL%$heap_size_ui_pak_slot$ = (%i(850) * %i(1024))		:i %GLOBAL%$heap_size_ui_pak_slot_vram$ = ((%i(10) * %i(1024) * %i(1024)) + (%i(0) * %i(1024)))		:i %GLOBAL%$heap_size_ghtunes_cache$ = (%i(1) * %i(1024))		:i %GLOBAL%$heap_size_ghtunes_cache_vram$ = (%GLOBAL%$ghtunes_cache_size$)		:i %GLOBAL%$heap_size_bink$ = (		:i (%GLOBAL%$heap_size_save_file$ + %GLOBAL%$main_heap_overhead$) + 		:i (%GLOBAL%$heap_size_ghtunes_cache$ + %GLOBAL%$main_heap_overhead$ + %GLOBAL%$vram_heap_overhead$) + 		:i (%i(16) * %i(1024)) + 		:i (%i(1300) * %i(1024))		:i )		:i %GLOBAL%$heap_size_bink_vram$ = (		:i (%GLOBAL%$heap_size_ghtunes_cache_vram$) + 		:i ((%i(3) * %i(1024) * %i(1024)) + (%i(430) * %i(1024)) + (%i(2200) * %i(1024)))		:i )		:i %GLOBAL%$heap_size_downloadpaks$ = (%i(400) * %i(1024))		:i %GLOBAL%$heap_size_downloadpaks_vram$ = (%i(3) * %i(128) * %i(1024))		:i %GLOBAL%$heap_size_massive_ads$ = (%i(20) * %i(1024))		:i %GLOBAL%$heap_size_massive_ads_vram$ = (%i(128) * %i(1024))		:i %GLOBAL%$heap_size_stash$ = ((%i(2) * %i(1024) * %i(1024)) + (%i(580) * %i(1024)))		:i %GLOBAL%$heap_size_stash_vram$ = ((%i(8) * %i(1024) * %i(1024)) + (%i(512) * %i(1024)))		:i %GLOBAL%$heap_size_ref_archive_names$ = (%i(1152) * %i(1024))		:i %GLOBAL%$bottomup_runtime_size_required$ = (%i(320) * %i(1024))		:i %GLOBAL%$bottomup_vram_runtime_size_required$ = (%i(2386) * %i(1024))		:i if NOT $IsPS3$${StructQBKey testkit}$			:i if NOT $FinalBuild$				:i if NOT $RetailBuild$					:i %GLOBAL%$heap_size_stash$ = (%GLOBAL%$heap_size_stash$ + (%i(370) * %i(1024)))				:i endif			:i endif		:i endif	:i endif	:i return isNull 	:i endfunction]Script create_bink_sub_heaps fe6affef [	:i if NOT $GotParam$${StructQBKey no_save_heap}$		:i $memory_destroy_save_heap_at_boot$	:i endif	:i $memory_get_heap_sizes$	:i $MemPushContext$${StructQBKey heap_bink}$	:i if NOT $GotParam$${StructQBKey no_save_heap}$		:i if NOT $MemHeapExists$${StructQBKey name = heap_save_file}$			:i $MemInitHeap$$name$ = %s("heap_save_file")$size$ = %GLOBAL%$heap_size_save_file$$vram_size$ = %GLOBAL%$heap_size_save_file_vram$		:i endif	:i endif	:i if NOT $MemHeapExists$${StructQBKey name = heap_ghtunes_cache}$		:i $MemInitHeap$$name$ = %s("heap_ghtunes_cache")$size$ = %GLOBAL%$heap_size_ghtunes_cache$$vram_size$ = %GLOBAL%$heap_size_ghtunes_cache_vram$	:i endif	:i $MemPopContext$	:i endfunction]Script destroy_bink_sub_heaps 0x81847ab0 [	:i $change$${StructInt save_heap_created_at_boot = 0}$	:i if $MemHeapExists$${StructQBKey name = heap_save_file}$		:i $MemDeleteHeap$${StructQBKey name = heap_save_file}$	:i endif	:i if $MemHeapExists$${StructQBKey name = heap_ghtunes_cache}$		:i $JamClearMemCache$		:i $MemDeleteHeap$${StructQBKey name = heap_ghtunes_cache}$	:i endif	:i if $IsPS3$		:i if $MemHeapExists$${StructQBKey name = heap_ghtunes_cache_vram}$			:i $MemDeleteHeap$${StructQBKey name = heap_ghtunes_cache_vram}$		:i endif	:i endif	:i endfunction]Script memory_create_save_heap_at_boot 0x44688045 [	:i $memory_get_heap_sizes$	:i $change$${StructInt save_heap_created_at_boot = 1}$	:i $MemPushContext$${StructQBKey heap_frontend}$	:i if NOT $MemHeapExists$${StructQBKey name = heap_save_file}$		:i $MemInitHeap$$name$ = %s("heap_save_file")$size$ = %GLOBAL%$heap_size_save_file$$vram_size$ = %GLOBAL%$heap_size_save_file_vram$	:i endif	:i $MemPopContext$	:i endfunction]Script memory_destroy_save_heap_at_boot 0x3c5d05e6 [	:i if (~$save_heap_created_at_boot$ = %i(1))		:i $change$${StructInt save_heap_created_at_boot = 0}$		:i if $MemHeapExists$${StructQBKey name = heap_save_file}$			:i $MemDeleteHeap$${StructQBKey name = heap_save_file}$		:i endif	:i endif	:i endfunction]Script memory_create_song_heap 0x5f165ed7 [	:i if NOT $MemHeapExists$${StructQBKey name = heap_song}$		:i $memory_get_heap_sizes$		:i $MemPushContext$${StructQBKey heap_cas_cache}$		:i $MemInitHeap$$name$ = %s("heap_song")$size$ = %GLOBAL%$heap_size_song$		:i $MemPopContext$	:i endif	:i endfunction]Script create_song_and_musicstudio_heaps d2ec727b [	:i $memory_create_song_heap$	:i $MusicStudio_Instrument_CreateHeaps$	:i endfunction]Script destroy_song_and_musicstudio_heaps a5e7e985 [	:i if $GotParam$${StructQBKey do_unloads}$		:i $MusicStudio_Instrument_UnloadAll$		:i $UnLoadDrumKitAll$		:i $unload_songqpak$	:i endif	:i $MemDeleteHeap$${StructQBKey name = heap_song}$	:i $MusicStudio_Instrument_DeleteHeaps$	:i endfunction]Script memory_get_replay_heap 0x3a0307ab [	:i if $IsPS3$		:i return ${StructQBKey replay_heap = heap_debug}$	:i endif	:i return ${StructQBKey replay_heap = bottomupheap}$	:i endfunction]Script memory_should_put_zones_on_debug_heap 0x22ffa5f8 [	:i if $IsPS3$		:i if NOT $FinalBuild$			:i if $gotextramemory$				:i if $globalexists$${StructQBKey name = zones_on_debugheap}$					:i if (~$zones_on_debugheap$ = %i(1))						:i return ${StructQBKey true}$					:i endif				:i endif			:i endif		:i endif	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script memory_create_zone_maps eb2572cf [	:i $memory_get_heap_sizes$	:i $slop_heap$ = $heap_zones$	:i $main_mem_heap$ = $heap_zones$	:i $vram_heap$ = $heap_zones$	:i if $memory_should_put_zones_on_debug_heap$		:i $main_mem_heap$ = $heap_debug_rsx$		:i $slop_heap$ = $heap_debug$	:i endif	:i if $IsPS3$		:i $change$${			StructStruct Extra_Memory_Zones			{				StructHeader {}			}		}$			:i else 		:i if $globalexists$${StructQBKey name = g_extra_zone_memory}$			:i if (~$g_extra_zone_memory$ = %i(0))				:i $change$${					StructStruct Extra_Memory_Zones					{						StructHeader {}					}				}$							:i endif		:i else 			:i $change$${				StructStruct Extra_Memory_Zones				{					StructHeader {}				}			}$					:i endif	:i endif	:i if $DemoBuild$		:i %GLOBAL%$links$ = $g_demo_gh_zones$	:i else 		:i %GLOBAL%$links$ = $GHZones$	:i endif	:i $printf$${StructQBStringQs d8517ff0}$	:i $MemPushContext$%GLOBAL%$slop_heap$	:i if (~$ps2_venues$ = %i(1))		:i $CreatePakManMap$$map$ = $zones$$links$ = %GLOBAL%$links$$folder$ = %s("zones_ps2/")$allocheap$ = %GLOBAL%$main_mem_heap$$vramheap$ = %GLOBAL%$vram_heap$$processingheap$ = %GLOBAL%$slop_heap$	:i else 		:i $CreatePakManMap$$map$ = $zones$$links$ = %GLOBAL%$links$$folder$ = %s("zones/")$allocheap$ = %GLOBAL%$main_mem_heap$$vramheap$ = %GLOBAL%$vram_heap$$processingheap$ = %GLOBAL%$slop_heap$	:i endif	:i $MemPopContext$	:i if $IsXenon$		:i $GetFreeMemoryOnHeap$$heap$ = %GLOBAL%$slop_heap$		:i if (%GLOBAL%$free_memory$ < %GLOBAL%$heap_size_zone_slop_space_req$)			:i $scriptassert$%s("Zone pak allocation is too big. See above this assert for details of the largest (and thus the problem) zone: %a/%b")$a$ = %GLOBAL%$free_memory$$b$ = %GLOBAL%$heap_size_zone_slop_space_req$		:i endif	:i endif	:i endfunction]Script memory_create_ref_archive_names_heap e14a4410 [	:i $memory_get_heap_sizes$	:i $MemPushContext$${StructQBKey bottomupheap}$	:i $MemInitHeap$$name$ = %s("heap_ref_archive_names")$size$ = %GLOBAL%$heap_size_ref_archive_names$	:i $MemPopContext$	:i endfunction]Script memory_check_bottomup_space 0x10e65264 [	:i if NOT $RetailBuild$		:i $memory_get_heap_sizes$		:i $GetFreeMemoryOnHeap$${StructQBKey heap = bottomupheap}$		:i $finalprintf$%s("Free bottomup %a")$a$ = %GLOBAL%$free_memory$		:i if (%GLOBAL%$free_memory$ < %GLOBAL%$bottomup_runtime_size_required$)			:i $finalprintf$%s("%a Free memory on bottomup, %b required!")$a$ = %GLOBAL%$free_memory$$b$ = %GLOBAL%$bottomup_runtime_size_required$			:i $scriptassert$%s("%a Free memory on bottomup, %b required!")$a$ = %GLOBAL%$free_memory$$b$ = %GLOBAL%$bottomup_runtime_size_required$		:i endif		:i if $IsPS3$			:i $GetFreeMemoryOnHeap$${StructQBKey heap = BottomUp_VRAM}$			:i $finalprintf$%s("Free bottomupvram %a")$a$ = %GLOBAL%$free_memory$			:i if (%GLOBAL%$free_memory$ < %GLOBAL%$bottomup_vram_runtime_size_required$)				:i $finalprintf$%s("%a Free memory on bottomup*VRAM*, %b required!")$a$ = %GLOBAL%$free_memory$$b$ = %GLOBAL%$bottomup_vram_runtime_size_required$				:i $scriptassert$%s("%a Free memory on bottomup*VRAM*, %b required!")$a$ = %GLOBAL%$free_memory$$b$ = %GLOBAL%$bottomup_vram_runtime_size_required$			:i endif		:i endif	:i endif	:i endfunction]