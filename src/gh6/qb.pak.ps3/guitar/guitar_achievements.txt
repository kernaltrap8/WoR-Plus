Unknown [1c00000000000000000077c40000000000000000]SectionInteger gStar_Power_Triggered 0SectionArray Achievements_Table{	ArrayStruct	[		StructHeader		{			StructQBKey name = Achievement_NauseousNumerologist			StructQBKey fetcher = getplayerinfo			StructQBKey field = Score			StructInt comparator = 133337			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_NauseousNumerologist			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4112			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = during_song		}		StructHeader		{			StructQBKey name = Achievement_ScionsofExcess			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than			StructQBKey check_time = during_song		}		StructHeader		{			StructQBKey name = Achievement_ScionsofExcess			StructQBKey fetcher = GetBandInfo			StructQBKey field = current_mult			StructInt comparator = 11			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = during_song		}		StructHeader		{			StructQBKey name = Achievement_ScionsofExcess			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = during_song		}		StructHeader		{			StructQBKey name = Achievement_PatronoftheArts			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = jamsession			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PatronoftheArts			StructQBKey fetcher = ach_get_song_stars			StructQBKey field = stars			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PatronoftheArts			StructQBKey fetcher = getplayerinfo			StructQBKey field = total_notes			StructInt comparator = 200			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 4			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = ach_get_song_stars			StructQBKey field = stars			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = check_is_standard_band			StructQBKey field = standard_band			StructInt comparator = 1			StructQBKey condition_test = ach_check_not_equal			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_beginner			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_easy			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ApostatesofOrthodoxy			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 4			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = ach_get_song_stars			StructQBKey field = stars			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = check_is_standard_band			StructQBKey field = standard_band			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_beginner			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_easy			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_BearersoftheStandard			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MathematicSharpshooters			StructQBKey fetcher = GetBandInfo			StructQBKey field = Score			StructInt comparator = 1000			StructQBKey condition_test = ach_check_multiple_of			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MathematicSharpshooters			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MathematicSharpshooters			StructQBKey fetcher = GetBandInfo			StructQBKey field = Score			StructInt comparator = 0			StructQBKey condition_test = ach_check_not_equal			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MathematicSharpshooters			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DeerHunter			StructQBKey fetcher = get_player_or_band_info			StructQBKey field = Score			StructInt comparator = 6			StructQBKey condition_test = ach_check_multiple_of			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DeerHunter			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DeerHunter			StructQBKey fetcher = get_player_or_band_info			StructQBKey field = Score			StructInt comparator = 0			StructQBKey condition_test = ach_check_not_equal			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_band_config			StructQBKey field = num_guitars			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_band_config			StructQBKey field = num_bass			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_band_config			StructQBKey field = num_vocals			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_band_config			StructQBKey field = num_drums			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4112			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_scores_all_match			StructQBKey field = all_match			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_song_ratings			StructQBKey field = guitar_difficulty_rating			StructInt comparator = 0			StructQBKey condition_test = ach_check_greater_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StringTwins			StructQBKey fetcher = get_song_ratings			StructQBKey field = bass_difficulty_rating			StructInt comparator = 0			StructQBKey condition_test = ach_check_greater_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_StellarCenturion			StructQBKey fetcher = get_achievement_info			StructQBKey field = quest_star_power_deployed			StructInt comparator = 100			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GemCollector			StructQBKey fetcher = get_achievement_info			StructQBKey field = quest_notes_hit			StructInt comparator = 75000			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GemHoarder			StructQBKey fetcher = get_achievement_info			StructQBKey field = quest_notes_hit			StructInt comparator = 150000			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MythicalMillionaire			StructQBKey fetcher = getplayerinfo			StructQBKey field = Score			StructInt comparator = 1000000			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MythicalMillionaire			StructQBKey fetcher = quickplay_using_powers			StructQBKey field = using_powers			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MythicalMillionaire			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_momentum			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_momentum_plus			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_streakers			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_do_or_die			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_perfectionist			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SeasonedCompetitor			StructQBKey fetcher = get_achievement_info			StructQBKey field = played_faceoff			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AmateurAstrologer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AmateurAstrologer			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = current_award_points_total			StructInt comparator = 100			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_soundgardenshirt			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_soundgardenshirt			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = BlackRain			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = Achievement_AccomplishedAstrologer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AccomplishedAstrologer			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = current_award_points_total			StructInt comparator = 500			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AdeptAstrologer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AdeptAstrologer			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = current_award_points_total			StructInt comparator = 1000			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_johnnyjacket			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_johnnyjacket			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = current_award_points_total			StructInt comparator = 1500			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = Achievement_AceAstrologer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AceAstrologer			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = current_award_points_total			StructInt comparator = 2000			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldMaster			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldMaster			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = total_new_awards			StructInt comparator = 3			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DiamondMaster			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DiamondMaster			StructQBKey fetcher = quickplay_get_award_info			StructQBKey field = new_diamond_awards			StructInt comparator = 2			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = quickplay_get_band_award_info			StructQBKey field = num_band			StructInt comparator = 2			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 2			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = get_band_config			StructQBKey field = num_guitars			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = get_band_config			StructQBKey field = num_bass			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = get_band_config			StructQBKey field = num_vocals			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GoldStandard			StructQBKey fetcher = get_band_config			StructQBKey field = num_drums			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ManagerofFate			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ManagerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = playlist_size			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ManagerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = is_random			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ManagerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = num_5star_songs			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MockerofFate			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MockerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = playlist_size			StructInt comparator = 5			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MockerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = is_random			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MockerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = infinite			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_MockerofFate			StructQBKey fetcher = get_playlist_info			StructQBKey field = num_5star_songs			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SelfImprover			StructQBKey fetcher = quickplay_get_combo_award_info			StructQBKey field = total_new_above_gold_awards			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SelfImprover			StructQBKey fetcher = quickplay_get_target_info			StructQBKey field = targetting_player			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SelfImprover			StructQBKey fetcher = quickplay_get_target_info_primary			StructQBKey field = target			StructQBKey comparator = self			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SelfImprover			StructQBKey fetcher = quickplay_get_target_info			StructQBKey field = result			StructQBKey comparator = success			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChampionofChallenges			StructQBKey fetcher = quickplay_get_combo_award_info			StructQBKey field = total_new_above_gold_awards			StructInt comparator = 1			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChampionofChallenges			StructQBKey fetcher = quickplay_get_target_info			StructQBKey field = targetting_player			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChampionofChallenges			StructQBKey fetcher = quickplay_get_target_info_primary			StructQBKey field = target			StructQBKey comparator = other			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChampionofChallenges			StructQBKey fetcher = quickplay_get_target_info			StructQBKey field = result			StructQBKey comparator = success			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PlayeroftheEarWorm			StructQBKey fetcher = get_song_data			StructQBKey field = num_times_played			StructInt comparator = 10			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_UltimateAnswerer			StructQBKey fetcher = get_award_point_data			StructQBKey field = remaining_awards			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AlteredVirtuoso			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AlteredVirtuoso			StructQBKey fetcher = ach_get_song_stars			StructQBKey field = stars			StructInt comparator = 40			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_guitarheroshirt			StructQBKey fetcher = ach_get_song_stars			StructQBKey field = stars			StructInt comparator = 0			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = Achievement_PoorBoys			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PoorBoys			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = BohemianRhapsody			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PoorBoys			StructQBKey fetcher = ach_get_difficulties_vocals			StructQBKey field = num_medium_or_higher			StructInt comparator = 2			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Rush2112P4			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_medium_or_higher			StructInt comparator = 3			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = get_band_config			StructQBKey field = num_guitars			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = get_band_config			StructQBKey field = num_bass			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = get_band_config			StructQBKey field = num_vocals			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheMeek			StructQBKey fetcher = get_band_config			StructQBKey field = num_drums			StructInt comparator = 2			StructQBKey condition_test = ach_check_less_than			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GiantSlayer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GiantSlayer			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GiantSlayer			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = holywars			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GiantSlayer			StructQBKey fetcher = getplayerinfo			StructQBKey field = part			StructQBKey comparator = Bass			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_GiantSlayer			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_hard_or_higher			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChosenOne			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChosenOne			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChosenOne			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = FuryOfTheStorm			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChosenOne			StructQBKey fetcher = getplayerinfo			StructQBKey field = part			StructQBKey comparator = drum			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_ChosenOne			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_hard_or_higher			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 4096			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = GetNumPlayersInGame			StructQBKey field = num_players			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = blackwidow			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = getplayerinfo			StructQBKey field = part			StructQBKey comparator = guitar			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = ach_get_difficulties			StructQBKey field = num_expert			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_HandMutilator			StructQBKey fetcher = quickplay_using_powers			StructQBKey field = using_powers			StructInt comparator = 0			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheTrickster			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheTrickster			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Spiderman			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheTrickster			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheDynamo			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheDynamo			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Uprising			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheDynamo			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheSiren			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheSiren			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = BeenCaughtStealing			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheSiren			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheRecluse			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheRecluse			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = ChildrenOfTheGrave			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheRecluse			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AxeClaimer			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AxeClaimer			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Rush2112P7			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_AxeClaimer			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_legendaryguitar			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_legendaryguitar			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Rush2112P7			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_legendaryguitar			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = Achievement_TheExalted			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheExalted			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Bodies			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheExalted			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheBrute			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheBrute			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = paranoid			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheBrute			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheVigil			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheVigil			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = Renegade			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheVigil			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheEternal			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheEternal			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = BatCountry			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_TheEternal			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = just_completed			StructQBKey comparator = true			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DivineLiberator			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DivineLiberator			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = ThisDayWeFight			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_DivineLiberator			StructQBKey fetcher = get_current_level			StructQBKey field = current_level			StructQBKey comparator = load_z_FinalBattle			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_demigodhelmet			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_demigodhelmet			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = ThisDayWeFight			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = avatarassetaward_avt_demigodhelmet			StructQBKey fetcher = get_current_level			StructQBKey field = current_level			StructQBKey comparator = load_z_FinalBattle			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song			StructQBKey award_type = unlock_avatar		}		StructHeader		{			StructQBKey name = Achievement_SaviorofRock			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 256			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SaviorofRock			StructQBKey fetcher = Playlist_GetCurrentSong			StructQBKey field = current_song			StructQBKey comparator = SuddenDeathGH6Career			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_SaviorofRock			StructQBKey fetcher = get_current_level			StructQBKey field = current_level			StructQBKey comparator = load_z_FinalBattle			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PseudoPerfectionist			StructQBKey fetcher = GetPrevNumDominatedRegChapters			StructQBKey field = number_of_dominated_chapters			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PseudoPerfectionist			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = number_of_dominated_regular_chapters			StructInt comparator = 2			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PartialPerfectionist			StructQBKey fetcher = GetPrevNumDominatedRegChapters			StructQBKey field = number_of_dominated_chapters			StructInt comparator = 3			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PartialPerfectionist			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = number_of_dominated_regular_chapters			StructInt comparator = 4			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PerfectPerfectionist			StructQBKey fetcher = GetPrevNumDominatedRegChapters			StructQBKey field = number_of_dominated_chapters			StructInt comparator = 8			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_PerfectPerfectionist			StructQBKey fetcher = quest_chapter_totals_primary			StructQBKey field = number_of_dominated_regular_chapters			StructInt comparator = 9			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		]}SectionArray Tutorial_Achievements_Table{	ArrayStruct	[		StructHeader		{			StructQBKey name = Achievement_QuickLearner			StructQBKey fetcher = get_gametype_bitfield			StructQBKey field = mode			StructInt comparator = 65536			StructQBKey condition_test = ach_compare_nibbles			StructQBKey check_time = end_song		}		StructHeader		{			StructQBKey name = Achievement_QuickLearner			StructQBKey fetcher = ach_fullcombo_test			StructQBKey field = passed			StructInt comparator = 1			StructQBKey condition_test = ach_check_equality			StructQBKey check_time = end_song		}		]}SectionArray Feed_Achievements_Table{	ArrayStruct	[		StructHeader		{			StructQBKey name = Achievement_TrackerofDeeds			StructQBKey fetcher = get_achievement_info			StructQBKey field = ff_clicks			StructInt comparator = 5			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = feed_update		}		]}SectionArray Songlist_Based_Achievements{	ArrayStruct	[		StructHeader		{			StructQBKey name = Achievement_AnthemicArchivist			StructQBKey fetcher = get_cached_content_size			StructQBKey field = content_size			StructInt comparator = 115			StructQBKey condition_test = ach_check_greater_than_equal_to			StructQBKey check_time = songlist_update		}		]}SectionQBKey g_current_song xxxSectionInteger g_number_of_dominated_chapters -1SectionInteger g_number_of_dominated_regular_chapters -1Script Init_Achievements fb30e631 [	:i $kill_all_achievement_scripts$	:i $Playlist_GetCurrentSong$	:i $change$$g_current_song$ = %GLOBAL%$current_song$	:i $quest_chapter_totals_primary$	:i $change$$g_number_of_dominated_chapters$ = %GLOBAL%$number_of_dominated_chapters$	:i $change$$g_number_of_dominated_regular_chapters$ = %GLOBAL%$number_of_dominated_regular_chapters$	:i if $should_update_achievements$		:i $GetNumPlayersInGame$${StructQBKey local}$		:i if (%GLOBAL%$num_players$ > %i(0))			:i $GetFirstPlayer$${StructQBKey local}$			:i while 			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i $getplayerinfo$%GLOBAL%$player$$bot_play$			:i if (%i(1) = %GLOBAL%$bot_play$)				:i $getplayerinfo$%GLOBAL%$player$$bot_original_controller$$out$ = $controller$			:i endif			:i %GLOBAL%$ach_array$ = $Achievements_Table$			:i $gamemode_gettype$			:i if (%GLOBAL%$type$ = $tutorial$)				:i %GLOBAL%$ach_array$ = $Tutorial_Achievements_Table$			:i endif			:i $CreateAchievementRequirements$$controller$ = %GLOBAL%$controller$$arr$ = %GLOBAL%$ach_array$			:i $GetArraySize$~%GLOBAL%$ach_array$			:i $i$ = %i(0)			:i while 			:i $extendcrcplayer$((~%GLOBAL%$ach_array$:a{%GLOBAL%$i$:a})->$name$)%GLOBAL%$player$$out$ = $ach_id$			:i if ((~%GLOBAL%$ach_array$:a{%GLOBAL%$i$:a}->$check_time$) = $during_song$)				:i $spawnscriptnow$$in_song_achievement_test$$params$ = :s{(~%GLOBAL%$ach_array$:a{%GLOBAL%$i$:a})$player$ = %GLOBAL%$player$$controller$ = %GLOBAL%$controller$$time$ = $beginsong$:s}$id$ = %GLOBAL%$ach_id$			:i endif			:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))			:i loop_to %GLOBAL%$array_size$			:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$			:i loop_to %GLOBAL%$num_players$			:i $Block$${StructQBKey type = event_endsong_check_achievements}$			:i $GetFirstPlayer$${StructQBKey local}$			:i while 			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i $getplayerinfo$%GLOBAL%$player$$bot_play$			:i if (%i(1) = %GLOBAL%$bot_play$)				:i $getplayerinfo$%GLOBAL%$player$$bot_original_controller$$out$ = $controller$			:i endif			:i %GLOBAL%$ach_array$ = $Achievements_Table$			:i $gamemode_gettype$			:i if (%GLOBAL%$type$ = $tutorial$)				:i %GLOBAL%$ach_array$ = $Tutorial_Achievements_Table$			:i endif			:i $GetArraySize$~%GLOBAL%$ach_array$			:i $i$ = %i(0)			:i while 			:i $name$ = ((~%GLOBAL%$ach_array$:a{%GLOBAL%$i$:a})->$name$)			:i $extendcrcplayer$%GLOBAL%$name$%GLOBAL%$player$$out$ = $ach_id$			:i if $achievement_test$(~%GLOBAL%$ach_array$:a{%GLOBAL%$i$:a})$player$ = %GLOBAL%$player$$controller$ = %GLOBAL%$controller$$time$ = $endsong$			:i else 				:i $i2$ = (%GLOBAL%$i$ + %i(1))				:i while 				:i if (%GLOBAL%$i2$ = %GLOBAL%$array_size$)					:i continue				:i endif				:i $next_name$ = ((~%GLOBAL%$ach_array$:a{%GLOBAL%$i2$:a})->$name$)				:i if (%GLOBAL%$next_name$ = %GLOBAL%$name$)					:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))					:i %GLOBAL%$i2$ = (%GLOBAL%$i2$ + %i(1))				:i else 					:i continue				:i endif				:i loop_to 			:i endif			:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))			:i if (%GLOBAL%$i$ = %GLOBAL%$array_size$)				:i continue			:i endif			:i $mod$$a$ = %GLOBAL%$i$$b$ = %i(20)			:i if (%GLOBAL%$mod$ = %i(0))				:i $wait$${					StructInt 1					StructQBKey gameframe				}$							:i endif			:i loop_to 			:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$			:i loop_to %GLOBAL%$num_players$		:i endif	:i endif	:i endfunction]Script should_update_achievements 0x46c6376d [	:i if $DemoBuild$		:i return ${StructQBKey false}$	:i endif	:i if NOT $IsBandCheating$		:i $gamemode_gettype$		:i if ((%GLOBAL%$type$ !== $freeplay$) AND (~$game_mode$ !== $training$) AND (~$game_mode$ !== $practice$) AND (~$calibrate_lag_enabled$ = %i(0)))			:i if $InNetGame$				:i if $SessionIsOver$					:i return ${StructQBKey false}$				:i endif			:i endif			:i return ${StructQBKey true}$		:i endif	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script song_won_update_achievements 0x57349e26 [	:i $GetNumPlayersInGame$${StructQBKey local}$	:i $GetFirstPlayer$${StructQBKey local}$	:i if (%GLOBAL%$num_players$ > %i(1))		:i $gamemode_gettype$		:i if (%GLOBAL%$type$ = $quickplay$)			:i $getplayerinfo$%GLOBAL%$player$$band$			:i $GetBandInfo$%GLOBAL%$band$$stars$			:i if (%GLOBAL%$stars$ >= %i(5))				:i $change$$g_songlist_num_5star_songs$ = (~$g_songlist_num_5star_songs$ + %i(1))			:i endif		:i endif	:i endif	:i if $IsPS3$		:i $song_won_update_achievement_counters$$player$ = %GLOBAL%$player$	:i else 		:i while 		:i $song_won_update_achievement_counters$$player$ = %GLOBAL%$player$		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$		:i loop_to %GLOBAL%$num_players$	:i endif	:i $broadcastevent$${StructQBKey type = event_endsong_check_achievements}$	:i endfunction]Script test_achievements 0x9883809f [	:i $GetNumPlayersInGame$${StructQBKey local}$	:i $GetFirstPlayer$${StructQBKey local}$	:i if (%GLOBAL%$num_players$ > %i(0))		:i while 		:i $getplayerinfo$%GLOBAL%$player$$controller$		:i $CreateAchievementRequirements$$controller$ = %GLOBAL%$controller$$arr$ = %GLOBAL%$array_name$		:i $GetArraySize$~%GLOBAL%$array_name$		:i $i$ = %i(0)		:i while 		:i $achievement_test$(~%GLOBAL%$array_name$:a{%GLOBAL%$i$:a})$player$ = %GLOBAL%$player$$controller$ = %GLOBAL%$controller$		:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))		:i loop_to %GLOBAL%$array_size$		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$		:i loop_to %GLOBAL%$num_players$	:i endif	:i endfunction]Script test_feed_achievements 0x73424878 [	:i $kill_all_achievement_scripts$	:i $CreateAchievementRequirements$$controller$ = %GLOBAL%$controller$$arr$ = $Feed_Achievements_Table$	:i $GetArraySize$${StructQBString Feed_Achievements_Table}$	:i $i$ = %i(0)	:i while 	:i $achievement_test$(~$Feed_Achievements_Table$:a{%GLOBAL%$i$:a})$player$ = %i(4294967295)$controller$ = %GLOBAL%$controller$	:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))	:i loop_to %GLOBAL%$array_size$	:i endfunction]Script test_songlist_based_achievements 0x389652b6 [	:i $kill_all_achievement_scripts$	:i $test_achievements$${StructQBKey array_name = Songlist_Based_Achievements}$	:i endfunction]Script kill_all_achievement_scripts 0x1e2aa079 [	:i $KillSpawnedScript$${StructQBKey name = in_song_achievement_test}$	:i endfunction]Script in_song_achievement_test fb241ec4 [	:i $achievement_test$ isNull 	:i endfunction]Script achievement_test daf7297f [	${StructQBKey award_type = achievement}$	:i switch %GLOBAL%$fetcher$		:i case $Playlist_GetCurrentSong$			:i $fetcher$ = $ach_getcurrentsong$			:i endcase		case $GetPrevNumDominatedChapters$			:i $fetcher$ = $ach_prev_num_dominated_chapters$			:i endcase		case $GetPrevNumDominatedRegChapters$			:i $fetcher$ = $ach_prev_num_dominated_regular_chapters$			:i endcase		case $GetNumPlayersInGame$			:i endcase		case $getplayerinfo$			:i $params$ = :s{$player$ = %GLOBAL%$player$%GLOBAL%$field$:s}			:i endcase		case $GetBandInfo$			:i $getplayerinfo$%GLOBAL%$player$$band$			:i $params$ = :s{%GLOBAL%$band$%GLOBAL%$field$:s}			:i endcase		case $GetGlobalTags$			:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$			:i $params$ = :s{$savegame$ = %GLOBAL%$savegame$$param$ = %GLOBAL%$field$:s}			:i endcase		case $num_players_in_star_power$			:i $GetFirstPlayer$${StructQBKey on_screen}$			:i $params$ = :s{$player$ = %GLOBAL%$player$:s}			:i endcase		default 			:i $params$ = :s{$fetch_func$ = %GLOBAL%$fetcher$$player$ = %GLOBAL%$player$$controller$ = %GLOBAL%$controller$$field$ = %GLOBAL%$field$:s}			:i %GLOBAL%$fetcher$ = $FetchAchievementData$	:i end_switch	:i if (%GLOBAL%$check_time$ = $during_song$)		:i if $GotParam$${StructQBKey time}$			:i if (%GLOBAL%$time$ = $endsong$)				:i return 			:i endif		:i endif		:i while 		:i %GLOBAL%$fetcher$%GLOBAL%$params$$out$ = $term_a$		:i if %GLOBAL%$condition_test$$term_a$ = %GLOBAL%$term_a$$term_b$ = %GLOBAL%$comparator$			:i $achievement_test_pass$$name$ = %GLOBAL%$name$$controller$ = %GLOBAL%$controller$$award_type$ = %GLOBAL%$award_type$			:i continue		:i endif		:i $wait$${			StructInt 1			StructQBKey gameframe		}$				:i loop_to 	:i else 		:i if (%GLOBAL%$check_time$ = $end_song$)			:i if $GotParam$${StructQBKey time}$				:i if (%GLOBAL%$time$ = $beginsong$)					:i return 				:i endif			:i endif		:i endif		:i if (%GLOBAL%$check_time$ = $begin_song$)			:i if $GotParam$${StructQBKey time}$				:i if (%GLOBAL%$time$ = $endsong$)					:i return 				:i endif			:i endif		:i endif		:i %GLOBAL%$fetcher$%GLOBAL%$params$$out$ = $term_a$		:i if $GetType$${StructQBKey name = comparator}$			:i if (%GLOBAL%$type$ = $int$)				:i if $GetType$${StructQBKey name = term_a}$					:i if (%GLOBAL%$type$ = $float$)						:i $CastToInteger$${StructQBKey term_a}$					:i endif				:i endif			:i endif		:i endif		:i if %GLOBAL%$condition_test$$term_a$ = %GLOBAL%$term_a$$term_b$ = %GLOBAL%$comparator$			:i $finalprintf$^[dcbc46d3]^$a$ = %GLOBAL%$name$$b$ = %GLOBAL%$fetcher$$c$ = %GLOBAL%$field$$d$ = %GLOBAL%$condition_test$$e$ = %GLOBAL%$comparator$$s$ = %GLOBAL%$term_a$$t$ = %GLOBAL%$award_type$$p$ = %GLOBAL%$player$			:i $achievement_test_pass$$name$ = %GLOBAL%$name$$controller$ = %GLOBAL%$controller$$award_type$ = %GLOBAL%$award_type$			:i return ${StructQBKey true}$		:i else 			:i $finalprintf$^[5c3bd148]^$a$ = %GLOBAL%$name$$b$ = %GLOBAL%$fetcher$$c$ = %GLOBAL%$field$$d$ = %GLOBAL%$condition_test$$e$ = %GLOBAL%$comparator$$s$ = %GLOBAL%$term_a$$t$ = %GLOBAL%$award_type$$p$ = %GLOBAL%$player$			:i return ${StructQBKey false}$		:i endif	:i endif	:i endfunction]Script dump_req_arr 0x4332f866 [	:i $GetArraySize$${StructQBString Achievements_Table}$	:i $i$ = %i(0)	:i while 	:i $name$ = (~$Achievements_Table$:a{%GLOBAL%$i$:a}->$name$)	:i $get_achievement_structure$$achievement_name$ = %GLOBAL%$name$$controller$ = %i(0)	:i $printstruct$%GLOBAL%$achievement_structure$	:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))	:i loop_to %GLOBAL%$array_size$	:i endfunction]Script achievement_test_pass d14e9514 [	:i $get_achievement_structure$$achievement_name$ = %GLOBAL%$name$$controller$ = %GLOBAL%$controller$	:i $SetArrayElement$$arrayName$ = %GLOBAL%$achievement_structure$$globalarray$$index$ = %i(1)$newValue$ = ((~%GLOBAL%$achievement_structure$:a{%i(1):a}) + %i(1))	:i if ((~%GLOBAL%$achievement_structure$:a{%i(0):a}) = (~%GLOBAL%$achievement_structure$:a{%i(1):a}))		:i $finalprintf$^[98bdbceb]^$a$ = %GLOBAL%$name$		:i $fire_achievement$$name$ = %GLOBAL%$name$$controller$ = %GLOBAL%$controller$$type$ = %GLOBAL%$award_type$	:i endif	:i endfunction]Script ach_check_equality c100d0fa [	:i if (%GLOBAL%$term_a$ = %GLOBAL%$term_b$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script ach_check_greater_than_equal_to 0x675063c8 [	:i if (%GLOBAL%$term_a$ >= %GLOBAL%$term_b$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script ach_check_greater_than e67506ef [	:i if (%GLOBAL%$term_a$ > %GLOBAL%$term_b$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script ach_check_less_than 0x564854bf [	:i if (%GLOBAL%$term_a$ < %GLOBAL%$term_b$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script ach_compare_nibbles 0x256902ac [	:i if NOT (%GLOBAL%$term_a$ AND %GLOBAL%$term_b$)		:i return ${StructQBKey false}$	:i else 		:i return ${StructQBKey true}$	:i endif	:i endfunction]Script ach_check_not_equal 0x7ce0a6bb [	:i if NOT (%GLOBAL%$term_a$ = %GLOBAL%$term_b$)		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script ach_check_multiple_of 0x1dcc77b7 [	:i $mod$$a$ = %GLOBAL%$term_a$$b$ = %GLOBAL%$term_b$	:i if (%GLOBAL%$mod$ = %i(0))		:i return ${StructQBKey true}$	:i else 		:i return ${StructQBKey false}$	:i endif	:i endfunction]Script get_achievement_structure c01a97bd [	:i $FormatText$$textname$ = $controller_suffix$%s("_%d")$d$ = %GLOBAL%$controller$	:i $extendcrc$%GLOBAL%$achievement_name$%GLOBAL%$controller_suffix$$out$ = $achievement_structure$	:i return $achievement_structure$ = %GLOBAL%$achievement_structure$	:i endfunction]Script fire_achievement 0x4bb08260 [	${StructQBKey type = achievement}$	:i if $DemoBuild$		:i return ${StructQBKey false}$	:i endif	:i $printf$^[a6e2a7fb]^$s$ = %GLOBAL%$name$$d$ = %GLOBAL%$controller$$t$ = %GLOBAL%$type$	:i if (%GLOBAL%$type$ = $achievement$)		:i $WriteAchievements$$achievement$ = %GLOBAL%$name$$controller_id$ = %GLOBAL%$controller$	:i elseif (%GLOBAL%$type$ = $unlock_avatar$)		:i $UnlockAvatar$$avatar_asset$ = %GLOBAL%$name$$controller_id$ = %GLOBAL%$controller$	:i endif	:i endfunction]Script debugunlockavatar1 0x1c01adff [	:i $printf$${StructString 0x00000000 = "debugunlockavatar1 : Called!"}$	:i $UnlockAvatar$$avatar_asset$ = $avatarassetaward_avt_johnnyjacket$$controller_id$ = (~$primary_controller$)	:i endfunction]Script debugunlockavatar2 0x6b0aa7a9 [	:i $printf$${StructString 0x00000000 = "debugunlockavatar2 : Called!"}$	:i $UnlockAvatar$$avatar_asset$ = $avatarassetaward_avt_guitarheroshirt$$controller_id$ = (~$primary_controller$)	:i endfunction]Script debugunlockavatar3 a42b0963 [	:i $printf$${StructString 0x00000000 = "debugunlockavatar3 : Called!"}$	:i $UnlockAvatar$$avatar_asset$ = $avatarassetaward_avt_soundgardenshirt$$controller_id$ = (~$primary_controller$)	:i endfunction]Script debugunlockavatar4 b07c84b9 [	:i $printf$${StructString 0x00000000 = "debugunlockavatar4 : Called!"}$	:i $UnlockAvatar$$avatar_asset$ = $avatarassetaward_avt_legendaryguitar$$controller_id$ = (~$primary_controller$)	:i endfunction]Script debugunlockavatar5 bdd87579 [	:i $printf$${StructString 0x00000000 = "debugunlockavatar5 : Called!"}$	:i $UnlockAvatar$$avatar_asset$ = $avatarassetaward_avt_demigodhelmet$$controller_id$ = (~$primary_controller$)	:i endfunction]Script check_is_avatar ec2ac039 [	:i $getplayerinfo$%GLOBAL%$player$$character_id$	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i if $is_avatar_character$$id$ = %GLOBAL%$character_id$$savegame$ = %GLOBAL%$savegame$		:i return ${StructInt is_avatar = 1}$	:i else 		:i return ${StructInt is_avatar = 0}$	:i endif	:i endfunction]Script quickplay_using_powers 0x952f3a19 [	:i if $GMan_IsPowerScoreEnabled$		:i return ${StructInt using_powers = 1}$	:i else 		:i return ${StructInt using_powers = 0}$	:i endif	:i endfunction]Script get_song_completion_precentage f10391ae [	:i $gman_songfunc$${StructQBKey func = get_current_song}$	:i $getsongtimems$	:i $SongFileManager$$func$ = $get_song_end_time$$song_name$ = %GLOBAL%$current_song$	:i $completion_percentage$ = %i(0)	:i if (%GLOBAL%$total_end_time$ > %i(0))		:i %GLOBAL%$completion_percentage$ = ((%GLOBAL%$time$ / %GLOBAL%$total_end_time$) * %i(100))	:i endif	:i if (%GLOBAL%$completion_percentage$ > %i(100))		:i %GLOBAL%$completion_percentage$ = %i(100)	:i endif	:i $printf$^[415136c5]^$a$ = %GLOBAL%$time$$b$ = %GLOBAL%$total_end_time$$c$ = %GLOBAL%$completion_percentage$	:i return $completion_percentage$ = %GLOBAL%$completion_percentage$	:i endfunction]Script ach_get_song_stars b96cd867 [	:i $getplayerinfo$%GLOBAL%$player$$band$	:i $GetBandInfo$%GLOBAL%$band$$projected_song_stars$	:i return $stars$ = %GLOBAL%$projected_song_stars$	:i endfunction]Script ach_get_difficulties 0x605172fb [	${StructQBKey part = None}$	:i $num_beginner$ = %i(0)	:i $num_easy$ = %i(0)	:i $num_medium$ = %i(0)	:i $num_hard$ = %i(0)	:i $num_expert$ = %i(0)	:i $GetNumPlayersInGame$	:i $GetFirstPlayer$	:i while 	:i if NOT (%GLOBAL%$part$ = $None$)		:i $getplayerinfo$%GLOBAL%$player$$part$$out$ = $current_part$	:i else 		:i $current_part$ = $None$	:i endif	:i if (%GLOBAL%$part$ = %GLOBAL%$current_part$)		:i $getplayerinfo$%GLOBAL%$player$$difficulty$		:i switch %GLOBAL%$difficulty$			:i case $beginner$				:i %GLOBAL%$num_beginner$ = (%GLOBAL%$num_beginner$ + %i(1))				:i endcase			case $easy$				:i %GLOBAL%$num_easy$ = (%GLOBAL%$num_easy$ + %i(1))				:i endcase			case $medium$				:i %GLOBAL%$num_medium$ = (%GLOBAL%$num_medium$ + %i(1))				:i endcase			case $hard$				:i %GLOBAL%$num_hard$ = (%GLOBAL%$num_hard$ + %i(1))				:i endcase			case $expert$				:i %GLOBAL%$num_expert$ = (%GLOBAL%$num_expert$ + %i(1))				:i endcase			default 				:i $scriptassert$^[d06add8c]^$s$ = %GLOBAL%$part$		:i end_switch	:i endif	:i $GetNextPlayer$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players$	:i $num_medium_or_higher$ = (%GLOBAL%$num_medium$ + %GLOBAL%$num_hard$ + %GLOBAL%$num_expert$)	:i $num_hard_or_higher$ = (%GLOBAL%$num_hard$ + %GLOBAL%$num_expert$)	:i return $num_beginner$ = %GLOBAL%$num_beginner$$num_easy$ = %GLOBAL%$num_easy$$num_medium$ = %GLOBAL%$num_medium$$num_hard$ = %GLOBAL%$num_hard$$num_expert$ = %GLOBAL%$num_expert$$num_medium_or_higher$ = %GLOBAL%$num_medium_or_higher$$num_hard_or_higher$ = %GLOBAL%$num_hard_or_higher$	:i endfunction]Script ach_get_difficulties_guitar b92afd50 [	:i $ach_get_difficulties$${StructQBKey part = guitar}$	:i return isNull 	:i endfunction]Script ach_get_difficulties_bass 0x7494e954 [	:i $ach_get_difficulties$${StructQBKey part = Bass}$	:i return isNull 	:i endfunction]Script ach_get_difficulties_drum 0x1d4909b3 [	:i $ach_get_difficulties$${StructQBKey part = drum}$	:i return isNull 	:i endfunction]Script ach_get_difficulties_vocals aec9491e [	:i $ach_get_difficulties$${StructQBKey part = Vocals}$	:i return isNull 	:i endfunction]Script get_progression_stars bd7174d4 [	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i $get_current_progression_stars$$savegame$ = %GLOBAL%$savegame$	:i return $total_stars$ = %GLOBAL%$total_stars$	:i endfunction]Script quest_encore_complete 0x9b831b5a [	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i if $quest_progression_check_encore_complete$$chapter$ = %GLOBAL%$field$$savegame$ = %GLOBAL%$savegame$		:i return ${StructQBKey term_a = true}$	:i else 		:i return ${StructQBKey term_a = false}$	:i endif	:i endfunction]Script quest_encore_complete_primary f5b8f0ca [	:i $quest_encore_complete$$controller$ = (~$primary_controller$)$field$ = %GLOBAL%$field$	:i return $term_a$ = %GLOBAL%$term_a$	:i endfunction]Script quest_chapter_dominated 0x2f767ec5 [	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i if $quest_progression_check_chapter_dominated$$chapter$ = %GLOBAL%$field$$savegame$ = %GLOBAL%$savegame$		:i return ${StructQBKey term_a = true}$	:i else 		:i return ${StructQBKey term_a = false}$	:i endif	:i endfunction]Script quest_chapter_totals 0x78c8e15a [	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i $quest_progression_get_number_of_completed_chapters$$savegame$ = %GLOBAL%$savegame$	:i %GLOBAL%$num_unfinished_chapters$ = (%GLOBAL%$number_of_chapters$ - %GLOBAL%$number_of_unlocked_chapters$)	:i %GLOBAL%$num_undominated_chapters$ = (%GLOBAL%$number_of_chapters$ - %GLOBAL%$number_of_dominated_chapters$)	:i if ((~$g_just_completed_chapter$) = %i(1))		:i %GLOBAL%$just_completed$ = $true$	:i else 		:i %GLOBAL%$just_completed$ = $false$	:i endif	:i return isNull 	:i endfunction]Script quest_chapter_totals_primary b21f6dc9 [	:i $get_savegame_from_controller$$controller$ = (~$primary_controller$)	:i $quest_progression_get_number_of_completed_chapters$$savegame$ = %GLOBAL%$savegame$	:i %GLOBAL%$num_unfinished_chapters$ = (%GLOBAL%$number_of_chapters$ - %GLOBAL%$number_of_unlocked_chapters$)	:i %GLOBAL%$num_undominated_chapters$ = (%GLOBAL%$number_of_chapters$ - %GLOBAL%$number_of_dominated_chapters$)	:i if ((~$g_just_completed_chapter$) = %i(1))		:i %GLOBAL%$just_completed$ = $true$	:i else 		:i %GLOBAL%$just_completed$ = $false$	:i endif	:i return isNull 	:i endfunction]Script get_player_or_band_info 0x02954b0f [	${Unknown [0001240067e6859a6969696900000000]}$	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(1))		:i $getplayerinfo$%GLOBAL%$player$$band$		:i $GetBandInfo$%GLOBAL%$band$$Score$	:i else 		:i $getplayerinfo$%GLOBAL%$player$$Score$	:i endif	:i return $Score$ = %GLOBAL%$Score$	:i endfunction]Script quickplay_get_combo_award_info b467b9bc [	${Unknown [0001240067e6859a6969696900000000]}$	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(1))		:i $quickplay_get_band_award_info$	:i else 		:i $quickplay_get_award_info$$player$ = %GLOBAL%$player$	:i endif	:i return :s{		:i $gold_awards$ = %GLOBAL%$gold_awards$		:i $diamond_awards$ = %GLOBAL%$diamond_awards$		:i $platinum_awards$ = %GLOBAL%$platinum_awards$		:i $new_gold_awards$ = %GLOBAL%$new_gold_awards$		:i $new_diamond_awards$ = %GLOBAL%$new_diamond_awards$		:i $new_platinum_awards$ = %GLOBAL%$new_platinum_awards$		:i $total_awards$ = %GLOBAL%$total_awards$		:i $total_new_awards$ = %GLOBAL%$total_new_awards$		:i $total_new_above_gold_awards$ = %GLOBAL%$total_new_above_gold_awards$	:i :s}	:i endfunction]Script quickplay_get_award_info f1250aaf [	${Unknown [0001240067e6859a6969696900000000]}$	:i $gold_awards$ = %i(0)	:i $diamond_awards$ = %i(0)	:i $platinum_awards$ = %i(0)	:i $new_gold_awards$ = %i(0)	:i $new_diamond_awards$ = %i(0)	:i $new_platinum_awards$ = %i(0)	:i $total_awards$ = %i(0)	:i $total_new_awards$ = %i(0)	:i $total_new_above_gold_awards$ = %i(0)	:i $quickplay_get_overall_awards_progress$$player$ = %GLOBAL%$player$	:i if NOT $GMan_IsPowerScoreEnabled$		:i $quickplay_get_challenge_outro_stats$$player$ = %GLOBAL%$player$		:i $fastgetarraysize$$array$ = (%GLOBAL%$player_challenge_stats$)		:i if (%GLOBAL%$array_size$ > %i(0))			:i %GLOBAL%$i$ = %i(0)			:i while 			:i %GLOBAL%$current_level$ = ((%GLOBAL%$player_challenge_stats$:a{%GLOBAL%$i$:a})->$challenge_grade$)			:i %GLOBAL%$previous_level$ = ((%GLOBAL%$player_challenge_stats$:a{%GLOBAL%$i$:a})->$previous_grade$)			:i if (%GLOBAL%$current_level$ > %i(0))				:i %GLOBAL%$total_awards$ = (%GLOBAL%$total_awards$ + %i(1))				:i if (%GLOBAL%$current_level$ = %i(1))					:i %GLOBAL%$gold_awards$ = (%GLOBAL%$gold_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_gold_awards$ = (%GLOBAL%$new_gold_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))					:i endif				:i endif				:i if (%GLOBAL%$current_level$ = %i(2))					:i %GLOBAL%$platinum_awards$ = (%GLOBAL%$platinum_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_platinum_awards$ = (%GLOBAL%$new_platinum_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))						:i %GLOBAL%$total_new_above_gold_awards$ = (%GLOBAL%$total_new_above_gold_awards$ + %i(1))					:i endif				:i endif				:i if (%GLOBAL%$current_level$ = %i(3))					:i %GLOBAL%$diamond_awards$ = (%GLOBAL%$diamond_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_diamond_awards$ = (%GLOBAL%$new_diamond_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))						:i %GLOBAL%$total_new_above_gold_awards$ = (%GLOBAL%$total_new_above_gold_awards$ + %i(1))					:i endif				:i endif			:i endif			:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))			:i loop_to %GLOBAL%$array_size$		:i endif	:i endif	:i return :s{		:i $gold_awards$ = %GLOBAL%$gold_awards$		:i $diamond_awards$ = %GLOBAL%$diamond_awards$		:i $platinum_awards$ = %GLOBAL%$platinum_awards$		:i $new_gold_awards$ = %GLOBAL%$new_gold_awards$		:i $new_diamond_awards$ = %GLOBAL%$new_diamond_awards$		:i $new_platinum_awards$ = %GLOBAL%$new_platinum_awards$		:i $total_awards$ = %GLOBAL%$total_awards$		:i $total_new_awards$ = %GLOBAL%$total_new_awards$		:i $total_new_above_gold_awards$ = %GLOBAL%$total_new_above_gold_awards$		:i $current_award_points_total$ = %GLOBAL%$current_award_points_total$	:i :s}	:i $player_challenge_stats$ = :a{:a}	:i $previous_level$ = %i(0)	:i $current_award_points_total$ = %i(0)	:i endfunction]Script quickplay_get_band_award_info cf8d82bd [	:i $gold_awards$ = %i(0)	:i $diamond_awards$ = %i(0)	:i $platinum_awards$ = %i(0)	:i $new_gold_awards$ = %i(0)	:i $new_diamond_awards$ = %i(0)	:i $new_platinum_awards$ = %i(0)	:i $total_awards$ = %i(0)	:i $total_new_awards$ = %i(0)	:i $total_new_above_gold_awards$ = %i(0)	:i $num_guitars$ = %i(0)	:i $num_bass$ = %i(0)	:i $num_drums$ = %i(0)	:i $num_vocals$ = %i(0)	:i $num_band$ = %i(0)	:i $quickplay_get_overall_awards_progress$$player$ = %GLOBAL%$player$	:i if NOT $GMan_IsPowerScoreEnabled$		:i $quickplay_get_challenge_outro_stats$${StructInt player = 0}$		:i $GetArraySize$%GLOBAL%$player_challenge_stats$		:i if (%GLOBAL%$array_size$ > %i(0))			:i %GLOBAL%$i$ = %i(0)			:i while 			:i %GLOBAL%$current_level$ = ((%GLOBAL%$player_challenge_stats$:a{%GLOBAL%$i$:a})->$challenge_grade$)			:i if (%GLOBAL%$current_level$ > %i(0))				:i %GLOBAL%$num_band$ = (%GLOBAL%$num_band$ + %i(1))			:i endif			:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))			:i loop_to %GLOBAL%$array_size$		:i endif		:i $GetNumPlayersInGame$		:i $GetFirstPlayer$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$		:i $quickplay_get_challenge_outro_stats$$player$ = %GLOBAL%$player$		:i $GetArraySize$%GLOBAL%$player_challenge_stats$		:i if (%GLOBAL%$array_size$ > %i(0))			:i %GLOBAL%$i$ = %i(0)			:i while 			:i %GLOBAL%$current_level$ = ((%GLOBAL%$player_challenge_stats$:a{%GLOBAL%$i$:a})->$challenge_grade$)			:i %GLOBAL%$previous_level$ = ((%GLOBAL%$player_challenge_stats$:a{%GLOBAL%$i$:a})->$previous_grade$)			:i if (%GLOBAL%$current_level$ > %i(0))				:i %GLOBAL%$total_awards$ = (%GLOBAL%$total_awards$ + %i(1))				:i if (%GLOBAL%$current_level$ = %i(1))					:i %GLOBAL%$gold_awards$ = (%GLOBAL%$gold_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_gold_awards$ = (%GLOBAL%$new_gold_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))					:i endif				:i endif				:i if (%GLOBAL%$current_level$ = %i(2))					:i %GLOBAL%$platinum_awards$ = (%GLOBAL%$platinum_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_platinum_awards$ = (%GLOBAL%$new_platinum_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))					:i endif				:i endif				:i if (%GLOBAL%$current_level$ = %i(3))					:i %GLOBAL%$diamond_awards$ = (%GLOBAL%$diamond_awards$ + %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$new_diamond_awards$ = (%GLOBAL%$new_diamond_awards$ + %i(1))						:i %GLOBAL%$total_new_awards$ = (%GLOBAL%$total_new_awards$ + %i(1))					:i endif				:i endif				:i if (%GLOBAL%$current_level$ > %i(0))					:i switch %GLOBAL%$part$						:i case $guitar$							:i %GLOBAL%$num_guitars$ = (%GLOBAL%$num_guitars$ + %i(1))							:i endcase						case $Bass$							:i %GLOBAL%$num_bass$ = (%GLOBAL%$num_bass$ + %i(1))							:i endcase						case $drum$							:i %GLOBAL%$num_drums$ = (%GLOBAL%$num_drums$ + %i(1))							:i endcase						case $Vocals$							:i %GLOBAL%$num_vocals$ = (%GLOBAL%$num_vocals$ + %i(1))							:i endcase						default 							:i $scriptassert$^[1aad6e58]^$s$ = %GLOBAL%$part$					:i end_switch				:i endif				:i if (%GLOBAL%$current_level$ > %i(1))					:i if NOT (%GLOBAL%$current_level$ = %GLOBAL%$previous_level$)						:i %GLOBAL%$total_new_above_gold_awards$ = (%GLOBAL%$total_new_above_gold_awards$ + %i(1))					:i endif				:i endif			:i endif			:i %GLOBAL%$i$ = (%GLOBAL%$i$ + %i(1))			:i loop_to %GLOBAL%$array_size$		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players$	:i endif	:i return :s{		:i $gold_awards$ = %GLOBAL%$gold_awards$		:i $diamond_awards$ = %GLOBAL%$diamond_awards$		:i $platinum_awards$ = %GLOBAL%$platinum_awards$		:i $new_gold_awards$ = %GLOBAL%$new_gold_awards$		:i $new_diamond_awards$ = %GLOBAL%$new_diamond_awards$		:i $new_platinum_awards$ = %GLOBAL%$new_platinum_awards$		:i $total_awards$ = %GLOBAL%$total_awards$		:i $total_new_awards$ = %GLOBAL%$total_new_awards$		:i $total_new_above_gold_awards$ = %GLOBAL%$total_new_above_gold_awards$		:i $num_guitars$ = %GLOBAL%$num_guitars$		:i $num_bass$ = %GLOBAL%$num_bass$		:i $num_drums$ = %GLOBAL%$num_drums$		:i $num_vocals$ = %GLOBAL%$num_vocals$		:i $num_band$ = %GLOBAL%$num_band$	:i :s}	:i endfunction]Script quickplay_get_target_info_primary f5eade3a [	:i $quickplay_get_target_info$$controller$ = (~$primary_controller$)	:i return $targetting$ = %GLOBAL%$targetting$$targetting_player$ = %GLOBAL%$targetting_player$$target$ = %GLOBAL%$target$$result$ = %GLOBAL%$result$	:i endfunction]Script quickplay_get_target_info 0x4a6fb7a5 [	:i $targetting$ = %i(0)	:i $targetting_player$ = %i(0)	:i $target$ = $null$	:i $result$ = $null$	:i if $GMan_GoalIsActive$${StructQBKey goal = quickplay}$		:i $GMan_GetData$${			StructQBKey goal = quickplay			StructQBKey name = targeted_challenge		}$				:i if NOT $ChecksumEquals$$a$ = %GLOBAL%$targeted_challenge$$b$ = $null$			:i %GLOBAL%$targetting$ = %i(1)			:i $quickplay_targeting_player_get_result$			:i if NOT $ChecksumEquals$$a$ = %GLOBAL%$result$$b$ = $not_targeting_player$				:i %GLOBAL%$targetting_player$ = %i(1)				:i $quickplay_targeting_player_get_opponent_gamertag$				:i %GLOBAL%$opponent_gamertag$ = %GLOBAL%$gamertag$				:i $NetSessionFunc$$func$ = $get_gamertag$$params$ = :s{$controller$ = %GLOBAL%$controller$:s}				:i if (%GLOBAL%$opponent_gamertag$ = %GLOBAL%$name$)					:i %GLOBAL%$target$ = $self$				:i else 					:i %GLOBAL%$target$ = $other$				:i endif			:i endif		:i endif	:i endif	:i return $targetting$ = %GLOBAL%$targetting$$targetting_player$ = %GLOBAL%$targetting_player$$target$ = %GLOBAL%$target$$result$ = %GLOBAL%$result$	:i endfunction]Script get_playlist_info 0x3a36d969 [	:i return $num_5star_songs$ = (~$g_songlist_num_5star_songs$)$is_random$ = (~$g_songlist_random_playlist$)$infinite$ = (~$g_songlist_infinite_playlist$)$playlist_size$ = (~$g_songlist_playlist_size$)	:i endfunction]Script get_band_config 0x16b358f6 [	:i $num_guitars$ = %i(0)	:i $num_bass$ = %i(0)	:i $num_drums$ = %i(0)	:i $num_vocals$ = %i(0)	:i $GetNumPlayersInGame$	:i $GetFirstPlayer$	:i while 	:i $getplayerinfo$%GLOBAL%$player$$part$	:i switch %GLOBAL%$part$		:i case $guitar$			:i %GLOBAL%$num_guitars$ = (%GLOBAL%$num_guitars$ + %i(1))			:i endcase		case $Bass$			:i %GLOBAL%$num_bass$ = (%GLOBAL%$num_bass$ + %i(1))			:i endcase		case $drum$			:i %GLOBAL%$num_drums$ = (%GLOBAL%$num_drums$ + %i(1))			:i endcase		case $Vocals$			:i %GLOBAL%$num_vocals$ = (%GLOBAL%$num_vocals$ + %i(1))			:i endcase		default 			:i $scriptassert$^[1aad6e58]^$s$ = %GLOBAL%$part$	:i end_switch	:i $GetNextPlayer$$player$ = %GLOBAL%$player$	:i loop_to %GLOBAL%$num_players$	:i return $num_guitars$ = %GLOBAL%$num_guitars$$num_bass$ = %GLOBAL%$num_bass$$num_drums$ = %GLOBAL%$num_drums$$num_vocals$ = %GLOBAL%$num_vocals$	:i endfunction]Script get_current_level 0x9bf908b6 [	:i return $current_level$ = (~$current_level$)	:i endfunction]Script get_scores_all_match 0x047bd5b3 [	:i $all_match$ = %i(0)	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(1))		:i %GLOBAL%$all_match$ = %i(1)		:i $GetFirstPlayer$		:i $getplayerinfo$%GLOBAL%$player$$Score$$out$ = $compare_score$		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$Score$		:i if NOT (%GLOBAL%$Score$ = %GLOBAL%$compare_score$)			:i %GLOBAL%$all_match$ = %i(0)			:i continue		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to (%GLOBAL%$num_players$ - %i(1))	:i endif	:i return $all_match$ = %GLOBAL%$all_match$	:i endfunction]Script get_song_fc 0x87c10d5d [	:i $song_fc$ = %i(0)	:i $getplayerinfo$%GLOBAL%$player$$notes_hit$	:i $getplayerinfo$%GLOBAL%$player$$total_notes$	:i if (%GLOBAL%$notes_hit$ = %GLOBAL%$total_notes$)		:i %GLOBAL%$song_fc$ = %i(1)	:i endif	:i return $song_fc$ = %GLOBAL%$song_fc$	:i endfunction]Script get_achievement_info 0x239619ee [	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = %GLOBAL%$field$	:i return isNull 	:i endfunction]Script get_gametype_bitfield 0x4681047b [	:i $mode$ = %i(0)	:i $gamemode_gettype$	:i switch (%GLOBAL%$type$)		:i case $quickplay$			:i %GLOBAL%$mode$ = %i(4096)			:i endcase		case $career$			:i %GLOBAL%$mode$ = %i(256)			:i endcase		case $competitive$			:i %GLOBAL%$mode$ = %i(16)			:i endcase		case $freeplay$			:i %GLOBAL%$mode$ = %i(1)			:i endcase		case $tutorial$			:i %GLOBAL%$mode$ = %i(65536)			:i endcase		default 			:i $scriptassert$^[66bb1769]^$s$ = %GLOBAL%$type$	:i end_switch	:i return %GLOBAL%$mode$	:i endfunction]Script song_won_update_achievement_counters 0x6b290ff7 [	:i $gamemode_gettype$	:i $GetNumPlayersInGame$	:i $get_savegame_from_player$$player$ = %GLOBAL%$player$	:i $achievement_global_tags$ = :s{:s}	:i switch (%GLOBAL%$type$)		:i case $quickplay$			:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_quickplay$ = %i(1):s}			:i endcase		case $competitive$			:i switch ((~$competitive_rules$))				:i case $faceoff$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_faceoff$ = %i(1):s}					:i endcase				case $momentum$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_momentum$ = %i(1):s}					:i endcase				case $momentum_plus$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_momentum_plus$ = %i(1):s}					:i endcase				case $streakers$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_streakers$ = %i(1):s}					:i endcase				case $do_or_die$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_do_or_die$ = %i(1):s}					:i endcase				case $perfectionist$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_perfectionist$ = %i(1):s}					:i endcase				case $elimination$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_elimination$ = %i(1):s}					:i endcase				case $team_faceoff$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_faceoff$ = %i(1):s}					:i endcase				case $team_momentum$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_momentum$ = %i(1):s}					:i endcase				case $team_streakers$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_streakers$ = %i(1):s}					:i endcase				case $team_do_or_die$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_do_or_die$ = %i(1):s}					:i endcase				case $team_perfectionist$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_perfectionist$ = %i(1):s}					:i endcase				case $team_elimination$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_team_elimination$ = %i(1):s}					:i endcase				case $band_vs_band$					:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_p8_pro_faceoff$ = %i(1):s}					:i endcase				default 					:i $scriptassert$^[a6d815a7]^$s$ = (~$competitive_rules$)			:i end_switch			:i endcase		case $career$			:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$played_career$ = %i(1):s}			:i endcase		case $tutorial$			:i $printf$${StructQBStringQs 0x05111391}$			:i endcase		case $freeplay$			:i $printf$${StructQBStringQs 0x89ed9637}$			:i endcase		default 			:i $scriptassert$^[a6d815a7]^$s$ = %GLOBAL%$type$	:i end_switch	:i if (%GLOBAL%$type$ = $quickplay$)		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $quickplay_songs_completed$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$quickplay_songs_completed$ = (%GLOBAL%$quickplay_songs_completed$ + %i(1)):s}	:i elseif ((~$is_network_game$ = %i(1)) AND (%GLOBAL%$type$ = $competitive$) AND (~$competitive_rules$ = $faceoff$))		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $online_pro_faceoff_games_played$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$online_pro_faceoff_games_played$ = (%GLOBAL%$online_pro_faceoff_games_played$ + %i(1)):s}	:i endif	:i if ((~$game_mode$ = $fest_mode$) AND (%GLOBAL%$num_players$ = %i(4)))		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $four_player_shredfest_games_played$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$four_player_shredfest_games_played$ = (%GLOBAL%$four_player_shredfest_games_played$ + %i(1)):s}	:i endif	:i if (%GLOBAL%$type$ = $career$)		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $quest_star_power_deployed$		:i $getplayerinfo$%GLOBAL%$player$$star_power_use_count$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$quest_star_power_deployed$ = (%GLOBAL%$quest_star_power_deployed$ + %GLOBAL%$star_power_use_count$):s}		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $quest_notes_hit$		:i $getplayerinfo$%GLOBAL%$player$$notes_hit$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$quest_notes_hit$ = (%GLOBAL%$quest_notes_hit$ + %GLOBAL%$notes_hit$):s}		:i $GetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$param$ = $quest_score$		:i $getplayerinfo$%GLOBAL%$player$$Score$		:i $achievement_global_tags$ = :s{%GLOBAL%$achievement_global_tags$$quest_score$ = (%GLOBAL%$quest_score$ + %GLOBAL%$Score$):s}	:i endif	:i if (%GLOBAL%$num_players$ = %i(1))		:i if (%GLOBAL%$type$ = $quickplay$)			:i $getplayerinfo$%GLOBAL%$player$$stars$			:i if (%GLOBAL%$stars$ >= %i(5))				:i $change$$g_songlist_num_5star_songs$ = (~$g_songlist_num_5star_songs$ + %i(1))			:i endif		:i endif	:i endif	:i $printf$^[7507ebe3]^$d$ = %GLOBAL%$player$$a$ = %GLOBAL%$savegame$	:i $printstruct$%GLOBAL%$achievement_global_tags$	:i $SetGlobalTags$$achievement_info$$savegame$ = %GLOBAL%$savegame$$params$ = %GLOBAL%$achievement_global_tags$	:i endfunction]Script get_song_ratings 0x06c34980 [	:i $get_song_difficulty_ratings$$song$ = (~$g_current_song$)	:i return :s{		:i $guitar_difficulty_rating$ = %GLOBAL%$guitar_difficulty_rating$		:i $bass_difficulty_rating$ = %GLOBAL%$bass_difficulty_rating$		:i $vocals_difficulty_rating$ = %GLOBAL%$vocals_difficulty_rating$		:i $drums_difficulty_rating$ = %GLOBAL%$drums_difficulty_rating$		:i $band_difficulty_rating$ = %GLOBAL%$band_difficulty_rating$	:i :s}	:i endfunction]Script ach_getcurrentsong 0x5a555520 [	:i return $term_a$ = (~$g_current_song$)	:i endfunction]Script ach_prev_num_dominated_chapters 0x00410038 [	:i return $term_a$ = (~$g_number_of_dominated_chapters$)	:i endfunction]Script ach_prev_num_dominated_regular_chapters 0x6a22668c [	:i return $term_a$ = (~$g_number_of_dominated_regular_chapters$)	:i endfunction]Script ach_fullcombo_test 0x72fa5ba9 [	:i $getplayerinfo$%GLOBAL%$player$$part$	:i $Playlist_GetCurrentSong$	:i $passed$ = %i(1)	:i if (%GLOBAL%$current_song$ = $jamsession$)		:i %GLOBAL%$passed$ = %i(0)	:i else 		:i $getsongtimems$		:i $SongFileManager$$func$ = $get_song_end_time$$song_name$ = %GLOBAL%$current_song$		:i if ((%GLOBAL%$total_end_time$ <= %i(0)) OR (%GLOBAL%$time$ < %GLOBAL%$total_end_time$))			:i %GLOBAL%$passed$ = %i(0)		:i else 			:i if (%GLOBAL%$part$ !== $Vocals$)				:i $getplayerinfo$%GLOBAL%$player$$notes_hit$				:i $getplayerinfo$%GLOBAL%$player$$total_notes$				:i $getplayerinfo$%GLOBAL%$player$$max_notes$				:i $getplayerinfo$%GLOBAL%$player$$unnecessary_notes$				:i if ((%GLOBAL%$notes_hit$ < %GLOBAL%$total_notes$) OR (%GLOBAL%$total_notes$ = %i(0)) OR (%GLOBAL%$unnecessary_notes$ > %i(0)))					:i %GLOBAL%$passed$ = %i(0)				:i endif			:i else 				:i $getplayerinfo$%GLOBAL%$player$$vocal_phrase_quality$				:i $getplayerinfo$%GLOBAL%$player$$vocal_phrase_max_qual$				:i if ((%GLOBAL%$vocal_phrase_quality$ < %GLOBAL%$vocal_phrase_max_qual$) OR (%GLOBAL%$vocal_phrase_quality$ = %i(0)))					:i %GLOBAL%$passed$ = %i(0)				:i endif			:i endif		:i endif	:i endif	:i return $passed$ = %GLOBAL%$passed$	:i endfunction]Script get_song_data 0x8b1acdc1 [	:i %GLOBAL%$song_id$ = (~$last_song_played$)	:i $fix_song_id_suddendeath_hack$$song_id$ = %GLOBAL%$song_id$	:i if NOT $song_is_jamsession$$song$ = %GLOBAL%$song_id$		:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$		:i $GetGlobalTags$%GLOBAL%$song_id$$param$ = $num_times_played$$savegame$ = %GLOBAL%$savegame$	:i else 		:i %GLOBAL%$num_times_played$ = %i(0)	:i endif	:i return $num_times_played$ = %GLOBAL%$num_times_played$	:i endfunction]Script get_award_point_data 0x11aa7151 [	${Unknown [00012400b30d99656969696900000000]}$	:i if NOT $song_is_jamsession$$song$ = (~$last_song_played$)		:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$		:i $quickplay_get_awards_for_song$$song_name$ = (~$last_song_played$)$savegame$ = %GLOBAL%$savegame$		:i $remaining_awards$ = (%GLOBAL%$awards_total$ - %GLOBAL%$awards_earned$)		:i $remaining_challenge_awards$ = (%GLOBAL%$challenge_awards_total$ - %GLOBAL%$challenge_awards$)	:i else 		:i %GLOBAL%$num_challenges$ = %i(4294967295)		:i %GLOBAL%$awards_earned$ = %i(4294967295)		:i %GLOBAL%$awards_total$ = %i(4294967295)		:i %GLOBAL%$challenge_awards$ = %i(4294967295)		:i %GLOBAL%$challenge_awards_total$ = %i(4294967295)		:i %GLOBAL%$qp_power_stars$ = %i(4294967295)		:i %GLOBAL%$remaining_awards$ = %i(4294967295)		:i %GLOBAL%$remaining_challenge_awards$ = %i(4294967295)	:i endif	:i return :s{		:i $num_challenges$ = %GLOBAL%$num_challenges$		:i $awards_earned$ = %GLOBAL%$awards_earned$		:i $awards_total$ = %GLOBAL%$awards_total$		:i $challenge_awards$ = %GLOBAL%$challenge_awards$		:i $challenge_awards_total$ = %GLOBAL%$challenge_awards_total$		:i $qp_power_stars$ = %GLOBAL%$qp_power_stars$		:i $remaining_awards$ = %GLOBAL%$remaining_awards$		:i $remaining_challenge_awards$ = %GLOBAL%$remaining_challenge_awards$	:i :s}	:i $savegame$ = %i(0)	:i endfunction]Script check_is_standard_band 0x34d4e222 [	:i if $is_standard_band$		:i return ${StructInt standard_band = 1}$	:i endif	:i return ${StructInt standard_band = 0}$	:i endfunction]Script num_players_in_star_power a7d98f9a [	:i $GetNumPlayersInGame$${		StructQBKey on_screen		StructQBKey out = num_players	}$		:i $players_in_star_power$ = %i(0)	:i while 	:i $getplayerinfo$%GLOBAL%$player$$star_power_used$	:i if (%GLOBAL%$star_power_used$ = %i(1))		:i %GLOBAL%$players_in_star_power$ = (%GLOBAL%$players_in_star_power$ + %i(1))	:i else 		:i continue	:i endif	:i $GetNextPlayer$$player$ = %GLOBAL%$player$$on_screen$	:i loop_to %GLOBAL%$num_players$	:i return $term_a$ = %GLOBAL%$players_in_star_power$	:i endfunction]Script is_standard_band 0x0d348d30 [	:i $GetNumPlayersInGame$	:i $num_lead$ = %i(0)	:i $num_bass$ = %i(0)	:i $num_vocal$ = %i(0)	:i $num_drum$ = %i(0)	:i if (%GLOBAL%$num_players$ = %i(4))		:i $GetFirstPlayer$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$		:i switch %GLOBAL%$part$			:i case $guitar$				:i %GLOBAL%$num_lead$ = (%GLOBAL%$num_lead$ + %i(1))				:i endcase			case $Bass$				:i %GLOBAL%$num_bass$ = (%GLOBAL%$num_bass$ + %i(1))				:i endcase			case $Vocals$				:i %GLOBAL%$num_vocal$ = (%GLOBAL%$num_vocal$ + %i(1))				:i endcase			case $drum$				:i %GLOBAL%$num_drum$ = (%GLOBAL%$num_drum$ + %i(1))				:i endcase			default 				:i $scriptassert$^[03695c6c]^$s$ = %GLOBAL%$part$		:i end_switch		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players$		:i $printstruct$ isNull 		:i if ((%GLOBAL%$num_lead$ = %i(1)) AND (%GLOBAL%$num_bass$ = %i(1)) AND (%GLOBAL%$num_vocal$ = %i(1)) AND (%GLOBAL%$num_drum$ = %i(1)))			:i return ${StructQBKey true}$		:i endif	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script Achievements_IsCheating 0x8b3c9f88 [	:i if (~$Cheat_AutoKick$ = %i(1) OR ~$Cheat_FreeDrum$ = %i(1))		:i $GetNumPlayersInGame$${StructQBKey local}$		:i $GetFirstPlayer$${StructQBKey local}$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$		:i if (%GLOBAL%$part$ = $drum$)			:i $printf$${StructQBStringQs 0x90144029}$			:i return ${StructQBKey true}$		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$		:i loop_to %GLOBAL%$num_players$	:i endif	:i if (~$Cheat_AlwaysSlide$ = %i(1))		:i $GetNumPlayersInGame$${StructQBKey local}$		:i $GetFirstPlayer$${StructQBKey local}$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$		:i if (%GLOBAL%$part$ = $guitar$)			:i $printf$${StructQBStringQs 0x90144029}$			:i return ${StructQBKey true}$		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$$local$		:i loop_to %GLOBAL%$num_players$	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script Achievements_IsCheatingAutoKick c911f9da [	:i if (~$Cheat_AutoKick$ !== %i(1) AND ~$Cheat_FreeDrum$ !== %i(1))		:i return ${StructQBKey false}$	:i endif	:i $GetNumPlayersInGame$	:i if (%GLOBAL%$num_players$ > %i(0))		:i $GetFirstPlayer$		:i while 		:i $getplayerinfo$%GLOBAL%$player$$part$		:i if (%GLOBAL%$part$ = $drum$)			:i $printf$${StructQBStringQs 0x90144029}$			:i return ${StructQBKey true}$		:i endif		:i $GetNextPlayer$$player$ = %GLOBAL%$player$		:i loop_to %GLOBAL%$num_players$	:i endif	:i return ${StructQBKey false}$	:i endfunction]