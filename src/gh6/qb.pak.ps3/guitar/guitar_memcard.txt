Unknown [1c00000000000000000044900000000000000000]SectionString memcard_default_title "Guitar Hero: Warriors of Rock"SectionQBKeyStringQs memcard_content_name 0x7235ca15SectionQBKeyStringQs memcard_content_jamsession_name cf50afcbSectionQBKeyStringQs memcard_file_name c7add391SectionInteger required_save_data_size_ps3 5227520SectionFloat g_default_memcard_wait_time 2.99000SectionInteger g_memcard_ingame_is_paused 0SectionArray memcard_file_types{	ArrayStruct	[		StructHeader		{			StructQBKey name = progress			StructInt version = 58			StructInt fixed_size = 2097152			StructQBKey use_temp_pools = false			StructQBKey is_binary_file = true			StructInt num_bytes_per_frame = 102400		}		StructHeader		{			StructQBKey name = jamsession			StructInt version = 82			StructInt fixed_size = 1150976			StructQBKey use_temp_pools = false			StructQBKey is_binary_file = false			StructInt num_bytes_per_frame = 102400		}		StructHeader		{			StructQBKey name = jamsessionpatterns			StructInt version = 82			StructInt fixed_size = 1150976			StructQBKey use_temp_pools = false			StructQBKey is_binary_file = false			StructInt num_bytes_per_frame = 102400		}		]}SectionStruct memcard_folder_desc{	StructHeader	{		StructStruct guitarcontent		{			StructHeader			{				StructString icon_xen = "memcard\gh.png"				StructString icon_ps3 = "memcard\ICON0.PNG"				StructArray file_types				{					ArrayStruct					[						StructHeader						{							StructQBKey name = progress							StructInt slots_reserve = 1						}										]				}			}		}		StructStruct JamSessionsContent		{			StructHeader			{				StructString icon_xen = "memcard\gh.png"				StructString icon_ps3 = "memcard\ICON0.PNG"				StructArray file_types				{					ArrayStruct					[						StructHeader						{							StructQBKey name = jamsession							StructInt slots_reserve = 0						}						StructHeader						{							StructQBKey name = jamsessionpatterns							StructInt slots_reserve = 0						}										]				}			}		}	}}Script memcard_choose_storage_device e5d12161 [	${		StructInt StorageSelectorForce = 0		StructInt StorageSelectorTry = 0	}$		:i $printscriptinfo$${StructQBStringQs b45fed4c}$	:i $MC_SetActivePlayer$$userid$ = (~$MemcardController$)	:i if NOT $MC_HasValidStorageDevice$		:i if NOT $GotParam$${StructQBKey invalid_device_okay}$			:i if (%GLOBAL%$StorageSelectorForce$ = %i(0))				:i $goto$${StructQBKey create_storagedevice_warning_menu}$			:i endif		:i endif	:i endif	:i $dump$	:i $no_storage_device$ = %i(0)	:i if NOT $MC_HasValidStorageDevice$		:i $no_storage_device$ = %i(1)	:i endif	:i if ((%GLOBAL%$StorageSelectorForce$ = %i(1)) OR (%GLOBAL%$no_storage_device$ = %i(1)) OR (%GLOBAL%$StorageSelectorTry$ = %i(1)))		:i $ShowStorageSelector$$force$ = %GLOBAL%$StorageSelectorForce$$try$ = %GLOBAL%$StorageSelectorTry$$filetype$ = $progress$	:i endif	:i endfunction]Script memcard_check_for_previously_used_folder b1ec8061 [	:i $MC_WaitAsyncOpsFinished$	:i $memcard_check_for_card$	:i if (%GLOBAL%$filetype$ = $jamsession$)		:i %GLOBAL%$foldername$ = ~$memcard_content_jamsession_name$	:i else 		:i %GLOBAL%$foldername$ = ~$memcard_content_name$	:i endif	:i $MC_SetActiveFolder$$foldername$ = %GLOBAL%$foldername$	:i if $MC_HasValidatedFolder$		:i $printf$${StructQBStringQs a0f86458}$		:i return ${			StructInt found = 1			StructInt corrupt = 0		}$			:i else 		:i $memcard_enum_folders$		:i if NOT $MC_FolderExists$$foldername$ = %GLOBAL%$foldername$			:i $printf$${StructQBStringQs 0x16bcd50d}$			:i return ${				StructInt found = 0				StructInt corrupt = 0			}$					:i endif		:i $MC_SetActiveFolder$$foldername$ = %GLOBAL%$foldername$		:i $MC_LoadTOCInActiveFolder$		:i if (%GLOBAL%$result$ = $true$)			:i if $MC_HasValidatedFolder$				:i $printf$${StructQBStringQs dc39d0c1}$				:i return ${					StructInt found = 1					StructInt corrupt = 0				}$							:i else 				:i $printf$${StructQBStringQs 0x0fa7e44c}$				:i return ${					StructInt found = 0					StructInt corrupt = 0				}$							:i endif		:i else 			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $printf$${StructQBStringQs 0x248ab78f}$				:i return ${					StructInt found = 1					StructInt corrupt = 1				}$							:i else 				:i $printf$${StructQBStringQs 0x3d9186ce}$				:i return ${					StructInt found = 0					StructInt corrupt = 0				}$							:i endif		:i endif	:i endif	:i endfunction]Script memcard_enum_folders ae99b4cf [	:i $MC_EnumerateFolders$	:i if (%GLOBAL%$result$ = $false$)		:i $memcard_error$${StructQBKey error = create_storagedevice_warning_menu}$	:i endif	:i endfunction]Script memcard_check_for_existing_save 0x17fc1152 [	:i $memcard_enum_folders$	:i $MC_WaitAsyncOpsFinished$	:i $memcard_check_for_card$	:i if $MC_FolderExists$${StructQBString foldername = memcard_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$		:i $MC_LoadTOCInActiveFolder$		:i if (%GLOBAL%$result$ = $false$)			:i return ${				StructInt found = 1				StructInt corrupt = 1			}$					:i endif		:i if $MemCardFileExists$${				StructQBString filename = memcard_file_name				StructQBKey filetype = progress			}$						:i return ${				StructInt found = 1				StructInt corrupt = 0			}$					:i else 			:i return ${				StructInt found = 1				StructInt corrupt = 1			}$					:i endif	:i endif	:i return ${		StructInt found = 0		StructInt corrupt = 0	}$		:i endfunction]Script memcard_wait_for_timer b5fff4af [	$time$ = (~$g_default_memcard_wait_time$)	:i while 	:i if $TimeGreaterThan$%GLOBAL%$time$		:i continue	:i endif	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i endfunction]Script is_autosave_on 0x3cc720a1 [	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				savegame			]		}	}$		:i $GetGlobalTags$$user_options$$savegame$ = %GLOBAL%$savegame$	:i if (%GLOBAL%$autosave$ = %i(1))		:i return ${StructQBKey true}$	:i endif	:i return ${StructQBKey false}$	:i endfunction]Script memcard_save_file 0x5cf0c3e2 [	${		StructInt OverwriteConfirmed = 0		StructInt num_players_saving = 1		StructInt autosave = 0	}$		:i $printf$${StructQBStringQs 0x63276b9b}$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $memcard_check_for_card$	:i $ResetTimer$	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i $memcard_enum_folders$	:i $MC_WaitAsyncOpsFinished$	:i if (%GLOBAL%$autosave$ = %i(1))		:i %GLOBAL%$save_type$ = $autosave$	:i else 		:i %GLOBAL%$save_type$ = $saving$	:i endif	:i %GLOBAL%$overwrite$ = %i(0)	:i if $MC_FolderExists$${StructQBString foldername = memcard_content_name}$		:i if (%GLOBAL%$OverwriteConfirmed$ = %i(1))			:i %GLOBAL%$overwrite$ = %i(1)			:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[93e360b9]^$type$ = %GLOBAL%$save_type$			:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}			:i $ResetTimer$			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$		:i else 			:i $goto$${StructQBKey create_confirm_overwrite_menu}$		:i endif	:i else 		:i if NOT $MC_SpaceForNewFolder$${StructQBKey desc = guitarcontent}$			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i endif		:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[93e360b9]^$type$ = %GLOBAL%$save_type$		:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}		:i $ResetTimer$		:i $MC_CreateFolder$${			StructQBString name = memcard_content_name			StructQBKey desc = guitarcontent		}$				:i if (%GLOBAL%$result$ = $false$)			:i if (%GLOBAL%$errorcode$ = $outofspace$)				:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$	:i $MC_LoadTOCInActiveFolder$	:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i else 			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${StructQBKey error = create_corrupted_data_menu}$			:i elseif (%GLOBAL%$overwrite$ = %i(1))				:i $memcard_error$${StructQBKey error = create_overwrite_failed_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $memcard_pre_save_progress$$savegame$ = (~$MemcardController$)	:i $SaveToMemoryCard$${		StructQBString filename = memcard_file_name		StructQBKey filetype = progress		StructQBKey usepaddingslot = always	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i else 			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${StructQBKey error = create_corrupted_data_menu}$			:i elseif (%GLOBAL%$overwrite$ = %i(1))				:i $memcard_error$${StructQBKey error = create_overwrite_failed_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $memcard_post_save_progress$$savegame$ = %GLOBAL%$savegame$	:i $change$${StructQBKey MemcardSuccess = true}$	:i if (%GLOBAL%$num_players_saving$ > %i(1))		:i %GLOBAL%$delay_ui_destroy_time$ = %f(0.4000000)		:i %GLOBAL%$memcard_wait_for_timer_time$ = ((~$g_default_memcard_wait_time$) - %GLOBAL%$delay_ui_destroy_time$)	:i endif	:i $memcard_wait_for_timer$:s{		:i $time$ = %GLOBAL%$memcard_wait_for_timer_time$	:i :s}	:i $guitar_memcard_save_success_sound$	:i $savegame_ui_end$$savegame$ = %GLOBAL%$savegame$$delay_ui_destroy_time$ = %GLOBAL%$delay_ui_destroy_time$	:i $wait$${		StructInt 15		StructQBKey gameframes	}$		:i $memcard_sequence_quit$	:i endfunction]Script memcard_delete_file 0x673f5431 [	${StructQBKey file_type = default}$	:i $printf$${StructQBStringQs 0x810fae7c}$	:i $memcard_sequence_begin$	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[4acaa8b9]^$type$ = $deleting$$hide_on_ps3$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i $MC_WaitAsyncOpsFinished$	:i if $IsPS3$		:i $hide_glitch$${StructInt num_frames = 8}$		:i $MC_StartPS3ForceDelete$		:i while 		:i if $MC_IsPS3ForceDeleteFinished$			:i continue		:i endif		:i $wait$${			StructInt 1			StructQBKey gameframes		}$				:i loop_to 		:i $refresh_jam_directory_contents$		:i if NOT (%GLOBAL%$file_type$ = $jam_file$)			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$			:i $MC_LoadTOCInActiveFolder$		:i endif	:i else 		:i if (%GLOBAL%$file_type$ = $default$)			:i if $MC_FolderExists$${StructQBString foldername = memcard_content_name}$				:i $ResetTimer$				:i $MC_DeleteFolder$${StructQBString foldername = memcard_content_name}$				:i if (%GLOBAL%$result$ = $false$)					:i $memcard_error$${StructQBKey error = create_delete_failed_menu}$				:i endif				:i $memcard_wait_for_timer$			:i endif		:i endif		:i if (%GLOBAL%$file_type$ = $jam_file$)			:i if $MC_FolderExists$${StructQBString foldername = memcard_content_jamsession_name}$				:i $ResetTimer$				:i $MC_DeleteFolder$${StructQBString foldername = memcard_content_jamsession_name}$				:i if (%GLOBAL%$result$ = $false$)					:i $memcard_error$${StructQBKey error = create_delete_failed_menu}$				:i endif				:i $memcard_wait_for_timer$			:i endif		:i endif	:i endif	:i if $notcd$		:i $DeleteAllSongDataFromFile$	:i endif	:i if (~$memcard_boot_process$ = $false$)		:i $memcard_check_for_card$	:i endif	:i $memcard_sequence_retry$	:i endfunction]Script memcard_load_file 0x878dfe2e [	:i $memcard_sequence_begin$	:i $printf$${StructQBStringQs 0x03a3bf83}$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $MC_WaitAsyncOpsFinished$	:i $memcard_validate_card_data$$invalid_device_okay$ = %i(1)$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$ValidatePrev$ = %i(0)	:i $ResetTimer$	:i if $MC_FolderExists$${StructQBString foldername = memcard_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$	:i else 		:i $memcard_error$${StructQBKey error = create_no_save_found_menu}$	:i endif	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[c8aec9d3]^$type$ = $loading$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i if $GotParam$${StructQBKey boot_load}$		:i $printf$%s("Setting primary controller at boot: %d")$d$ = %GLOBAL%$savegame$		:i $change_primary_controller$$controller$ = %GLOBAL%$savegame$$from_boot$	:i endif	:i $memcard_pre_load_progress$$savegame$ = %GLOBAL%$savegame$	:i $LoadFromMemoryCard$${		StructQBString filename = memcard_file_name		StructQBKey filetype = progress	}$		:i if (%GLOBAL%$result$ = $false$)		:i $memcard_post_load_progress_failed$$savegame$ = %GLOBAL%$savegame$$async$ = %i(1)		:i if $GotParam$${StructQBKey boot_load}$		:i endif		:i if $GotParam$${StructQBKey boot_load}$			:i $MC_InvalidateStorageDevice$$userid$ = %GLOBAL%$savegame$			:i $memcard_wait_for_timer$${StructFloat time = 1.00}$			:i $memcard_sequence_quit$		:i else 			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${StructQBKey error = create_corrupted_data_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_load_failed_menu}$			:i endif		:i endif	:i endif	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i if $GotParam$${StructQBKey boot_load}$		:i $ThreadSafeSetGlobalInteger$${			StructQBKey global_name = primary_controller_assigned			StructInt new_value = 1		}$			:i endif	:i $memcard_post_load_progress$$savegame$ = %GLOBAL%$savegame$$boot_load$ = %GLOBAL%$boot_load$$async$ = %i(1)	:i if $GotParam$${StructQBKey boot_load}$		:i $ThreadSafeSetGlobalInteger$${			StructQBKey global_name = primary_controller_assigned			StructInt new_value = 0		}$			:i endif	:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_wait_for_timer$${StructFloat time = 1.00}$	:i $memcard_sequence_quit$	:i endfunction]Script memcard_load_file_confirmed 0x059bf323 [	:i $memcard_cleanup_messages$	:i $memcard_load_file$${StructInt StorageSelectorForce = 1}$	:i endfunction]Script memcard_pre_save_progress c883491c [	:i $globaltag_sanity_check_pre_save$$savegame$ = %GLOBAL%$savegame$	:i endfunction]Script memcard_post_save_progress 0x28cb6876 [	${StructInt savegame_async = 0}$	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$autosave$ = %i(1):s}	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$has_saved_game$ = %i(1):s}	:i $change$${StructInt cas_logo_data_dirty = 0}$	:i $band_lobby_set_dirty_save_flag$$savegame$ = %GLOBAL%$savegame$$flag$ = %i(0)	:i if NOT $refresh_jam_directory_contents$$savegame$ = %GLOBAL%$savegame$$no_enumeration$$savegame_async$ = %GLOBAL%$savegame_async$		:i return $false$$jamerrorcode$ = %GLOBAL%$errorcode$	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script memcard_pre_load_progress cb650ed5 [	:i $LockGlobalTags$${StructQBKey freeplay_check_off}$	:i endfunction]Script memcard_post_load_progress_failed 0x9a78e9a9 [	:i $LockGlobalTags$${StructQBKey freeplay_check_on}$	:i endfunction]Script memcard_post_load_progress 0x35a638ff [	${		StructInt savegame_async = 0		StructInt boot_load = 0	}$		:i if $IsXenonOrWinDX$		:i if ((~$primary_controller$) = %GLOBAL%$savegame$)			:i $restore_globals_from_global_tags$$savegame$ = %GLOBAL%$savegame$		:i endif	:i else 		:i $restore_globals_from_global_tags$$savegame$ = %GLOBAL%$savegame$	:i endif	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[d79dc03d]^	:i $scan_globaltag_downloads$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[fcb093fe]^	:i $globaltag_update_avatar_metadata$$savegame$ = %GLOBAL%$savegame$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[e5aba2bf]^	:i if (~$override_band_members$ = %i(1))		:i $setup_band_member_tags$$savegame$ = %GLOBAL%$savegame$	:i endif	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[aaea3478]^	:i if NOT $IsAvatarSystemInitialized$		:i $remove_avatars_from_band$$savegame$ = %GLOBAL%$savegame$	:i endif	:i if NOT $SaveGameGetProgression$$savegame$ = %GLOBAL%$savegame$		:i %GLOBAL%$progression$ = %i(0)	:i endif	:i %GLOBAL%$slot$ = %i(0)	:i while 	:i $SaveGameSetProgression$$savegame$ = %GLOBAL%$savegame$$progression$ = %GLOBAL%$slot$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[b3f10539]^	:i $reset_transient_tags$$savegame$ = %GLOBAL%$savegame$$struct_name$ = $venue_intro_flags$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[98dc56fa]^	:i %GLOBAL%$slot$ = (%GLOBAL%$slot$ + %i(1))	:i loop_to ~$num_savegame_progressions$	:i $SaveGameSetProgression$$savegame$ = %GLOBAL%$savegame$$progression$ = %GLOBAL%$progression$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[81c767bb]^	:i $fix_deleted_character_savegame$$savegame$ = %GLOBAL%$savegame$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[065f7b74]^	:i if $ScriptExists$${StructQBKey check_cas}$		:i $check_cas$${StructQBKey savegames}$	:i endif	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$autosave$ = %i(1):s}	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$has_saved_game$ = %i(1):s}	:i $reset_universal_help_per_session_tags$$savegame$ = %GLOBAL%$savegame$	:i $conditional_async_wait$$async$ = %GLOBAL%$async$$text$ = ^[1f444a35]^	:i $options_cheats_get_cheat_soundcheck$$savegame$ = %GLOBAL%$savegame$	:i $change$$Cheat_SoundCheckMode$ = %GLOBAL%$soundcheck$	:i if ((~$Cheat_SoundCheckMode$) = %i(1))		:i $hide_crowd_models$	:i endif	:i $LockGlobalTags$${StructQBKey freeplay_check_on}$	:i $ignore_failure$ = %i(0)	:i if (%GLOBAL%$boot_load$ = %i(1))		:i %GLOBAL%$ignore_failure$ = %i(1)	:i endif	:i if NOT $refresh_jam_directory_contents$$savegame$ = %GLOBAL%$savegame$$no_enumeration$$savegame_async$ = %GLOBAL%$savegame_async$$ignore_failure$ = %GLOBAL%$ignore_failure$		:i if (%GLOBAL%$boot_load$ = %i(1))			:i $printf$${				StructQBKey channel = bkutcher				StructQBStringQs 0x870823ba			}$						:i $reset_savegame$$savegame$ = %GLOBAL%$savegame$		:i endif		:i return $false$$jamerrorcode$ = %GLOBAL%$errorcode$	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script memcard_boot_scan a12c81b1 [	:i if ((~$savegame_ui_state$) !== $boot$)		:i $scriptassert$${StructString 0x00000000 = "Should be in boot UI state"}$	:i endif	:i $GetTrueStartTime$	:i $savegame_ui_begin$${		StructQBStringQs text = fa4a9022		StructQBKey type = boot_scan	}$		:i $OnExitRun$${StructQBKey savegame_ui_end}$	:i $success$ = %i(0)	:i if $savegame_scan_all_players_for_progress_save$		:i if $IsXenonOrWinDX$			:i $change$$MemcardController$ = %GLOBAL%$userid$		:i endif		:i $goto$${			StructQBKey memcard_load_file			StructStruct params			{				StructHeader				{					StructInt boot_load = 1				}			}		}$				:i return 	:i else 		:i if $GotParam$${StructQBKey errorcode}$			:i $printf$%s("ui_create_savegame_boot_scan_spawned: savegame had errors %s")$s$ = %GLOBAL%$errorcode$			:i $printf$${StructString 0x00000000 = "ui_create_savegame_boot_scan_spawned: error loading up savegame"}$			:i $memcard_sequence_quit$			:i return 		:i else 			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(3000)			:i $printf$${StructString 0x00000000 = "ui_create_savegame_boot_scan_spawned: savegame not found"}$			:i $memcard_sequence_quit$		:i endif	:i endif	:i endfunction]Script refresh_autokick_cheat 0x48c21f93 [	:i $controller$ = %i(0)	:i $max_controllers$ = %i(4)	:i while 	:i if $CheckForSignin$$local$$controller_index$ = %GLOBAL%$controller$		:i $GetSavegameFromController$$controller$ = %GLOBAL%$controller$		:i $GetGlobalTags$$user_options$$savegame$ = %GLOBAL%$savegame$		:i if (%GLOBAL%$unlock_Cheat_AutoKick$ = %i(1) AND %GLOBAL%$cheat_index12$ = %i(1))			:i $get_local_player_num_from_controller$$controller_index$ = %GLOBAL%$controller$			:i $SetPlayerInfo$%GLOBAL%$local_player_num$$Cheat_AutoKick$ = %i(1)		:i else 			:i $SetPlayerInfo$%GLOBAL%$local_player_num$$Cheat_AutoKick$ = %i(0)		:i endif		:i if (%GLOBAL%$unlock_Cheat_AlwaysSlide$ = %i(1) AND %GLOBAL%$cheat_index1$ = %i(1))			:i $get_local_player_num_from_controller$$controller_index$ = %GLOBAL%$controller$			:i $SetPlayerInfo$%GLOBAL%$local_player_num$$Cheat_AlwaysSlide$ = %i(1)		:i else 			:i $SetPlayerInfo$%GLOBAL%$local_player_num$$Cheat_AlwaysSlide$ = %i(0)		:i endif	:i endif	:i $controller$ = (%GLOBAL%$controller$ + %i(1))	:i loop_to %GLOBAL%$max_controllers$	:i endfunction]Script refresh_all_cheats_globals f5a807a7 [	:i $getplayerinfo$${		StructInt 1		StructQBKey controller	}$		:i if $CheckForSignin$$local$$controller_index$ = %GLOBAL%$controller$		:i $GetSavegameFromController$$controller$ = %GLOBAL%$controller$		:i $GetGlobalTags$$user_options$$savegame$ = %GLOBAL%$savegame$		:i $GetArraySize$(~$guitar_hero_cheats$)		:i $guitar_hero_cheats_size$ = %GLOBAL%$array_size$		:i if (%GLOBAL%$guitar_hero_cheats_size$ > %i(0))			:i $guitar_hero_cheat_index$ = %i(0)			:i while 			:i $FormatText$$checksumname$ = $cheat_unlocked$%s("unlock_Cheat_%a")$a$ = (~$guitar_hero_cheats$:a{%GLOBAL%$guitar_hero_cheat_index$:a}->$name$)			:i if $GotParam$%GLOBAL%$cheat_unlocked$				:i if (( isNull ->%GLOBAL%$cheat_unlocked$) > %i(0))					:i $var$ = (~$guitar_hero_cheats$:a{%GLOBAL%$guitar_hero_cheat_index$:a}->$var$)					:i $FormatText$$checksumname$ = $cheat_index_crc$%s("cheat_index%d")$d$ = %GLOBAL%$guitar_hero_cheat_index$					:i $cheat_index$ = ( isNull ->%GLOBAL%$cheat_index_crc$)					:i if $StructureContains$$structure$ = (~$guitar_hero_cheats$:a{%GLOBAL%$guitar_hero_cheat_index$:a})$options$						:i $globals$ = (~$guitar_hero_cheats$:a{%GLOBAL%$guitar_hero_cheat_index$:a}->$options$:a{%GLOBAL%$cheat_index$:a}->$globals$)						:i $GetArraySize$%GLOBAL%$globals$						:i if (%GLOBAL%$array_size$ > %i(0))							:i $globals_index$ = %i(0)							:i while 							:i if (%GLOBAL%$globals$:a{%GLOBAL%$globals_index$:a}->$set$ = %GLOBAL%$var$)								:i $change$$globalname$ = %GLOBAL%$var$$newValue$ = (%GLOBAL%$globals$:a{%GLOBAL%$globals_index$:a}->$value$)								:i continue							:i endif							:i $globals_index$ = (%GLOBAL%$globals_index$ + %i(1))							:i loop_to %GLOBAL%$array_size$						:i endif					:i endif				:i endif			:i endif			:i $guitar_hero_cheat_index$ = (%GLOBAL%$guitar_hero_cheat_index$ + %i(1))			:i loop_to %GLOBAL%$guitar_hero_cheats_size$		:i endif	:i endif	:i endfunction]Script memcard_cleanup_messages a0332499 [	:i $destroy_dialog_box$	:i $savegame_ui_end$	:i endfunction]Script memcard_sequence_generic_done fd035de3 [	:i if (~$MemcardSavingOrLoading$ = $saving$)		:i if (~$MemcardSuccess$ = $true$)			:i $printf$${StructQBStringQs e2a29101}$			:i $ui_memcard_finish$$success$ = $save$$controller$ = (~$MemcardController$)		:i else 			:i $printf$${StructQBStringQs 0x9f566822}$			:i if (~$MemcardInvalFolderOnFail$ = $true$)				:i $MC_SetActiveFolder$${StructInt folderindex = -1}$			:i endif			:i $ui_memcard_finish$$failed$ = $save$$controller$ = (~$MemcardController$)		:i endif	:i else 		:i if (~$MemcardSuccess$ = $true$)			:i $printf$${StructQBStringQs 0x0e63bd4a}$			:i $ui_memcard_finish$$success$ = $load$$controller$ = (~$MemcardController$)		:i else 			:i $printf$${StructQBStringQs 0x264adb01}$			:i if (~$MemcardInvalFolderOnFail$ = $true$)				:i $MC_SetActiveFolder$${StructInt folderindex = -1}$			:i endif			:i $ui_memcard_finish$$failed$ = $load$$controller$ = (~$MemcardController$)		:i endif	:i endif	:i endfunction]Script memcard_sequence_retry 0x1b8531e5 [	:i $printf$${StructQBStringQs 0x879b8ee7}$	:i $memcard_cleanup_messages$	:i $MC_WaitAsyncOpsFinished$	:i $goto$~$MemcardRetryScript$$params$ = :s{ isNull $controller$ = (~$MemcardController$):s}	:i endfunction]Script memcard_disable_saves_and_quit 0x3d6ceda3 [	:i $hide_glitch$${StructInt num_frames = 20}$	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i $LockGlobalTags$${StructQBKey freeplay_check_off}$	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$autosave$ = %i(0):s}	:i $SetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$params$ = :s{$has_warned_about_signin$ = %i(1):s}	:i $LockGlobalTags$${StructQBKey freeplay_check_on}$	:i $memcard_sequence_quit$	:i endfunction]Script memcard_sequence_begin 0x6662a57b [	:i $printf$${StructQBStringQs a7ec2b32}$	:i $MC_WaitAsyncOpsFinished$	:i $PushUnsafeForShutdown$${		StructQBKey context = memcard		StructQBKey type = unchecked	}$		:i endfunction]Script memcard_ingame_pause 0x0af5ba73 [	:i $printf$${StructString 0x00000000 = "memcard_ingame_pause"}$	:i $gamemode_gettype$	:i if (%GLOBAL%$type$ = $freeplay$)		:i return 	:i endif	:i if $GameIsPaused$		:i return 	:i endif	:i if NOT $ui_event_exists_in_stack$${StructString name = "gameplay"}$		:i return 	:i endif	:i $printf$${StructString 0x00000000 = "memcard_ingame_pause - Pausing game!"}$	:i $change$${StructInt g_memcard_ingame_is_paused = 1}$	:i $pausegame$	:i endfunction]Script memcard_sequence_show_dialog 0x2fc7d43f [	:i $printf$${StructQBStringQs 0x333f44f9}$	:i $PopUnsafeForShutdown$${		StructQBKey context = memcard		StructQBKey type = unchecked	}$		:i $memcard_cleanup_messages$	:i $memcard_ingame_pause$	:i endfunction]Script memcard_sequence_quit 0x3c96166c [	:i $printf$${StructQBStringQs 0x5dba2148}$	:i $PopUnsafeForShutdown$${		StructQBKey context = memcard		StructQBKey type = unchecked	}$		:i $savegame_ui_end$	:i $goto$~$MemcardDoneScript$$params$ = isNull 	:i endfunction]Script memcard_check_for_card 0x2314aa28 [	:i if NOT $MC_HasValidStorageDevice$		:i $goto$$create_storagedevice_warning_menu$$params$ = isNull 	:i endif	:i endfunction]Script memcard_error ecf00613 [	:i $printf$${StructQBStringQs 0x81c80e89}$	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				error			]		}		StructQBKey all	}$		:i $memcard_check_for_card$	:i if $ScreenElementExists$${StructQBKey id = loading_screen_container}$		:i $loading_screen_container$.$se_setprops$${StructInt z_priority = 0}$	:i elseif $IsLoadingScreenActive$${StructQBKey and_visible}$		:i $destroy_loading_screen$	:i endif	:i if $ScriptIsRunning$${StructQBKey guitar_startup_spawned}$		:i $spawnscriptnow$${StructQBKey memcard_handle_intro_movie}$	:i endif	:i $goto$%GLOBAL%$error$$params$ = %GLOBAL%$params$	:i endfunction]Script memcard_handle_intro_movie 0x19334723 [	:i $printf$${StructString 0x00000000 = "memcard_handle_intro_movie"}$	:i $setscriptcannotpause$	:i $SetButtonEventMappings$${StructQBKey block_menu_input}$	:i $printf$${StructString 0x00000000 = "memcard_handle_intro_movie - waiting for startup to finish"}$	:i while 	:i if NOT $IsMoviePlaying$${StructInt textureslot = 2}$		:i continue	:i endif	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i $printf$${StructString 0x00000000 = "memcard_handle_intro_movie - done with startup movie"}$	:i $SetButtonEventMappings$${StructQBKey unblock_menu_input}$	:i endfunction]Script memcard_sequence_cleanup_generic 0x1a67a976 [	:i $MC_WaitAsyncOpsFinished$	:i $memcard_cleanup_messages$	:i $change$${StructQBKey MemcardDoneScript = NullScript}$	:i $change$${StructQBKey MemcardRetryScript = NullScript}$	:i $change$${StructQBString MemcardController = primary_controller}$	:i $MC_SetActivePlayer$${StructQBKey querydefault}$	:i endfunction]Script memcard_validate_card_data 0x7b75486c [	${		StructInt StorageSelectorForce = 0		StructInt ValidatePrev = 0		StructQBKey filetype = progress		StructInt keep_ui_if_found = 0	}$		:i $MC_SetActivePlayer$$userid$ = (~$MemcardController$)	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i if $IsPS3$		:i if NOT $GotParam$${StructQBKey no_ui_on_ps3}$			:i $GetTrueStartTime$			:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[54b62ebd]^$type$ = $checking$			:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(1000)		:i endif	:i endif	:i $memcard_choose_storage_device$$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$StorageSelectorTry$ = %GLOBAL%$StorageSelectorTry$$invalid_device_okay$ = %GLOBAL%$invalid_device_okay$	:i $memcard_check_for_card$ isNull 	:i if (%GLOBAL%$ValidatePrev$ = %i(1))		:i $memcard_check_for_previously_used_folder$$filetype$ = %GLOBAL%$filetype$	:i else 		:i $memcard_check_for_existing_save$	:i endif	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				found				corrupt			]		}		StructQBKey all	}$		:i if (%GLOBAL%$corrupt$ = %i(1))		:i if (%GLOBAL%$filetype$ = $progress$)			:i $refresh_jam_directory_contents$${StructInt ignore_failure = 1}$			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$			:i $MC_LoadTOCInActiveFolder$			:i $memcard_error$${StructQBKey error = create_corrupted_data_menu}$		:i else 			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i endif	:i endif	:i if ((%GLOBAL%$found$ = %i(1)) AND (%GLOBAL%$keep_ui_if_found$ = %i(1)))		:i $OnExitRun$${StructQBKey NullScript}$	:i endif	:i return $found$ = %GLOBAL%$found$$corrupt$ = %GLOBAL%$corrupt$	:i endfunction]Script reload_jam_patterns 0x8ae88d7a [	:i if NOT $musicstudio_mainobj$.$musicstudio_isinmusicstudio$		:i return 	:i endif	:i $LoadFromMemoryCard$${		StructQBString filename = memcard_jamsession_file_name_patterns		StructQBKey filetype = jamsessionpatterns	}$		:i if (%GLOBAL%$result$ = $true$)		:i $printf$${StructQBStringQs 0x148b91db}$	:i else 		:i if (%GLOBAL%$errorcode$ = $corrupt$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 		:i endif	:i endif	:i endfunction]Script refresh_jam_directory_contents c115b345 [	${		StructInt savegame_async = 0		StructInt ignore_failure = 0	}$		:i $printscriptinfo$${StructString 0x00000000 = "refresh_jam_directory_contents"}$	:i if ((~$MemcardController$) = (~$primary_controller$))		:i $update_curr_listing$ = %i(1)	:i endif	:i $jam_reset_controller_directory_listing$$controller$ = (~$MemcardController$)	:i if $GotParam$${StructQBKey update_curr_listing}$		:i $change$${			StructArray jam_curr_directory_listing			{				Floats [0.00000, 0.00000]			}		}$			:i endif	:i if NOT $GotParam$${StructQBKey no_enumeration}$		:i $memcard_enum_folders$	:i endif	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_LoadTOCInActiveFolder$		:i $GetMemCardDirectoryListing$		:i if ((%GLOBAL%$ignore_failure$ = %i(1)) OR (%GLOBAL%$savegame_async$ = %i(1)))			:i if (%GLOBAL%$result$ = $false$)				:i return $false$$errorcode$ = %GLOBAL%$errorcode$			:i endif		:i endif		:i if (%GLOBAL%$result$ = $false$)			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${					StructQBKey error = create_corrupted_data_menu					StructStruct params					{						StructHeader						{							StructQBKey file_type = jam_file						}					}				}$							:i else 				:i $memcard_error$${StructQBKey error = create_load_failed_menu}$			:i endif			:i return $false$$errorcode$ = %GLOBAL%$errorcode$		:i endif		:i if NOT (%GLOBAL%$result$ = $false$)			:i if $GotParam$${StructQBKey directorylisting}$				:i $jam_update_controller_directory_listing$$controller$ = (~$MemcardController$)$directorylisting$ = %GLOBAL%$directorylisting$				:i if $GotParam$${StructQBKey update_curr_listing}$					:i $musicstudio_copy_curr_directory_listing$$directorylisting$ = %GLOBAL%$directorylisting$				:i endif			:i endif		:i endif	:i endif	:i return ${StructQBKey true}$	:i endfunction]Script memcard_sequence_begin_single_signin 0x1d33cff6 [	:i $spawnscriptnow$$memcard_sequence_begin_single_signin_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_save 0x4f010132 [	:i $spawnscriptnow$$memcard_sequence_begin_save_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_autosave 0x48083717 [	:i $spawnscriptnow$$memcard_sequence_begin_autosave_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_load e726d137 [	:i $spawnscriptnow$$memcard_sequence_begin_load_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_boot 0x8e379709 [	:i $spawnscriptnow$$memcard_sequence_begin_boot_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_save_jam 0x300d460f [	:i $spawnscriptnow$$memcard_sequence_begin_save_jam_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_load_jam 0x88921ab2 [	:i $spawnscriptnow$$memcard_sequence_begin_load_jam_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_rename_jam 0x1e606147 [	:i $spawnscriptnow$$memcard_sequence_begin_rename_jam_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_delete_jam 0x9f950069 [	:i $spawnscriptnow$$memcard_sequence_begin_delete_jam_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_lobby_error c5e6a922 [	:i $spawnscriptnow$$memcard_sequence_begin_lobby_error_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_check_jam_space f4913169 [	:i $spawnscriptnow$$memcard_sequence_begin_check_jam_space_logic$$params$ = isNull 	:i endfunction]Script memcard_sequence_begin_single_signin_logic 0x1d272dee [	${StructQBString controller = primary_controller}$	:i $printscriptinfo$${StructQBStringQs 0x4ec42b91}$	:i $printstruct$ isNull 	:i $MC_GetActivePlayer$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_single_signin_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = true}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $memcard_validate_card_data$$invalid_device_okay$ = %i(1)$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$ValidatePrev$ = %i(0)	:i if (%GLOBAL%$found$ = %i(1))		:i $goto$${StructQBKey memcard_load_file}$	:i else 		:i $goto$${StructQBKey memcard_save_file}$	:i endif	:i endfunction]Script memcard_sequence_begin_save_logic b0f72e27 [	${		StructInt StorageSelectorForce = 0		StructQBString controller = primary_controller		StructInt OverwriteConfirmed = 0	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_save_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i if (%GLOBAL%$OverwriteConfirmed$ = %i(0))		:i $change$${StructQBKey MemcardInvalFolderOnFail = false}$		:i $StorageSelectorForce$ = %i(1)	:i else 		:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i endif	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i if $is_autosave_on$$savegame$ = %GLOBAL%$savegame$		:i $ValidatePrev$ = %i(1)	:i else 		:i $ValidatePrev$ = %i(0)	:i endif	:i $memcard_validate_card_data$$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$StorageSelectorTry$ = %GLOBAL%$StorageSelectorTry$$ValidatePrev$ = %i(1)	:i $goto$$memcard_save_file$$params$ = :s{$OverwriteConfirmed$ = %GLOBAL%$OverwriteConfirmed$:s}	:i endfunction]Script memcard_sequence_begin_autosave_logic 0x3dcb1815 [	${StructQBString controller = primary_controller}$	:i $memcard_sequence_begin$	:i $disable_pause$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_save_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $get_savegame_from_controller$$controller$ = %GLOBAL%$controller$	:i $GetGlobalTags$$user_options$$savegame$ = %GLOBAL%$savegame$	:i if (%GLOBAL%$autosave$ = %i(0) AND %GLOBAL%$requested_autosave$ = %i(0))		:i $printf$${StructQBStringQs 0x4c1699ec}$		:i $goto$${StructQBKey memcard_sequence_quit}$	:i endif	:i $MC_SetActivePlayer$$userid$ = %GLOBAL%$controller$	:i if NOT $MC_HasValidStorageDevice$		:i $goto$${StructQBKey create_storagedevice_warning_menu}$	:i endif	:i $memcard_validate_card_data$${		StructInt StorageSelectorForce = 0		StructInt ValidatePrev = 1		StructInt keep_ui_if_found = 1	}$		:i if (%GLOBAL%$found$ = %i(1))		:i $goto$$memcard_save_file$$params$ = :s{$OverwriteConfirmed$ = %i(1)$autosave$ = %i(1)$num_players_saving$ = %GLOBAL%$num_players_saving$:s}	:i else 		:i $memcard_sequence_retry$	:i endif	:i endfunction]Script memcard_sequence_begin_load_logic b5f22f63 [	${		StructInt StorageSelectorForce = 1		StructInt show_confirm_dialog = 0		StructQBString controller = primary_controller	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_load_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i if (%GLOBAL%$show_confirm_dialog$ = %i(1))		:i $change$${StructQBKey MemcardInvalFolderOnFail = false}$	:i else 		:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i endif	:i if (%GLOBAL%$show_confirm_dialog$ = %i(1))		:i $goto$${StructQBKey create_confirm_load_menu}$	:i else 		:i $memcard_validate_card_data$$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$ValidatePrev$ = %i(0)		:i $goto$${StructQBKey memcard_load_file}$	:i endif	:i endfunction]Script memcard_sequence_begin_boot_logic 0x05f45a90 [	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$${StructInt MemcardController = 0}$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $goto$${StructQBKey memcard_boot_scan}$	:i endfunction]Script jam_memcard_validate_card_data 0x985aa6a2 [	${StructInt StorageSelectorForce = 0}$	:i $memcard_validate_card_data$$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$ValidatePrev$ = %i(1)$filetype$ = $jamsession$	:i return isNull 	:i endfunction]Script memcard_sequence_begin_save_jam_logic d3c923d6 [	${		StructInt StorageSelectorForce = 0		StructQBString controller = primary_controller	}$		:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x3ab2ee1c	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_save_jam_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = jam}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i %GLOBAL%$card_was_in_slot$ = $false$	:i if $MC_HasValidStorageDevice$		:i %GLOBAL%$card_was_in_slot$ = $true$	:i endif	:i $jam_memcard_validate_card_data$ isNull 	:i if (%GLOBAL%$corrupt$ = %i(0))		:i $goto$$memcard_save_jam$$params$ = :s{$card_was_in_slot$ = %GLOBAL%$card_was_in_slot$:s}	:i endif	:i endfunction]Script memcard_save_jam 0x23699ef5 [	${		StructInt OverwriteConfirmed = 0		StructQBKey card_was_in_slot = true	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $memcard_check_for_card$	:i $ResetTimer$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs f6157763	}$		:i $memcard_enum_folders$	:i if NOT $GotParam$${StructQBKey savegame}$		:i $GetSavegameFromController$$controller$ = (~$primary_controller$)	:i endif	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[93e360b9]^$type$ = $saving$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i if (%GLOBAL%$card_was_in_slot$ = $false$)			:i if (%GLOBAL%$OverwriteConfirmed$ = %i(1))				:i %GLOBAL%$overwrite$ = %i(1)				:i $ResetTimer$				:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$			:i else 				:i $goto$${StructQBKey create_confirm_overwrite_menu}$			:i endif		:i else 			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$		:i endif	:i else 		:i if NOT $MC_SpaceForNewFolder$${StructQBKey desc = guitarcontent}$			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i endif		:i $MC_CreateFolder$${			StructQBString name = memcard_jamsession_content_name			StructQBKey desc = JamSessionsContent		}$				:i if (%GLOBAL%$result$ = $false$)			:i if (%GLOBAL%$errorcode$ = $outofspace$)				:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $MC_LoadTOCInActiveFolder$	:i $jam_publish_update_playback_track$${StructInt guitar_num = 1}$	:i $jam_publish_update_playback_track$${StructInt guitar_num = 2}$	:i $jam_publish_update_playback_drumvocal_track$	:i $downloaded$ = %i(0)	:i $getsonginfo$	:i $change$$memcard_jamsession_genre$ = %GLOBAL%$genre$	:i $change$$memcard_jamsession_song_version$ = %GLOBAL%$song_version$	:i $change$$memcard_jamsession_downloaded$ = %GLOBAL%$downloaded$	:i $musicstudio_mainobj$.$musicstudio_getsonglength$	:i $change$$memcard_jamsession_song_length$ = %GLOBAL%$song_length$	:i if $GotParam$${StructQBKey file_id}$		:i $change$$memcard_jamsession_fileid$ = %GLOBAL%$file_id$	:i endif	:i $change$$memcard_jamsession_artist$ = %GLOBAL%$artist$	:i $change$$memcard_jamsession_playback_track1$ = %GLOBAL%$playback_track1$	:i $change$$memcard_jamsession_playback_track2$ = %GLOBAL%$playback_track2$	:i $change$$memcard_jamsession_playback_track_drums$ = %GLOBAL%$playback_track_drums$	:i $change$$memcard_jamsession_playback_track_vocals$ = %GLOBAL%$playback_track_vocals$	:i $SaveToMemoryCard$${		StructQBString filename = memcard_jamsession_file_name		StructQBKey filetype = jamsession		StructQBKey usepaddingslot = never	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i elseif (%GLOBAL%$errorcode$ = $badfolder$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_save_failed_menu}$		:i endif	:i endif	:i $SaveToMemoryCard$${		StructQBString filename = memcard_jamsession_file_name_patterns		StructQBKey filetype = jamsessionpatterns		StructQBKey usepaddingslot = never	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i elseif (%GLOBAL%$errorcode$ = $badfolder$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_save_failed_menu}$		:i endif	:i endif	:i $LoadFromMemoryCard$${		StructQBString filename = memcard_jamsession_file_name		StructQBKey filetype = jamsession	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $corrupt$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_load_failed_menu}$		:i endif	:i endif	:i $musicstudio_update_selected_song_name$$filename$ = (~$memcard_jamsession_file_name$)	:i $GetMemCardDirectoryListing$	:i $jam_update_controller_directory_listing$$controller$ = (~$MemcardController$)$directorylisting$ = %GLOBAL%$directorylisting$	:i $musicstudio_copy_curr_directory_listing$$directorylisting$ = %GLOBAL%$directorylisting$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x98e3ad04	}$		:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_wait_for_timer$	:i $guitar_memcard_save_success_sound$	:i $change$${StructInt cas_logo_data_dirty = 0}$	:i if NOT $MC_FolderExists$${StructQBString foldername = memcard_content_name}$		:i if NOT $MC_SpaceForNewFolder$${StructQBKey desc = guitarcontent}$			:i $memcard_error$${				StructQBKey error = create_out_of_space_menu				StructStruct params				{					StructHeader					{						StructQBKey message_type = progress					}				}			}$					:i endif	:i endif	:i $memcard_sequence_quit$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs e4d22b14	}$		:i endfunction]Script memcard_sequence_begin_load_jam_logic 0x7715d1ef [	${		StructInt StorageSelectorForce = 0		StructQBString controller = primary_controller	}$		:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x1be7f8f0	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_load_jam_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = jam}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $jam_memcard_validate_card_data$ isNull 	:i $goto$${StructQBKey memcard_load_jam}$	:i endfunction]Script memcard_load_jam 0x23c5081a [	:i $musicstudio_mainobj$.$musicstudio_addsong$${StructQBString song_name = jam_selected_song}$	:i if (%GLOBAL%$already_loaded$ = $true$)		:i $scriptassert$${StructQBStringQs dc310379}$	:i endif	:i $OnExitRun$${StructQBKey exit_load_music_studio_song}$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $memcard_check_for_card$	:i $ResetTimer$	:i $get_savegame_from_controller$$controller$ = (~$MemcardController$)	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs c201140a	}$		:i $memcard_enum_folders$	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[c8aec9d3]^$type$ = $loading$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i %GLOBAL%$pattern_only_load$ = $false$	:i if ((~$memcard_jamsession_file_name$) = (~$memcard_jamsession_file_name_patterns$))		:i %GLOBAL%$pattern_only_load$ = $true$	:i endif	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i else 		:i if (%GLOBAL%$pattern_only_load$ = $true$)			:i $change$${StructQBKey MemcardSuccess = true}$			:i $memcard_sequence_quit$		:i endif		:i $memcard_error$${StructQBKey error = create_no_save_found_menu}$	:i endif	:i $MC_LoadTOCInActiveFolder$	:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $corrupt$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_load_failed_menu}$		:i endif	:i endif	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i $reload_jam_patterns$ isNull 	:i if (%GLOBAL%$pattern_only_load$ = $false$)		:i $LoadFromMemoryCard$${			StructQBString filename = memcard_jamsession_file_name			StructQBKey filetype = jamsession		}$				:i if (%GLOBAL%$result$ = $false$)			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${					StructQBKey error = create_corrupted_data_menu					StructStruct params					{						StructHeader						{							StructQBKey file_type = jam_file						}					}				}$							:i else 				:i $memcard_error$${StructQBKey error = create_load_failed_menu}$			:i endif		:i endif	:i endif	:i if (%GLOBAL%$pattern_only_load$ = $false$)		:i $musicstudio_update_selected_song_name$$filename$ = (~$memcard_jamsession_file_name$)	:i endif	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x21ff1e27	}$		:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_wait_for_timer$${StructFloat time = 1.00}$	:i $memcard_sequence_quit$	:i endfunction]Script exit_load_music_studio_song 0x1ae6f95d [	:i $musicstudio_mainobj$.$musicstudio_removecurrentsong$	:i endfunction]Script async_load_music_studio_song e66cd746 [	:i $musicstudio_mainobj$.$musicstudio_addsong$$song_name$ = %GLOBAL%$filename$$mark_for_load$ = $async$	:i if (%GLOBAL%$already_loaded$ = $true$)		:i $printf$${StructQBStringQs f1492eef}$		:i return 	:i endif	:i $OnExitRun$${StructQBKey exit_load_music_studio_song}$	:i $jam_recording_create_editable_arrays$	:i $change$$memcard_jamsession_file_name$ = %GLOBAL%$filename$	:i $memcard_enum_folders$	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i else 		:i $printf$${StructQBStringQs 0x1db3a2a4}$		:i return 	:i endif	:i $MC_LoadTOCInActiveFolder$	:i if (%GLOBAL%$result$ = $false$)		:i $printf$${StructQBStringQs a69ecbe4}$		:i return 	:i endif	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i $LoadFromMemoryCard$$filename$ = %GLOBAL%$filename$$filetype$ = $jamsession$	:i if (%GLOBAL%$result$ = $false$)		:i $printf$${StructQBStringQs 0x7d24815b}$		:i return 	:i endif	:i $printf$${StructQBStringQs 0x55a76790}$	:i endfunction]Script memcard_sequence_begin_rename_jam_logic 0x183170fc [	${StructQBString controller = primary_controller}$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x1be7f8f0	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_rename_jam_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = jam}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $jam_memcard_validate_card_data$ isNull 	:i $goto$${StructQBKey memcard_rename_jam}$	:i endfunction]Script memcard_rename_jam b1e18e30 [	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x2e8352e2	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = loading}$	:i $memcard_check_for_card$	:i $ResetTimer$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x56078b7d	}$		:i $memcard_enum_folders$	:i if NOT $GotParam$${StructQBKey savegame}$		:i $GetSavegameFromController$$controller$ = (~$primary_controller$)	:i endif	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[93e360b9]^$type$ = $saving$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i else 		:i $memcard_error$${StructQBKey error = create_no_save_found_menu}$	:i endif	:i $MC_LoadTOCInActiveFolder$	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i $RenameMemCardFile$${		StructQBString filename = memcard_jamsession_file_name		StructQBKey filetype = jamsession		StructQBString newfilename = memcard_jamsession_new_file_name	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $corrupt$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_load_failed_menu}$		:i endif	:i endif	:i $SaveToMemoryCard$${		StructQBString filename = memcard_jamsession_new_file_name		StructQBKey filetype = jamsession		StructQBKey usepaddingslot = never	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_out_of_space_menu}$		:i else 			:i if (%GLOBAL%$overwrite$ = %i(1))				:i $memcard_error$${StructQBKey error = create_overwrite_failed_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $musicstudio_update_selected_song_name$$filename$ = (~$memcard_jamsession_new_file_name$)	:i $GetMemCardDirectoryListing$	:i $jam_update_controller_directory_listing$$controller$ = (~$MemcardController$)$directorylisting$ = %GLOBAL%$directorylisting$	:i $musicstudio_copy_curr_directory_listing$$directorylisting$ = %GLOBAL%$directorylisting$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x6c35e2b6	}$		:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_wait_for_timer$	:i $guitar_memcard_save_success_sound$	:i $memcard_sequence_quit$	:i endfunction]Script memcard_sequence_begin_delete_jam_logic e7a4cafa [	${StructQBString controller = primary_controller}$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs b777ae6b	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_delete_jam_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = jam}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $jam_memcard_validate_card_data$ isNull 	:i $goto$${StructQBKey memcard_delete_jam}$	:i endfunction]Script memcard_delete_jam 0x3d26524c [	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x45db1907	}$		:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $memcard_check_for_card$	:i $ResetTimer$	:i $memcard_enum_folders$	:i if NOT $GotParam$${StructQBKey savegame}$		:i $GetSavegameFromController$$controller$ = (~$primary_controller$)	:i endif	:i $savegame_ui_begin$$savegame$ = %GLOBAL%$savegame$$text$ = ^[4acaa8b9]^$type$ = $deleting$	:i $OnExitRun$$savegame_ui_end$$params$ = :s{$savegame$ = %GLOBAL%$savegame$:s}	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i else 		:i $memcard_error$${StructQBKey error = create_no_save_found_menu}$	:i endif	:i $MC_LoadTOCInActiveFolder$	:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i $DeleteMemCardFile$${		StructQBString filename = memcard_jamsession_file_name		StructQBKey filetype = jamsession	}$		:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $corrupt$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i elseif (%GLOBAL%$errorcode$ = $badfolder$)			:i $memcard_error$${				StructQBKey error = create_corrupted_data_menu				StructStruct params				{					StructHeader					{						StructQBKey file_type = jam_file					}				}			}$					:i else 			:i $memcard_error$${StructQBKey error = create_save_failed_menu}$		:i endif	:i endif	:i $GetMemCardDirectoryListing$	:i $jam_update_controller_directory_listing$$controller$ = (~$MemcardController$)$directorylisting$ = %GLOBAL%$directorylisting$	:i $musicstudio_copy_curr_directory_listing$$directorylisting$ = %GLOBAL%$directorylisting$	:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_wait_for_timer$	:i $guitar_memcard_save_success_sound$	:i $memcard_sequence_quit$	:i $printf$${		StructQBKey channel = jam_mode		StructQBStringQs 0x6b4e39fd	}$		:i endfunction]Script memcard_sequence_begin_lobby_error_logic d2ff94b1 [	${StructInt StorageSelectorForce = 0}$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_lobby_error}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = default}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i if $GotParam$${StructQBKey error}$		:i $memcard_error$$error$ = %GLOBAL%$error$$params$ = %GLOBAL%$event_params$	:i else 		:i if (%GLOBAL%$StorageSelectorForce$ = %i(1))			:i $memcard_validate_card_data$$StorageSelectorForce$ = %GLOBAL%$StorageSelectorForce$$ValidatePrev$ = %i(0)			:i if $MC_HasValidStorageDevice$				:i $change$${StructQBKey g_lobby_storageselect_return_confirm = true}$			:i endif		:i endif		:i $memcard_sequence_generic_done$	:i endif	:i endfunction]Script memcard_sequence_begin_check_jam_space_logic 0x940116de [	${StructQBString controller = primary_controller}$	:i $printf$${StructQBStringQs bb520895}$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardDoneScript = memcard_sequence_generic_done}$	:i $change$${StructQBKey MemcardRetryScript = memcard_sequence_begin_check_jam_space_logic}$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $change$${StructQBKey MemcardSuccess = false}$	:i $change$$MemcardController$ = %GLOBAL%$controller$	:i $change$${StructQBKey MemcardSigningIn = false}$	:i $change$${StructQBKey MemcardJamOrDefault = jam}$	:i $change$${StructQBKey MemcardInvalFolderOnFail = true}$	:i $jam_memcard_validate_card_data$ isNull 	:i $goto$${StructQBKey memcard_check_jam_space}$	:i endfunction]Script memcard_check_jam_space 0x5f5b88d6 [	:i $printf$${StructQBStringQs 0x96e3642b}$	:i $memcard_sequence_begin$	:i $change$${StructQBKey MemcardSavingOrLoading = saving}$	:i $memcard_check_for_card$	:i $memcard_enum_folders$	:i if NOT $GotParam$${StructQBKey savegame}$		:i $GetSavegameFromController$$controller$ = (~$primary_controller$)	:i endif	:i if $MC_FolderExists$${StructQBString foldername = memcard_jamsession_content_name}$		:i $MC_SetActiveFolder$${StructQBString foldername = memcard_jamsession_content_name}$	:i else 		:i if NOT $MC_SpaceForNewFolder$${StructQBKey desc = guitarcontent}$			:i $memcard_error$${StructQBKey error = create_jam_out_of_space_menu}$		:i endif		:i $MC_CreateFolder$${			StructQBString name = memcard_jamsession_content_name			StructQBKey desc = JamSessionsContent		}$				:i if (%GLOBAL%$result$ = $false$)			:i if (%GLOBAL%$errorcode$ = $outofspace$)				:i $memcard_error$${StructQBKey error = create_jam_out_of_space_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i $MC_LoadTOCInActiveFolder$	:i if (%GLOBAL%$result$ = $false$)		:i if (%GLOBAL%$errorcode$ = $outofspace$)			:i $memcard_error$${StructQBKey error = create_jam_out_of_space_menu}$		:i else 			:i if (%GLOBAL%$errorcode$ = $corrupt$)				:i $memcard_error$${StructQBKey error = create_corrupted_data_menu}$			:i else 				:i $memcard_error$${StructQBKey error = create_save_failed_menu}$			:i endif		:i endif	:i endif	:i if NOT $MC_SpaceForNewFolder$${StructQBKey desc = guitarcontent}$		:i $memcard_error$${StructQBKey error = create_jam_out_of_space_menu}$	:i endif	:i $printf$%s("Checking for %d space for jam songs")$d$ = %GLOBAL%$spacerequired$	:i $change$${StructQBKey MemcardSuccess = true}$	:i $memcard_sequence_quit$	:i endfunction]Script guitar_memcard_save_success_sound ffffffff [	:i endfunction]Script dim_save_option_for_guest 0x111be00c [	:i if $IsXenonOrWinDX$		:i if $NetSessionFunc$${				StructQBKey func = xenonisguest				StructStruct params				{					StructHeader					{						StructQBString controller_index = primary_controller					}				}			}$						:i if $GotParam$${StructQBKey popup_warning_child_index}$				:i $GetScreenElementChildren$$id$ = %GLOBAL%$menu_id$				:i (%GLOBAL%$children$:a{%GLOBAL%$popup_warning_child_index$:a}).$se_setprops$$not_focusable$			:i endif			:i return ${StructInt not_focusable = 1}$		:i endif	:i endif	:i endfunction]Script get_all_saving_players_controller_list 0x76af28d6 [	:i $array$ = :a{:a}	:i $AddArrayElement$$array$ = %GLOBAL%$array$$element$ = (~$primary_controller$)	:i if $IsXenon$		:i $GetNumPlayersInGame$${StructQBKey local}$		:i if (%GLOBAL%$num_players$ > %i(0))			:i $GetFirstPlayer$${StructQBKey local}$			:i while 			:i $getplayerinfo$%GLOBAL%$player$$controller$			:i if $IsLocallySignedIn$$controller$ = %GLOBAL%$controller$				:i if $get_savegame_has_saved_game$$savegame$ = %GLOBAL%$controller$					:i if $is_autosave_on$$savegame$ = %GLOBAL%$controller$						:i if NOT $ArrayContains$$array$ = %GLOBAL%$array$$contains$ = %GLOBAL%$controller$							:i if $GotParam$${StructQBKey reverse_order}$								:i $InsertArrayElement$$array$ = %GLOBAL%$array$$element$ = %GLOBAL%$controller$$index$ = %i(0)							:i else 								:i $AddArrayElement$$array$ = %GLOBAL%$array$$element$ = %GLOBAL%$controller$							:i endif						:i endif					:i endif				:i endif			:i endif			:i $GetNextPlayer$$local$$player$ = %GLOBAL%$player$			:i loop_to %GLOBAL%$num_players$		:i endif	:i endif	:i return $controller_list$ = %GLOBAL%$array$	:i endfunction]