Unknown [1c00000000000000000005fc0000000000000000]Script savegame_async_update_button_in 0x92b8950c [	:i $change$$MemcardController$ = (%GLOBAL%$Data$->$controller$)	:i if $DemoBuild$		:i return ${StructQBKey true}$	:i endif	:i if $get_savegame_has_saved_game$$savegame$ = %GLOBAL%$savegame$		:i $printf$%s("Already have savegame for %s")$s$ = %GLOBAL%$savegame$		:i return ${StructQBKey true}$	:i else 		:i $GetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$param$ = $has_warned_about_signin$		:i $GetGlobalTags$$savegame$ = %GLOBAL%$savegame$$user_options$$param$ = $autosave$		:i if ((%GLOBAL%$has_warned_about_signin$ = %i(1)) AND (%GLOBAL%$autosave$ = %i(0)))			:i return ${StructQBKey true}$		:i endif		:i $MC_SetActivePlayer$$userid$ = %GLOBAL%$savegame$		:i if $IsXenon$			:i $wait$${				StructInt 2				StructQBKey gameframes			}$						:i while 			:i if (~$paused_for_hardware$ = %i(0))				:i continue			:i endif			:i if $abort_for_signout$$controller$ = %GLOBAL%$savegame$				:i return ${StructQBKey false}$			:i endif			:i $printf$${StructString 0x00000000 = "Waiting for $paused_for_hardware..."}$			:i $wait$${				StructInt 1				StructQBKey gameframe			}$						:i loop_to 			:i $sysnotify_wait_until_safe$			:i if $abort_for_signout$$controller$ = %GLOBAL%$savegame$				:i return ${StructQBKey false}$			:i endif		:i endif		:i $ShowStorageSelector$${StructQBKey filetype = progress}$		:i if NOT $MC_HasValidStorageDevice$			:i if $IsXenon$				:i $change$$g_lobby_storageselect_return_savegame$ = %GLOBAL%$savegame$				:i $change$${StructQBKey g_lobby_storageselect_return_confirm = false}$			:i else 				:i $scriptassert$${StructString 0x00000000 = "savegame_async_update_button_in: No storage select on PS3"}$			:i endif			:i return ${				StructQBKey false				StructQBKey error = create_storagedevice_warning_menu			}$					:i endif		:i $MC_EnumerateFolders$		:i if (%GLOBAL%$result$ = $false$)			:i return ${				StructQBKey false				StructQBKey error = create_load_failed_menu			}$					:i endif		:i $GetTrueStartTime$		:i if $MC_FolderExists$${StructQBString foldername = memcard_content_name}$			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(1000)			:i $GetTrueStartTime$			:i %GLOBAL%$callback$$Data$ = %GLOBAL%$Data$$update_ui$$loading$			:i $change$${StructQBKey MemcardSavingOrLoading = loading}$			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$			:i $MC_LoadTOCInActiveFolder$			:i if (%GLOBAL%$result$ = $false$)				:i return ${					StructQBKey false					StructQBKey error = create_corrupted_data_menu				}$							:i endif			:i if NOT $MemCardFileExists$${					StructQBString filename = memcard_file_name					StructQBKey filetype = progress				}$								:i return ${					StructQBKey false					StructQBKey error = create_corrupted_data_menu				}$							:i endif			:i $printf$%s("Found previous save for %s")$s$ = %GLOBAL%$savegame$			:i $memcard_pre_load_progress$$savegame$ = %GLOBAL%$savegame$			:i $LoadFromMemoryCard$${				StructQBString filename = memcard_file_name				StructQBKey filetype = progress			}$						:i if (%GLOBAL%$result$ = $false$)				:i $memcard_post_load_progress_failed$$savegame$ = %GLOBAL%$savegame$				:i if (%GLOBAL%$errorcode$ = $corrupt$)					:i return ${						StructQBKey false						StructQBKey error = create_corrupted_data_menu					}$									:i else 					:i return ${						StructQBKey false						StructQBKey error = create_load_failed_menu					}$									:i endif			:i endif			:i $memcard_post_load_progress$$savegame$ = %GLOBAL%$savegame$$savegame_async$ = %i(1)			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(1000)			:i if NOT $GotParam$${StructQBKey jamerrorcode}$				:i return ${StructQBKey true}$			:i endif		:i else 			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(1000)			:i $GetTrueStartTime$			:i %GLOBAL%$callback$$Data$ = %GLOBAL%$Data$$update_ui$$saving$			:i $change$${StructQBKey MemcardSavingOrLoading = saving}$			:i $printf$%s("No previous save for %s")$s$ = %GLOBAL%$savegame$			:i $MC_CreateFolder$${				StructQBString name = memcard_content_name				StructQBKey desc = guitarcontent			}$						:i if (%GLOBAL%$result$ = $false$)				:i if (%GLOBAL%$errorcode$ = $outofspace$)					:i return ${						StructQBKey false						StructQBKey error = create_out_of_space_menu					}$									:i else 					:i return ${						StructQBKey false						StructQBKey error = create_save_failed_menu					}$									:i endif			:i endif			:i $MC_SetActiveFolder$${StructQBString foldername = memcard_content_name}$			:i $memcard_pre_save_progress$$savegame$ = %GLOBAL%$savegame$			:i $SaveToMemoryCard$${				StructQBString filename = memcard_file_name				StructQBKey filetype = progress				StructQBKey usepaddingslot = always			}$						:i if (%GLOBAL%$result$ = $false$)				:i if (%GLOBAL%$errorcode$ = $outofspace$)					:i return ${						StructQBKey false						StructQBKey error = create_out_of_space_menu					}$									:i else 					:i if (%GLOBAL%$errorcode$ = $corrupt$)						:i return ${							StructQBKey false							StructQBKey error = create_out_of_space_menu						}$											:i else 						:i return ${							StructQBKey false							StructQBKey error = create_save_failed_menu						}$											:i endif				:i endif			:i endif			:i $memcard_post_save_progress$$savegame$ = %GLOBAL%$savegame$$savegame_async$ = %i(1)			:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(3000)			:i if NOT $GotParam$${StructQBKey jamerrorcode}$				:i return ${StructQBKey true}$			:i endif		:i endif		:i if $GotParam$${StructQBKey jamerrorcode}$			:i if (%GLOBAL%$jamerrorcode$ = $corrupt$)				:i return ${					StructQBKey false					StructQBKey error = create_corrupted_data_menu					StructStruct error_params					{						StructHeader						{							StructQBKey file_type = jam_file						}					}				}$							:i else 				:i return ${StructQBKey true}$			:i endif		:i endif	:i endif	:i endfunction]Script savegame_async_update_dlc_scan 0x498c330f [	:i if NOT $will_scan_dlc$		:i return 	:i endif	:i if $DemoBuild$		:i return 	:i endif	:i %GLOBAL%$callback$$Data$ = %GLOBAL%$Data$$update_ui$$scanning_dlc$	:i $GetTrueStartTime$	:i $Downloads_EnumContent$$controller$ = %GLOBAL%$savegame$$savegame_ui_savegame$ = %GLOBAL%$savegame$	:i $wait_at_least_x_ms$$starttime$ = %GLOBAL%$starttime$$at_least$ = %i(1000)	:i endfunction]Script wait_at_least_x_ms 0x932e1ecc [	${StructInt at_least = 1000}$	:i $RequireParams$${		StructArray 0x00000000		{			ArrayQBKey			[				starttime			]		}		StructQBKey all	}$		:i while 	:i $GetTrueElapsedTime$$starttime$ = %GLOBAL%$starttime$	:i if (%GLOBAL%$elapsedtime$ > %GLOBAL%$at_least$)		:i continue	:i endif	:i $printf$${StructString 0x00000000 = "wait_at_least_x_ms - waiting..."}$	:i $wait$${		StructInt 1		StructQBKey gameframe	}$		:i loop_to 	:i endfunction]